import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as l,a,b as n,d as t,w as e,e as p}from"./app-CLCm9sG7.js";const u={},r=p(`<h1 id="multi-tenancy" tabindex="-1"><a class="header-anchor" href="#multi-tenancy" aria-hidden="true">#</a> Multi-tenancy</h1><h3 id="what-is-multi-tenancy" tabindex="-1"><a class="header-anchor" href="#what-is-multi-tenancy" aria-hidden="true">#</a> What is Multi-tenancy?</h3><p>According to Wikipedia: &quot;Software multi-tenancy is a software architecture in which a single instance of software runs on a server and serves multiple tenants.&quot; A tenant is a group of users who share specific permissions on that software instance. With a multi-tenancy architecture, software applications are designed to provide each tenant with a dedicated instance, including data specific to that instance, while also sharing configuration, user management, tenant-specific features, and non-functional attributes. Compared to a multi-instance architecture, multi-tenancy separates multiple instances representing different tenants.</p><p>Multi-tenancy is used to create SaaS (Software as a Service) applications (cloud processing).</p><h3 id="approach-1-tenant-field-differentiation" tabindex="-1"><a class="header-anchor" href="#approach-1-tenant-field-differentiation" aria-hidden="true">#</a> Approach 1: Tenant Field Differentiation</h3><p><strong>Step 1:</strong> Understand <code>AsyncLocal&lt;int&gt;</code></p><p><code>ThreadLocal</code> can be thought of as a dictionary <code>Dictionary&lt;int, string&gt;</code> where Key is the thread ID and Value is the value. When crossing methods, you only need to know the thread ID to obtain the corresponding value.</p><p>However, we know that the thread ID might change across asynchronous methods, making <code>ThreadLocal</code> unsuitable.</p><p><code>AsyncLocal</code> is an upgraded version of <code>ThreadLocal</code>, which solves the problem of retrieving the corresponding value across asynchronous methods.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantManager</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Must be static</span>
    <span class="token keyword">static</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> _asyncLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Current
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _asyncLocal<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> _asyncLocal<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 2:</strong> FreeSql global filters allow any query/update/delete to include tenant conditions.</p><p>The following code does not activate the filter if the tenant value is not set. What does this mean?</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Global filters should be applied once during IFreeSql initialization</span>
<span class="token comment">// ITenant can be a custom interface or any entity type with a TenantId property. FreeSql does not need to set filters for every entity type (once is sufficient)</span>
fsql<span class="token punctuation">.</span>GlobalFilter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ApplyIf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITenant<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;TenantFilter&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Filter name</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TenantManager<span class="token punctuation">.</span>Current <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// Filter activation condition</span>
    a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>TenantId <span class="token operator">==</span> TenantManager<span class="token punctuation">.</span>Current <span class="token comment">// Filter condition</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

TenantManager<span class="token punctuation">.</span>Current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SELECT .. FROM T</span>

TenantManager<span class="token punctuation">.</span>Current <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SELECT .. FROM T WHERE TenantId = 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 3:</strong> FreeSql <code>Aop.AuditValue</code> object audits events to implement unified interception of insert and update entity objects.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>AuditValue <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>TenantManager<span class="token punctuation">.</span>Current <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span>PropertyType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;TenantId&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>Value <span class="token operator">=</span> TenantManager<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 4:</strong> Handle tenant logic in the <code>AspnetCore</code> <code>Startup.cs</code> middleware.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Users parse the token through the aspnetcore middleware to obtain the tenant ID</span>
            TenantManager<span class="token punctuation">.</span>Current <span class="token operator">=</span> <span class="token function">YourGetTenantIdFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Clear tenant status</span>
            TenantManager<span class="token punctuation">.</span>Current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wherecascade" tabindex="-1"><a class="header-anchor" href="#wherecascade" aria-hidden="true">#</a> WhereCascade</h3><p>When querying multiple tables, it&#39;s cumbersome to apply conditions like <code>isdeleted</code> to each table. <code>WhereCascade</code> attaches this condition to all tables when generating SQL. This can also solve multi-table tenant conditions.</p><p>For example:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>t1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LeftJoin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>t2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">WhereCascade</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>IsDeleted <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The resulting SQL:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> t1
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t2 <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>t2<span class="token punctuation">.</span>IsDeleted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>IsDeleted <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is effective only when expressions can be appended to entities, and it supports sub-table queries. The more tables used in a single query, the greater the benefit.</p><p>Applicable scopes:</p><ul><li>Subqueries, one-to-many, many-to-many, custom subqueries;</li><li>Join queries, navigation properties, custom join queries;</li><li>Include/IncludeMany sub-collection queries;</li></ul><blockquote><p>Broadcasting of [deferred properties] is not currently supported;</p></blockquote><blockquote><p>This feature is different from [filters], as it propagates conditions for single multi-table queries.</p></blockquote><h3 id="approach-2-tenant-specific-tables" tabindex="-1"><a class="header-anchor" href="#approach-2-tenant-specific-tables" aria-hidden="true">#</a> Approach 2: Tenant-specific Tables</h3><p>This approach requires each tenant to correspond to different tables, such as <code>Goods_1</code>, <code>Goods_2</code>, <code>Goods_3</code> corresponding to tenant 1, tenant 2, and tenant 3’s product tables respectively.</p><p>This is essentially a standard sharding approach. FreeSql provides several APIs for sharding scenarios:</p><ul><li>Create table <code>fsql.CodeFirst.SyncStructure(typeof(Goods), &quot;Goods_1&quot;)</code></li><li>Perform CURD operations on the table</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> goodsRepository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Goods<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> old <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Goods</span><span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">TenantManager<span class="token punctuation">.</span>Current</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The above code creates a repository with tenant-specific tables, so operations will eventually affect the <code>Goods_1</code> table.</p>`,34),d=p(`<blockquote><p>v3.2.833 Dynamic Table Name Setting</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSql<span class="token punctuation">.</span>FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseMappingPriority</span><span class="token punctuation">(</span>MappingPriorityType<span class="token punctuation">.</span>Attribute<span class="token punctuation">,</span> MappingPriorityType<span class="token punctuation">.</span>FluentApi<span class="token punctuation">,</span> MappingPriorityType<span class="token punctuation">.</span>Aop<span class="token punctuation">)</span>
    <span class="token range operator">..</span><span class="token range operator">..</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntity <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">TenantAccessor<span class="token punctuation">.</span>Current</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span> <span class="token comment">// Table name };</span>

app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Users parse the token through the aspnetcore middleware to obtain tenant information</span>
    <span class="token class-name"><span class="token keyword">string</span></span> tenant <span class="token operator">=</span> <span class="token function">YourGetTenantFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TenantAccessor</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantAccessor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Current <span class="token operator">=&gt;</span> current<span class="token punctuation">.</span>Value <span class="token operator">??</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TenantAccessor</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> tenant<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        current<span class="token punctuation">.</span>Value <span class="token operator">=</span> tenant<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        current<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="approach-3-tenant-specific-databases" tabindex="-1"><a class="header-anchor" href="#approach-3-tenant-specific-databases" aria-hidden="true">#</a> Approach 3: Tenant-specific Databases</h3><ul><li><strong>Scenario 1:</strong> Within the same database instance (not cross-server), differentiate between tenants using different database names or schemas. The method is the same as Approach 2.</li><li><strong>Scenario 2:</strong> Cross-server sharding, this section explains this scenario.</li></ul><p><strong>Step 1:</strong> <code>FreeSql.Cloud</code> provides cross-database access for FreeSql, distributed transactions TCC, and SAGA solutions, supporting .NET Core 2.1+, .NET Framework 4.0+.</p><p>Instead of creating <code>IFreeSql</code> using <code>FreeSqlBuilder</code>, you should use <code>FreeSqlCloud</code> since it also implements the <code>IFreeSql</code> interface.</p><blockquote><p>dotnet add package FreeSql.Cloud</p></blockquote><p>or</p><blockquote><p>Install-Package FreeSql.Cloud</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">FreeSqlCloud<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlCloud<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    fsql<span class="token punctuation">.</span>DistributeTrace <span class="token operator">=</span> log <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fsql<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>SqlServer<span class="token punctuation">,</span> <span class="token string">&quot;data source=main.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//db.Aop.CommandAfter += ...</span>
        <span class="token keyword">return</span> db<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFreeSql<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Users parse the token through the aspnetcore middleware to obtain tenant information from the main database.</span>
            <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> tenant<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> connectionString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">YourGetTenantFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Only registers once. If already registered, it will not be effective.</span>
            fsql<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>tenant<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>SqlServer<span class="token punctuation">,</span> connectionString<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//db.Aop.CommandAfter += ...</span>
                <span class="token keyword">return</span> db<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Switch tenant</span>
            fsql<span class="token punctuation">.</span><span class="token function">Change</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Switch back to the main database</span>
            fsql<span class="token punctuation">.</span><span class="token function">Change</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 2:</strong> Directly use <code>IFreeSql</code> to access tenant databases.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Use fsql to operate on the current tenant&#39;s database</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>To temporarily access other database tables, use <code>FreeSqlCloud</code> object <code>Use(&quot;db3&quot;).Select&lt;T&gt;().ToList()</code></li><li>For base tables in the main database, use <code>FreeSqlCloud</code> object <code>EntitySteering</code> to permanently direct to <code>main</code> without manually switching using <code>.Use</code></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>EntitySteering <span class="token operator">=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>EntityType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Query T automatically directs to db3</span>
        e<span class="token punctuation">.</span>DBKey <span class="token operator">=</span> <span class="token string">&quot;db3&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function k(v,m){const s=c("RouterLink");return i(),l("div",null,[r,a("blockquote",null,[a("p",null,[n("For more details, see: "),t(s,{to:"/en/guide/repository.html"},{default:e(()=>[n("《FreeSql.Repository Repository》")]),_:1}),n(", "),t(s,{to:"/en/guide/sharding.html"},{default:e(()=>[n("《Sharding》")]),_:1}),n(".")])]),d])}const h=o(u,[["render",k],["__file","multi-tenancy.html.vue"]]);export{h as default};
