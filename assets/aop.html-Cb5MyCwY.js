import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as s,d as i,w as l,e as a}from"./app-DLgdi4H4.js";const u={},r=a(`<h1 id="aop-✨" tabindex="-1"><a class="header-anchor" href="#aop-✨" aria-hidden="true">#</a> Aop ✨</h1><p>FreeSql AOP introduces existing features and will continue to enhance them based on user needs in the future.</p><h2 id="audit-commands-how-to-monitor-sql" tabindex="-1"><a class="header-anchor" href="#audit-commands-how-to-monitor-sql" aria-hidden="true">#</a> Audit Commands (How to Monitor SQL?)</h2><p>If a SQL operation is taking a long time and there is no related auditing feature, it can be challenging to troubleshoot.</p><p>The <code>fsql.Aop.CommandBefore</code> and <code>fsql.Aop.CommandAfter</code> events trigger before and after the execution of all SQL commands, respectively.</p><p>The post-execution event will include exception information, execution time, and other details.</p><p>It is recommended to enable the non-parameterized mode in development mode using <code>new FreeSqlBuilder().UseNoneCommandParameter(true)</code>.</p><blockquote><p>Tip: <code>new FreeSqlBuilder().UseMonitorCommand</code> can also audit command execution before and after.</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>CommandBefore <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// e.Command.CommandText = null; can intercept the command</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>CommandAfter <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Perform some logging. The following is an example.</span>
        Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">\\r\\nStackTrace:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>StackTrace</span><span class="token punctuation">}</span></span><span class="token string">\\r\\nCommandText:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Command<span class="token punctuation">.</span>CommandText</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="audit-property-values" tabindex="-1"><a class="header-anchor" href="#audit-property-values" aria-hidden="true">#</a> Audit Property Values</h2><p>Handle certain values uniformly during insert/update, such as a snowflake algorithm value, creation time value, or even business values.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>AuditValue <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Column<span class="token punctuation">.</span>CsType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">long</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SnowflakeAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
        e<span class="token punctuation">.</span>Value<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
        e<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Snowflake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Snowflake</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the property&#39;s type is <code>long</code>, and it is marked with <code>[Snowflake]</code>, and the current value is <code>0</code>, its value will be set to a snowflake ID during insert/update.</p><blockquote><p>Note: <code>SnowflakeAttribute</code> is defined by you, and <code>new Snowflake().GetId()</code> should also be implemented by you.</p></blockquote><p>If naming conventions are followed, you can check in the AOP, <code>if (e.Property.Name == &quot;createtime&quot;) e.Value = DateTime.Now;</code></p><blockquote><p>v3.2.666 allows setting <code>e.ObjectAuditBreak = true</code> to interrupt object auditing, effectively ensuring each object triggers the <code>AuditValue</code> event only once.</p></blockquote><h2 id="audit-migration-scripts" tabindex="-1"><a class="header-anchor" href="#audit-migration-scripts" aria-hidden="true">#</a> Audit Migration Scripts</h2><p>FreeSql comes with migration features, so you might be curious about what migration SQL statements look like.</p><ul><li>For example, when creating a table;</li><li>For example, when adding fields;</li><li>For example, when renaming tables or fields;</li><li>And also when changing field types;</li></ul><p>These operations are largely abstracted under <code>FreeSql.CodeFirst</code>, and we recommend using automated migration features only in development environments; in production, use other tools instead.</p><p>However, you might still need to keep complete logs for the project.</p><p>The <code>fsql.Aop.SyncStructureBefore</code> and <code>fsql.Aop.SyncStructureAfter</code> events will be useful here.</p><h2 id="configentity" tabindex="-1"><a class="header-anchor" href="#configentity" aria-hidden="true">#</a> ConfigEntity</h2><h3 id="unified-configuration-architecture" tabindex="-1"><a class="header-anchor" href="#unified-configuration-architecture" aria-hidden="true">#</a> Unified Configuration Architecture</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Set FreeSqlBuilder AOP priority in advance</span>
<span class="token comment">// UseMappingPriority(MappingPriorityType.Attribute, MappingPriorityType.FluentApi, MappingPriorityType.Aop)</span>

fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntity <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;public.&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
    <span class="token comment">// Tip: You can use AsyncLocal to dynamically set table names v3.2.833</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql-enum-mapping" tabindex="-1"><a class="header-anchor" href="#mysql-enum-mapping" aria-hidden="true">#</a> MySql Enum Mapping</h3><p>By default, C# enums will be mapped to MySql Enum types. If you want to map them to <code>int</code>, execute the following AOP configuration after <code>FreeSqlBuilder Build</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntityProperty <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span>PropertyType<span class="token punctuation">.</span>IsEnum<span class="token punctuation">)</span>
        e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modify-decimal-default-properties" tabindex="-1"><a class="header-anchor" href="#modify-decimal-default-properties" aria-hidden="true">#</a> Modify Decimal Default Properties</h3><p>By default, <code>decimal</code> only supports <code>decimal(10,2)</code>, which has too small a range. We can globally modify the supported range for <code>decimal</code> types, for example, to support <code>decimal(18,6)</code>.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql1<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntityProperty <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span>PropertyType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">decimal</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span>PropertyType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Precision <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
       e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Scale <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-entity-attributes" tabindex="-1"><a class="header-anchor" href="#custom-entity-attributes" aria-hidden="true">#</a> Custom Entity Attributes</h3><p>For example, if the project already uses another ORM like EFCore, it means the entity might contain <code>[Key]</code>, which is different from FreeSql&#39;s <code>[Column(IsPrimary = true)]</code>.</p><p>Q: Why are FreeSql entity attributes so awkward?</p><p>A: To ensure consistency, all are encapsulated under <code>ColumnAttribute</code>, so users don’t need to remember which attribute name to use, e.g., auto-increment <code>[Column(IsIdentity = true)]</code>.</p><p>FreeSql provides AOP custom attribute functionality to implement a unified set of entity attributes with multiple ORMs, avoiding repetitive definitions of attributes.</p><blockquote><p>v1.4.0+ automatically recognizes EFCore entity attributes <code>Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column</code>.</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntity <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> attr <span class="token operator">=</span> e<span class="token punctuation">.</span>EntityType<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyTableAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">MyTableAttribute</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name <span class="token operator">=</span> attr<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token comment">// Table name</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntityProperty <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> attr <span class="token operator">=</span> e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyColumnAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">MyColumnAttribute</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name <span class="token operator">=</span> attr<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token comment">// Field name</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MyTable</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">YourEntity</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MyColumn</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> pkid <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyTableAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">MyTableAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyColumnAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">MyColumnAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ado-net-read-interception" tabindex="-1"><a class="header-anchor" href="#ado-net-read-interception" aria-hidden="true">#</a> Ado .NET Read Interception</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>AuditDataReader <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>DataReader<span class="token punctuation">.</span><span class="token function">GetFieldType</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        e<span class="token punctuation">.</span>Value <span class="token operator">==</span> DBNull<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
            e<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="expression-interception" tabindex="-1"><a class="header-anchor" href="#expression-interception" aria-hidden="true">#</a> Expression Interception</h2><p>FreeSql&#39;s internal expression support is very rich and compatible with major databases.</p>`,42),d=a(`<p>Despite this richness, it may still not meet all user needs. FreeSql provides a custom expression parsing interface:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ParseExpression <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Expression<span class="token punctuation">.</span>NodeType <span class="token operator">==</span> Call <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Expression<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;get_Item&quot;</span><span class="token punctuation">)</span>
        e<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token string">&quot;1111&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This parsing can be complex. When <code>e.Expression</code> is very complicated, we also provide the <code>e.FreeParse</code> method, which is equivalent to calling FreeSql’s built-in expression parsing engine to assist with parsing.</p><h2 id="custom-global-type-conversions" tabindex="-1"><a class="header-anchor" href="#custom-global-type-conversions" aria-hidden="true">#</a> Custom Global Type Conversions</h2><p>In the framework, apart from basic types, you can use <code>TypeHandlers</code> to add converters, with one specific class corresponding to one converter.</p><p>Suppose you have a BT requirement: convert <code>&#39;A10&#39;</code> from the database to the enum <code>TestType.A</code> (with int value 10).</p><ul><li>In EF, the framework traverses all entities and adds converters based on specific Enum types when <code>ctx</code> is created.</li><li>In FreeSql, the approach is similar. In the <code>ConfigEntityProperty</code> delegate, you can obtain the property type and then create a specific converter.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Configuration code</span>
freeSql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntityProperty <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span>PropertyType<span class="token punctuation">.</span>IsEnum<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">EnumToValueStringHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EnumToValueStringHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span>PropertyType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FreeSql<span class="token punctuation">.</span>Internal<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>TypeHandlers<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>ModelType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Converter code</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumToValueStringHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITypeHandler</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// ModelType here uses ModelType to express which type the Handler is targeting</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Type</span> enumType<span class="token punctuation">;</span>
    <span class="token return-type class-name">Type</span> ITypeHandler<span class="token punctuation">.</span>Type <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enumType<span class="token punctuation">;</span> <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> ModelType <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enumType<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Constructor passes specific type information to handle the conversion</span>
    <span class="token keyword">public</span> <span class="token function">EnumToValueStringHandler</span><span class="token punctuation">(</span><span class="token class-name">Type</span> enumType<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>enumType <span class="token operator">=</span> enumType<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// xxEnum -&gt; string with A prefix</span>
    <span class="token return-type class-name"><span class="token keyword">object</span></span> ITypeHandler<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TestType<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// string -&gt; xxEnum by removing A prefix</span>
    <span class="token return-type class-name"><span class="token keyword">object</span></span> ITypeHandler<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Enum<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Parse</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The core idea is that <code>ITypeHandler.Type</code> becomes a variable that can be passed from outside. There are some additional issues to consider:</p><ol><li>All &quot;xxxEnum&quot; values will be converted using this handler. If multiple database formats are involved, handle this in the <code>Handler</code>.</li><li>When there are many entity classes and numerous enum properties, performance may be impacted. In such cases, it is advisable not to modify the entity classes directly. Instead, you can use partial classes to add a new property for handling conversions. Set the property to Ignore and perform the conversion in the getter and setter.</li></ol>`,10);function k(m,v){const e=p("RouterLink");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("For details on expression support, refer to: "),i(e,{to:"/en/guide/expression-function.html"},{default:l(()=>[s("Expression Functions")]),_:1})])]),d])}const h=t(u,[["render",k],["__file","aop.html.vue"]]);export{h as default};
