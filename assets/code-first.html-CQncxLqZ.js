import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-CdwY6YbT.js";const l={},u=e(`<h1 id="codefirst" tabindex="-1"><a class="header-anchor" href="#codefirst" aria-hidden="true">#</a> CodeFirst</h1><p><code>FreeSql</code> supports migrating structures to the database using <code>CodeFirst</code>, which is a standard feature for (<code>O/RM</code>).</p><p>Unlike other (<code>O/RM</code>) frameworks, <code>FreeSql</code> supports more database features beyond basic data types. This is both an advantage and a disadvantage: the advantage is the full utilization of database features to aid development, while the disadvantage is that switching databases becomes more challenging. Different programmers might have varying philosophies; <code>FreeSql</code> tries to push feature support to its limits, but whether to use it is another matter for the project team to assess.</p><p>Although adapting to multiple databases is complex, <code>FreeSql</code> adheres to the principle of optimizing development habits, implementing solutions to challenges that are not technically feasible, such as custom database types which conflict with entity classes. To reduce usage costs, such database features are not supported.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSql<span class="token punctuation">.</span>FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>DataType<span class="token punctuation">.</span>MySql<span class="token punctuation">,</span> connectionString<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseAutoSyncStructure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// Automatically sync entity structures [essential for development environment]. FreeSql will not scan assemblies; tables are only created during CRUD operations.</span>
    <span class="token punctuation">.</span><span class="token function">UseMonitorCommand</span><span class="token punctuation">(</span>cmd <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>CommandText<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Please define this as a Singleton</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="migrating-structures" tabindex="-1"><a class="header-anchor" href="#migrating-structures" aria-hidden="true">#</a> Migrating Structures</h2>`,6),r=n("thead",null,[n("tr",null,[n("th",null,"Create Database"),n("th",null,"Sqlite"),n("th",null,"Sql Server"),n("th",null,"MySql"),n("th",null,"PostgreSQL"),n("th",null,"Oracle")])],-1),d=n("td",null,null,-1),k=n("td",null,"√",-1),m={href:"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L153",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L129",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L233",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"X",-1),v=e(`<table><thead><tr><th>Entity &amp; Table Comparison</th><th>Add</th><th>Rename</th><th>Delete</th></tr></thead><tbody><tr><td></td><td>√</td><td>√</td><td>X</td></tr></tbody></table><table><thead><tr><th>Entity Property &amp; Field Comparison</th><th>Add</th><th>Modify Nullable</th><th>Modify Auto-Increment</th><th>Modify Type</th><th>Rename</th><th>Delete</th><th>Notes</th></tr></thead><tbody><tr><td></td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>X</td><td>√</td></tr></tbody></table><blockquote><p>To ensure safety, field deletion is not provided.</p></blockquote><p>Warning: Incomplete mapping between entity class properties and database table fields may lead to data loss.</p><blockquote><p>Reason: Some migration comparison operations involve creating temporary tables, importing old table data, and deleting old tables.</p></blockquote><h3 id="freesql-provides-two-codefirst-migration-methods-automatic-and-manual" tabindex="-1"><a class="header-anchor" href="#freesql-provides-two-codefirst-migration-methods-automatic-and-manual" aria-hidden="true">#</a> FreeSql Provides Two CodeFirst Migration Methods: Automatic and Manual.</h3><p><strong>Note</strong>: Exercise caution when using this feature in production environments.</p><p><strong>Note</strong>: Exercise caution when using this feature in production environments.</p><p><strong>Note</strong>: Exercise caution when using this feature in production environments.</p><h3 id="automatically-sync-entity-structure-essential-for-development-environment" tabindex="-1"><a class="header-anchor" href="#automatically-sync-entity-structure-essential-for-development-environment" aria-hidden="true">#</a> Automatically Sync Entity Structure [Essential for Development Environment]</h3><p>Automatically synchronize entity structures to the database. The program checks if the entity tables exist during runtime and then performs migration to create or modify them.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span>IsAutoSyncDataStructure <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>This feature is enabled by default. Please modify this setting after deploying to the production environment.</p></blockquote><blockquote><p>Although the [automatic synchronization of entity structures] feature is very useful during development, it can clutter the database with unnecessary fields. Try to control changes in entity or property names to minimize this issue.</p></blockquote>`,14),g=n("li",null,[s("Note: Table structures are automatically generated only when CURD operations are performed on the table. For migrating table structures during system runtime, use the "),n("strong",null,"SyncStructure"),s(" method.")],-1),f=n("code",null,"FreeSql",-1),w=n("code",null,"MySql",-1),T=n("code",null,"Sql Server",-1),S=n("code",null,"PostgreSQL",-1),q={href:"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs",target:"_blank",rel:"noopener noreferrer"},x=e(`<h3 id="disabling-migration" tabindex="-1"><a class="header-anchor" href="#disabling-migration" aria-hidden="true">#</a> Disabling Migration</h3><p>When the [entity class] corresponds to a database [view] or other objects, you can disable the specified entity migration operation by using [Table(DisableSyncStructure = true)].</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DisableSyncStructure <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">ModelDisableSyncStructure</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsPrimary <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> pkid <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>FreeSql CodeFirst supports migrating C# code comments to database comments. Prerequisites:</p><ol><li>The assembly containing the entity class must have XML documentation enabled;</li><li>The XML file must be in the same directory as the assembly and named: xxx.dll -&gt; xxx.xml;</li></ol><blockquote><p>Version 1.5.0+ added support for the Description attribute, with a lower priority than C# code comments.</p></blockquote><h3 id="manual-synchronization-of-entity-structure" tabindex="-1"><a class="header-anchor" href="#manual-synchronization-of-entity-structure" aria-hidden="true">#</a> Manual Synchronization of Entity Structure</h3><p>Provides an interface method to compare entities with changes in the database, returning SQL statements.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t1 <span class="token operator">=</span> mysql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComparisonDDLStatements</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">ushort</span></span> fusho <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>cccddd<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>Topic<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>Id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>Clicks<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>Title<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>CreateTime<span class="token punctuation">\`</span></span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>fusho<span class="token punctuation">\`</span></span> <span class="token keyword">SMALLINT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>Id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">Engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Provides an interface method to synchronize structure</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SyncStructure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Sync entity types to the database</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bulk-table-structure-generation" tabindex="-1"><a class="header-anchor" href="#bulk-table-structure-generation" aria-hidden="true">#</a> Bulk Table Structure Generation</h4><ul><li><code>void SyncStructure(params Type[])</code> overloaded method supports arrays, synchronizing a collection of entity types to the database.</li><li>IEntity class can be any class in the assembly where the entity class is located.</li></ul><p>Method 1: Scan the assembly where the IEntity class is located and reflect to find all classes with the TableAttribute feature tag. This method requires the entity class to have a [Table(Name = &quot;xxx&quot;)] attribute.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GetTypesByTableAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> tableAssembies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> type <span class="token keyword">in</span> Assembly<span class="token punctuation">.</span><span class="token function">GetAssembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IEntity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetExportedTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Attribute</span> attribute <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attribute <span class="token keyword">is</span> <span class="token class-name">TableAttribute</span> tableAttribute<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tableAttribute<span class="token punctuation">.</span>DisableSyncStructure <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
                    tableAssembies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> tableAssembies<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Call</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span><span class="token function">SyncStructure</span><span class="token punctuation">(</span><span class="token function">GetTypesByTableAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Method 2: Obtain all entity classes to be created through namespaces. Adjust the namespace values in <code>entitiesFullName</code> as needed. For example, we create an Entities folder to store entity classes. This method filters all entity classes in the assembly where IEntity is located. Their namespaces all start with LinCms.Entities and are checked using StartsWith.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GetTypesByNameSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> tableAssembies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> entitiesFullName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;LinCms.Entities.Settings&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;LinCms.Entities.Base&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> type <span class="token keyword">in</span> Assembly<span class="token punctuation">.</span><span class="token function">GetAssembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IEntity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetExportedTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> fullname <span class="token keyword">in</span> entitiesFullName<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>FullName<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span>fullname<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span>IsClass<span class="token punctuation">)</span>
                tableAssembies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> tableAssembies<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or call to synchronize all table structures</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span><span class="token function">SyncStructure</span><span class="token punctuation">(</span><span class="token function">GetTypesByNameSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="entity-attributes" tabindex="-1"><a class="header-anchor" href="#entity-attributes" aria-hidden="true">#</a> Entity Attributes</h2><p>Specify the table name for the entity. When specified, changes in the entity class name do not affect the corresponding database table. FreeSql tries to support multiple databases or schema naming, but specifying the table name as: other database.table name varies between databases; this will be explained in detail later.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;db2.tb_topic111&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Without specifying the entity table name, it defaults to the entity class name. For old table names in the database, when modifying the entity name, set this parameter to the previous value so CodeFirst can correctly modify the database table; otherwise, it will be treated as [creating a new table].</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span>OldName <span class="token operator">=</span> <span class="token string">&quot;Topic&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">Topic2</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>cccddd<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>Topic<span class="token punctuation">\`</span></span> <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> <span class="token identifier"><span class="token punctuation">\`</span>cccddd<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>Topic2<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To modify field types, change the Title type to varchar(128).</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DbType <span class="token operator">=</span> <span class="token string">&quot;varchar(128)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>cccddd<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>Topic2<span class="token punctuation">\`</span></span> <span class="token keyword">MODIFY</span> <span class="token identifier"><span class="token punctuation">\`</span>Title<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To specify the field name for a property, modifying the property name does not affect the corresponding database column.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;titl2&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If no field name is specified for a property, the field name defaults to the property name. When specifying the old column name in the database, if the entity property name is modified, set this parameter to the previous value so that CodeFirst can correctly modify the database field; otherwise, it will be treated as [adding a new field].</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>OldName <span class="token operator">=</span> <span class="token string">&quot;Title2&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>cccddd<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>Topic2<span class="token punctuation">\`</span></span> CHANGE <span class="token keyword">COLUMN</span> <span class="token identifier"><span class="token punctuation">\`</span>Title2<span class="token punctuation">\`</span></span> <span class="token identifier"><span class="token punctuation">\`</span>Title<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,37);function A(C,_){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("table",null,[r,n("tbody",null,[n("tr",null,[d,k,n("td",null,[s("X "),n("a",m,[s("Reference"),t(a)])]),n("td",null,[s("X "),n("a",h,[s("Reference"),t(a)])]),n("td",null,[s("X"),n("a",b,[s("Reference"),t(a)])]),y])])]),v,n("ul",null,[g,n("li",null,[f,s(" does not create the database for you; you need to create the database manually. "),n("strong",null,[s("If you are using "),w,s(", "),T,s(", or "),S,s(", and need to automatically create databases, refer to this code and copy it yourself: "),n("a",q,[s("FreeSqlExtension.cs"),t(a)])])])]),x])}const L=p(l,[["render",A],["__file","code-first.html.vue"]]);export{L as default};
