import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as l,c as u,a as n,b as s,d as p,w as i,e as a}from"./app-UBewaJPQ.js";const k={},r=a(`<h1 id="分表分库" tabindex="-1"><a class="header-anchor" href="#分表分库" aria-hidden="true">#</a> 分表分库</h1><h2 id="理论知识" tabindex="-1"><a class="header-anchor" href="#理论知识" aria-hidden="true">#</a> 理论知识</h2><p>分表 - 从表面意思上看呢，就是把一张表分成 N 多个小表，每一个小表都是完整的一张表。分表后数据都是存放在分表里，总表只是一个外壳，存取数据发生在一个一个的分表里面。分表后单表的并发能力提高了，磁盘 I/O 性能也提高了。并发能力为什么提高了呢，因为查寻一次所花的时间变短了，如果出现高并发的话，总表可以根据不同 的查询，将并发压力分到不同的小表里面。</p><p>分库 - 把原本存储于一个库的数据分块存储到多个库上，把原本存储于一个表的数据分块存储到多个表上。数据库中的数据量不一定是可控的，在未进行分表分库的情况下，随着时间和业务的发展，库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作，增删改查的开销也会越来越大；另外，一台服务器的资源（CPU、磁盘、内存、IO 等）是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。</p><h2 id="手工分表-astable" tabindex="-1"><a class="header-anchor" href="#手工分表-astable" aria-hidden="true">#</a> 手工分表 AsTable</h2><p>FreeSql 原生用法、FreeSql.Repository 仓储用法 都提供了 AsTable 方法对分表进行 CRUD 操作，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Log<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">AsTable</span><span class="token punctuation">(</span>oldname <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">oldname</span><span class="token punctuation">}</span></span><span class="token string">_201903&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对 Log_201903 表 CRUD</span>

repo<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Log</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跨库，但是在同一个数据库服务器下，也可以使用 AsTable(oldname =&gt; $&quot;db2.dbo.{oldname}&quot;)</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//跨表查询</span>
<span class="token class-name"><span class="token keyword">var</span></span> sql <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AsTable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> oldname<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;table_1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AsTable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> oldname<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;table_2&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToSql</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//select * from (SELECT a.&quot;Id&quot; as1 FROM &quot;table_1&quot; a) ftb</span>
<span class="token comment">//UNION ALL</span>
<span class="token comment">//select * from (SELECT a.&quot;Id&quot; as1 FROM &quot;table_2&quot; a) ftb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分表总结：</p><ul><li>分表、相同服务器跨库 可以使用 AsTable 进行 CRUD；</li><li>AsTable CodeFirst 会自动创建不存在的分表；</li><li>不可在分表分库的实体类型中使用《延时加载》；</li></ul><p>SqlServer 跨库事务 可以使用 TransactionScope，如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repoLog <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Log<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> repoComment <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Comment<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repoLog<span class="token punctuation">.</span><span class="token function">AsTable</span><span class="token punctuation">(</span>oldname <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token number">201903</span></span><span class="token punctuation">}</span></span><span class="token string">.dbo.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">oldname</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repoComment<span class="token punctuation">.</span><span class="token function">AsTable</span><span class="token punctuation">(</span>oldname <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token number">201903</span></span><span class="token punctuation">}</span></span><span class="token string">.dbo.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">oldname</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">TransactionScope</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TransactionScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    repoComment<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Comment</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repoLog<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Log</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ts<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分布式数据库 TCC/SAGA 方案请移步：https://github.com/2881099/FreeSql.Cloud</p><h2 id="自动分表-astable-beta" tabindex="-1"><a class="header-anchor" href="#自动分表-astable-beta" aria-hidden="true">#</a> 自动分表 AsTable (beta)</h2><p>【自动分表】不同于 CURD.AsTable 方法，目前第一期完成按【时间】自动分表（不支持分库）。</p><p>欢迎积极参与测试、反馈，请优先使用源代码进行测试，方便反馈定位问题，谢谢。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;as_table_log_{yyyyMM}&quot;</span><span class="token punctuation">,</span> AsTable <span class="token operator">=</span> <span class="token string">&quot;createtime=2022-1-1(1 month)&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">AsTableLog</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> msg <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> createtime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>从 2022-1-1 开始至当前时间，每月创建一个分表，按 createtime 字段分表</p></blockquote><blockquote><p>若最大日期大于当前时间，可手工扩容分表：</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> tableName <span class="token operator">=</span> fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span><span class="token function">GetTableByEntity</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AsTableLog</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>AsTableImpl
    <span class="token punctuation">.</span><span class="token function">GetTableNameByColumnValue</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;2023-7-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoExpand</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建数据库表</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>fsql<span class="token punctuation">.</span>DbFirst<span class="token punctuation">.</span><span class="token function">ExistsTable</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span><span class="token function">SyncStructure</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AsTableLog</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>示范</th><th>说明</th></tr></thead><tbody><tr><td>AsTable = &quot;createtime=2022-1-1(1 year)&quot;</td><td>一年一个分表</td></tr><tr><td>AsTable = &quot;createtime=2022-1-1(2 year)&quot;</td><td>两年一个分表</td></tr><tr><td>AsTable = &quot;createtime=2022-1-1(1 month)&quot;</td><td>一月一个分表</td></tr><tr><td>AsTable = &quot;createtime=2022-1-1(3 month)&quot;</td><td>三月一个分表</td></tr><tr><td>AsTable = &quot;createtime=2022-1-1(1 day)&quot;</td><td>一天一个分表</td></tr><tr><td>AsTable = &quot;createtime=2022-1-1(7 day)&quot;</td><td>七天一个分表</td></tr><tr><td>AsTable = &quot;createtime=2022-1-1(12 hour)&quot;</td><td>12小时一个分表</td></tr></tbody></table><p>第一个表12个月，后面的表按1个月：</p><blockquote><p>AsTable = &quot;createtime=2022-1-1(12,1 month)&quot;</p></blockquote><p>第一个表非时间命名：</p><blockquote><p>fsql.CodeFirst.GetTableByEntity(typeof(AsTableLog)).AsTableImpl.SetTableName(0, &quot;自定义表名&quot;)</p></blockquote><p>每个月1日10点分表：</p><blockquote><p>[Table(Name = &quot;as_table_log_{yyyyMMddHH}&quot;, AsTable = &quot;createtime=2022-1-1 10(1 month)&quot;)]</p></blockquote>`,28),d={href:"https://github.com/dotnetcore/FreeSql/discussions/1066",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="【分库】常规技巧" tabindex="-1"><a class="header-anchor" href="#【分库】常规技巧" aria-hidden="true">#</a> 【分库】常规技巧</h2><p>1、Sqlite 跨库</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Sqlite<span class="token punctuation">,</span> <span class="token string">@&quot;data source=document.db;attachs=db2.db,db3.db&quot;</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token function">Table</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;db2.Comment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;db3.Comment&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span> <span class="token range operator">..</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQLite 跨库操作是 FreeSql 独有的功能，连接串 attachs 参数值逗号分割。</p><p>2、SqlServer 跨库</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//相同数据库实例，跨库访问</span>
<span class="token punctuation">[</span><span class="token function">Table</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;db2.dbo.tablename&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同数据库实例，可使用 SQLServer linkserver 技术，具体请百度了解。</p><p>3、其他</p><p>几乎每种数据库都支持 dbo.table 的方式访问：</p><ul><li>MySql -&gt; dbname.tabname</li><li>PostgreSQL/SqlServer -&gt; dbname.schema.tbname</li></ul><p>可将其设置到 <code>[Table(Name = ...)]</code> 特性，或者使用 <code>.AsTable</code> 方法设置本次生效。</p><h2 id="【分库】使用-freesql-cloud" tabindex="-1"><a class="header-anchor" href="#【分库】使用-freesql-cloud" aria-hidden="true">#</a> 【分库】使用 FreeSql.Cloud</h2><p>为 FreeSql 提供跨数据库访问，分布式事务TCC、SAGA解决方案，支持 .NET Core 2.1+, .NET Framework 4.0+.</p><p>开源地址：https://github.com/2881099/FreeSql.Cloud</p><blockquote><p>dotnet add package FreeSql.Cloud</p></blockquote><p>or</p><blockquote><p>Install-Package FreeSql.Cloud</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DbEnum</span> <span class="token punctuation">{</span> db1<span class="token punctuation">,</span> db2 <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreeSqlCloud</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">FreeSqlCloud<span class="token punctuation">&lt;</span>DbEnum<span class="token punctuation">&gt;</span></span></span> <span class="token comment">//DbEnum 换成 string 就是多租户管理</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">FreeSqlCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">FreeSqlCloud</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> distributeKey<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>distributeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span>DistributeTrace <span class="token operator">=</span> log <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fsql<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Sqlite<span class="token punctuation">,</span> <span class="token string">@&quot;Data Source=db1.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Sqlite<span class="token punctuation">,</span> <span class="token string">@&quot;Data Source=db2.db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFreeSql<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>FreeSqlCloud 必须定义成单例模式</p></blockquote><blockquote><p>new FreeSqlCloud() 多连接管理</p></blockquote><blockquote><p>new FreeSqlCloud(&quot;myapp&quot;) 开启 TCC/SAGA 事务生效</p></blockquote><p>FreeSqlCloud 的访问方式和 IFreeSql 一样：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Insert</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Update</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、切换数据库（多线程安全）：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token function">Change</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//同一线程，或异步await 后续 fsql.Select/Insert/Update/Delete 操作是 db2</span>

fsql<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//单次有效</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span>fsql<span class="token punctuation">.</span><span class="token function">Change</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//todo..</span>
<span class="token punctuation">}</span>
<span class="token comment">//FreeSql.Cloud v1.6.8 一个范围内切换，之后再切换回去</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、自动定向数据库配置：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>EntitySteering <span class="token operator">=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>EntityType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span>DBKey <span class="token operator">=</span> DbEnum<span class="token punctuation">.</span>db2<span class="token punctuation">;</span>
    <span class="token comment">//查询 User 自动定向 db2</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、静态仓储对象</p><p>FreeSql.Repository/UnitOfWorkManager 对象创建时固定了 IFreeSql，因此无法跟随 FreeSqlCloud 切换数据库。</p><blockquote><p>注意：是同一个对象实例创建之后，无法跟随切换，创建新对象实例不受影响。</p></blockquote><p>租户分库场景 Repository/UnitOfWorkManager 创建之前，先调用 fsql.Change 切换好数据库。</p>`,31),b=a(`<p>4、动态创建对象（不推荐）</p><p>但是。。。仍然有一种特殊需求，Repository 在创建之后，仍然能跟随 fsql.Change 切换数据库。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCloudRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token function">Change</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db2<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>Orm<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>ConnectionString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//repo -&gt; db2</span>
fsql<span class="token punctuation">.</span><span class="token function">Change</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db1<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>Orm<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>ConnectionString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//repo -&gt; db1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种机制太不可控，所以只做了简单的扩展方法创建，并不推荐 Ioc 注入。</p>`,4);function v(g,q){const e=t("ExternalLinkIcon"),o=t("RouterLink");return l(),u("div",null,[r,n("p",null,[s("详细介绍："),n("a",d,[s("https://github.com/dotnetcore/FreeSql/discussions/1066"),p(e)])]),m,n("p",null,[p(o,{to:"/guide/unitofwork-manager.html#freesql-cloud-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-unitofworkmanager"},{default:i(()=>[s("《FreeSql.Cloud 如何使用 UnitOfWorkManager 实现 AOP 事务？》")]),_:1})]),b])}const y=c(k,[["render",v],["__file","sharding.html.vue"]]);export{y as default};
