import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as p,a as n,d as s,w as e,b as t,e as l}from"./app-CB6aGOSh.js";const d={},r=n("h1",{id:"select",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#select","aria-hidden":"true"},"#"),t(" Select")],-1),k=n("p",null,"FreeSql has invested heavily in querying data, offering features like fluent style, multi-table queries, expression functions, and strong support for navigation properties.",-1),h=n("thead",null,[n("tr",null,[n("th"),n("th"),n("th")])],-1),m=n("td",null,null,-1),b=n("td",null,null,-1),g=n("td",null,null,-1),v=l('<h2 id="expression-functions" tabindex="-1"><a class="header-anchor" href="#expression-functions" aria-hidden="true">#</a> Expression Functions</h2><table><thead><tr><th>Description</th><th>Lambda Expression</th><th>SQL</th></tr></thead><tbody><tr><td>in</td><td>Where(a =&gt; new [] { 1,2,3 }.Contains(a.Id))</td><td>[Id] in (1,2,3)</td></tr><tr><td>not in</td><td>Where(a =&gt; !new [] { 1,2,3 }.Contains(a.Id))</td><td>[Id] not in (1,2,3)</td></tr><tr><td>Multi-column in</td><td>Where(a =&gt; list.Any(b =&gt; b.Item1 == a.Id &amp;&amp; b.Item2 == a.ct1))</td><td>([Id]=1 and [ct1]=1) or ([Id]=2 and [ct1]=2)</td></tr><tr><td>like &#39;%xxx%&#39;</td><td>Where(a =&gt; a.Title.Contains(&quot;xxx&quot;))</td><td>[Title] like &#39;%xxx%&#39;</td></tr><tr><td>like &#39;xxx%&#39;</td><td>Where(a =&gt; a.Title.StartsWith(&quot;xxx&quot;))</td><td>[Title] like &#39;xxx%&#39;</td></tr><tr><td>like &#39;%xxx&#39;</td><td>Where(a =&gt; a.Title.EndsWith(&quot;xxx&quot;))</td><td>[Title] like &#39;%xxx&#39;</td></tr><tr><td>Date range</td><td>Where(a =&gt; a.Time.Between(time1, time2))</td><td>[Time] between @time1 and @time2</td></tr><tr><td>Exists</td><td>.Any()</td><td>select 1 from ...</td></tr><tr><td>Count</td><td>.Count()</td><td>select count(*) from ...</td></tr><tr><td>Sum</td><td>.Sum(a =&gt; a.Score)</td><td>select sum([Score]) from ...</td></tr><tr><td>Average</td><td>.Avg(a =&gt; a.Score)</td><td>select avg([Score]) from ...</td></tr><tr><td>Maximum</td><td>.Max(a =&gt; a.Score)</td><td>select max([Score]) from ...</td></tr><tr><td>Minimum</td><td>.Min(a =&gt; a.Score)</td><td>select min([Score]) from ...</td></tr></tbody></table>',2),f=l(`<h2 id="sqlserver-withlock-withindex" tabindex="-1"><a class="header-anchor" href="#sqlserver-withlock-withindex" aria-hidden="true">#</a> SqlServer WithLock/WithIndex</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock <span class="token operator">|</span> SqlServerLock<span class="token punctuation">.</span>NoWait<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock, NoWait)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(index=idx_01, NoLock)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multi-table:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">InnerJoin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>x <span class="token operator">==</span> b<span class="token punctuation">.</span>xx<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;idx_02&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ..</span>
<span class="token comment">//FROM [Region] a With(index=idx_01, NoLock) </span>
<span class="token comment">//INNER JOIN [T2] b With(index=idx_02) ON a.[x] = b.[xx]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Global NoLock Setting:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//Applies to all entity classes</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//【Specific】entity classes</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Region</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dynamic-filtering-wheredynamicfilter" tabindex="-1"><a class="header-anchor" href="#dynamic-filtering-wheredynamicfilter" aria-hidden="true">#</a> Dynamic Filtering WhereDynamicFilter</h2>`,7),_={href:"https://www.cnblogs.com/FreeSql/p/16485310.html",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"The ISelect.WhereDynamicFilter method implements dynamic filtering conditions (interacting with the frontend), supporting the following operators:",-1),q=n("li",null,"Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith: Contains/Does not contain, like '%xx%', or like 'xx%', or like '%xx'",-1),x=n("li",null,"Equal/NotEqual: Equals/Not equals",-1),S=n("li",null,"GreaterThan/GreaterThanOrEqual: Greater than/Greater than or equal",-1),L=n("li",null,"LessThan/LessThanOrEqual: Less than/Less than or equal",-1),T=n("li",null,"Range: Range query",-1),I=n("li",null,"DateRange: Date range, with special handling value[1] + 1",-1),w=n("li",null,"Any/NotAny: Whether it matches any item in value (essentially SQL IN)",-1),W={href:"https://github.com/dotnetcore/FreeSql/discussions/1550",target:"_blank",rel:"noopener noreferrer"},N=l(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DynamicFilterInfo</span> dyfilter <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFilterInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">@&quot;
{
  &quot;&quot;Logic&quot;&quot;: &quot;&quot;And&quot;&quot;,
  &quot;&quot;Filters&quot;&quot;:
  [
    { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 1 },
    {
      &quot;&quot;Logic&quot;&quot;: &quot;&quot;Or&quot;&quot;,
      &quot;&quot;Filters&quot;&quot;:
      [
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 2 },
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 3 }
      ]
    }
  ]
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereDynamicFilter</span><span class="token punctuation">(</span>dyfilter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//WHERE id = 1 AND (id = 2 OR id = 3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Dynamic Table Names: ISelect.AsTable((t, old) =&gt; $&quot;{old}_201903&quot;)</p></blockquote><blockquote><p>Dynamic Sorting: ISelect.OrderByPropertyName(&quot;Parent.Code&quot;)</p></blockquote><blockquote><p>Dynamic Returns: ISelect.ToDataTableByPropertyName(new string[] { &quot;Parent.Code&quot;, &quot;Id&quot; })</p></blockquote><blockquote><p>Dynamic Eager Loading: ISelect.IncludeByPropertyName(&quot;Parent.Parent&quot;).IncludeByPropertyName(&quot;Parent.Childs&quot;)</p></blockquote><h2 id="clone-queries-iselect" tabindex="-1"><a class="header-anchor" href="#clone-queries-iselect" aria-hidden="true">#</a> Clone Queries ISelect</h2><p>For your information: C# 7.0 supports local functions, which allows defining temporary methods within a method. This feature is highly recommended as it is very effective in many scenarios.</p><p>When a method is defined inside another method, it is called: local function/nested method.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">ISelect<span class="token punctuation">&lt;</span>AdmRoute<span class="token punctuation">&gt;</span></span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AdmRoute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Parent<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span>Parent_Id<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> Parent_Id<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ParentId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span>mn_Roles_Id<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> mn_Roles_Id<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> select1 <span class="token operator">=</span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> select2 <span class="token operator">=</span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    select1<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// At this point, select2 will not have the a.Status == 0 condition</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2>`,10),E=n("thead",null,[n("tr",null,[n("th",null,"Method"),n("th",null,"Return Type"),n("th",null,"Parameters"),n("th",null,"Description"),n("th")])],-1),C=n("tr",null,[n("td",null,"ToSql"),n("td",null,"string"),n("td"),n("td",null,"Returns the SQL statement to be executed"),n("td")],-1),R=n("tr",null,[n("td",null,"ToList"),n("td",null,"List<T1>"),n("td"),n("td",null,"Executes SQL query and returns records of all fields of the T1 entity; if navigation properties exist, they are also queried and returned. If no records exist, returns a list with Count 0."),n("td")],-1),D=n("tr",null,[n("td",null,"ToList<T>"),n("td",null,"List<T>"),n("td",null,"Lambda"),n("td",null,"Executes SQL query and returns records of specified fields; if no records exist, returns a list with Count 0."),n("td")],-1),F=n("tr",null,[n("td",null,"ToList<T>"),n("td",null,"List<T>"),n("td",null,"string field"),n("td",null,"Executes SQL query and returns records of the field specified, and can be received as a tuple or basic types (int, string, long); if no records exist, returns a list with Count 0."),n("td")],-1),O=n("tr",null,[n("td",null,"ToOne"),n("td",null,"T1"),n("td"),n("td",null,"Executes SQL query and returns the first record of all fields of the T1 entity; if no record exists, returns null."),n("td")],-1),Q=n("tr",null,[n("td",null,"ToAggregate<T>"),n("td",null,"List<T>"),n("td",null,"Lambda"),n("td",null,"Executes SQL query and returns aggregate results of specified fields (suitable for scenarios where GroupBy is not required)."),n("td")],-1),A=n("tr",null,[n("td",null,"Any"),n("td",null,"bool"),n("td"),n("td",null,"Executes SQL query to check if there are any records."),n("td")],-1),P=n("tr",null,[n("td",null,"Sum"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"Computes the sum of a specified column."),n("td")],-1),B=n("tr",null,[n("td",null,"Min"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"Computes the minimum value of a specified column."),n("td")],-1),M=n("tr",null,[n("td",null,"Max"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"Computes the maximum"),n("td")],-1),G=n("tr",null,[n("td",null,"Max"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"Specifies the maximum value of a column"),n("td")],-1),J=n("tr",null,[n("td",null,"Avg"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"Specifies the average value of a column"),n("td")],-1),j=n("tr",null,[n("td",null,"【Pagination】"),n("td"),n("td"),n("td"),n("td")],-1),V=n("tr",null,[n("td",null,"Count"),n("td",null,"long"),n("td"),n("td",null,"The number of records in the query"),n("td")],-1),z=n("tr",null,[n("td",null,"Count"),n("td",null,"<this>"),n("td",null,"out long"),n("td",null,"The number of records in the query, returned as an out parameter"),n("td")],-1),U=n("tr",null,[n("td",null,"Skip"),n("td",null,"<this>"),n("td",null,"int offset"),n("td",null,"Offset the number of rows in the query"),n("td")],-1),H=n("tr",null,[n("td",null,"Offset"),n("td",null,"<this>"),n("td",null,"int offset"),n("td",null,"Offset the number of rows in the query"),n("td")],-1),$=n("tr",null,[n("td",null,"Limit"),n("td",null,"<this>"),n("td",null,"int limit"),n("td",null,"Specify the number of data records to query"),n("td")],-1),K=n("tr",null,[n("td",null,"Take"),n("td",null,"<this>"),n("td",null,"int limit"),n("td",null,"Specify the number of data records to query"),n("td")],-1),X=n("tr",null,[n("td",null,"Page"),n("td",null,"<this>"),n("td",null,"int pageIndex, int pageSize"),n("td",null,"Pagination"),n("td")],-1),Y=n("tr",null,[n("td",null,"【Condition】"),n("td"),n("td"),n("td"),n("td")],-1),Z=n("tr",null,[n("td",null,"Where"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Supports multi-table query expressions; using multiple times is equivalent to AND"),n("td")],-1),nn=n("tr",null,[n("td",null,"WhereIf"),n("td",null,"<this>"),n("td",null,"bool, Lambda"),n("td",null,"Supports multi-table query expressions"),n("td")],-1),tn=n("td",null,"Where",-1),sn=n("td",null,"<this>",-1),an=n("td",null,"string, parms",-1),en=n("td",null,null,-1),ln=n("tr",null,[n("td",null,"WhereIf"),n("td",null,"<this>"),n("td",null,"bool, string, parms"),n("td",null,'Native SQL syntax condition, WhereIf(true, "id = @id", new { id = 1 }'),n("td")],-1),on=n("tr",null,[n("td",null,"WhereCascade"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Add conditions to each table in multi-table queries"),n("td")],-1),un=n("tr",null,[n("td",null,"WhereDynamicFilter"),n("td",null,"<this>"),n("td",null,"DynamicFilterInfo"),n("td",null,"Dynamic filtering conditions (interaction with the frontend)"),n("td")],-1),cn=n("tr",null,[n("td",null,"【GroupBy】"),n("td"),n("td"),n("td"),n("td")],-1),pn=n("tr",null,[n("td",null,"GroupBy"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Group by selected columns, GroupBy(a => a.Name)"),n("td",null,"GroupBy(a => new{a.Name,a.Time})")],-1),dn=n("tr",null,[n("td",null,"GroupBy"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'Group by native SQL syntax, GroupBy("concat(name, @cc)", new { cc = 1 })'),n("td")],-1),rn=n("tr",null,[n("td",null,"Having"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'Filter aggregation conditions by native SQL syntax, Having("count(name) = @cc", new { cc = 1 })'),n("td")],-1),kn=n("tr",null,[n("td",null,"Disdinct"),n("td",null,"<this>"),n("td"),n("td",null,".Distinct().ToList(x => x.GroupName) is for a specific field"),n("td")],-1),hn=n("tr",null,[n("td",null,"【Sort】"),n("td"),n("td"),n("td"),n("td")],-1),mn=n("tr",null,[n("td",null,"OrderBy"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Sort by column, OrderBy(a => a.Time), can be used multiple times"),n("td")],-1),bn=n("tr",null,[n("td",null,"OrderByDescending"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Sort by column in descending order, OrderByDescending(a => a.Time)"),n("td")],-1),gn=n("tr",null,[n("td",null,"OrderBy"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'Sort by native SQL syntax, OrderBy("count(name) + @cc", new { cc = 1 })'),n("td")],-1),vn=n("tr",null,[n("td",null,"OrderByPropertyName"),n("td",null,"string, bool"),n("td",null,"Sort by property name string (supports navigation properties)"),n("td"),n("td")],-1),fn=n("tr",null,[n("td",null,"【Multi-tables】"),n("td"),n("td"),n("td"),n("td")],-1),_n=n("tr",null,[n("td",null,"LeftJoin"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Left join query, supports navigation properties or specifying associated entity types"),n("td")],-1),yn=n("tr",null,[n("td",null,"InnerJoin"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Inner join query, supports navigation properties or specifying associated entity types"),n("td")],-1),qn=n("tr",null,[n("td",null,"RightJoin"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Right join query, supports navigation properties or specifying associated entity types"),n("td")],-1),xn=n("tr",null,[n("td",null,"LeftJoin"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'Left join query using native SQL syntax, LeftJoin("type b on b.id = a.id and b.clicks > @clicks", new { clicks = 1 })'),n("td")],-1),Sn=n("tr",null,[n("td",null,"InnerJoin"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'Inner join query using native SQL syntax, InnerJoin("type b on b.id = a.id and b.clicks > @clicks", new { clicks = 1 })'),n("td")],-1),Ln=n("tr",null,[n("td",null,"RightJoin"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'Right join query using native SQL syntax, RightJoin("type b on b.id = a.id and b.clicks > @clicks", new { clicks = 1 })'),n("td")],-1),Tn=n("tr",null,[n("td",null,"From"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"Multi-table queries, very convenient for more than 3 tables; currently supports up to 10 tables"),n("td")],-1),In=n("tr",null,[n("td",null,"FromQuery"),n("td",null,"ISelect<T1, T2>"),n("td",null,"ISelect<T2>"),n("td",null,"Single table into double table query"),n("td")],-1),wn=n("tr",null,[n("td",null,"WithTempQuery"),n("td",null,"ISelect<T1>"),n("td",null,"Lambda"),n("td",null,"Nest single or multiple table queries into a single table query"),n("td")],-1),Wn=n("tr",null,[n("td",null,"WithMemory"),n("td",null,"ISelect<T1>"),n("td",null,"List<T1>"),n("td",null,"Query using in-memory data"),n("td")],-1),Nn=n("tr",null,[n("td",null,"UnionAll"),n("td",null,"ISelect<T1>"),n("td",null,"ISelect<T1>[]"),n("td",null,"Union query"),n("td")],-1),En=n("tr",null,[n("td",null,"【Other】"),n("td"),n("td"),n("td"),n("td")],-1),Cn=n("tr",null,[n("td",null,"As"),n("td",null,"<this>"),n("td",null,'string alias = "a"'),n("td",null,"Specify alias"),n("td")],-1),Rn=n("tr",null,[n("td",null,"Master"),n("td",null,"<this>"),n("td"),n("td",null,"Specify querying from the master database (default is querying from the slave database)"),n("td")],-1),Dn=n("tr",null,[n("td",null,"CommandTimeout"),n("td",null,"<this>"),n("td",null,"int"),n("td",null,"Command timeout setting (seconds)"),n("td")],-1),Fn=n("tr",null,[n("td",null,"WithTransaction"),n("td",null,"<this>"),n("td",null,"DbTransaction"),n("td",null,"Set transaction object"),n("td")],-1),On=n("tr",null,[n("td",null,"WithConnection"),n("td",null,"<this>"),n("td",null,"DbConnection"),n("td",null,"Set connection object"),n("td")],-1),Qn=n("tr",null,[n("td",null,"WithLock"),n("td",null,"<this>"),n("td",null,"Enum"),n("td",null,"Special settings like SqlServer NoLock"),n("td")],-1),An=n("tr",null,[n("td",null,"ForUpdate"),n("td",null,"<this>"),n("td",null,"bool"),n("td",null,"Exclusive update lock, adapted for different databases, detailed explanation in comments"),n("td")],-1),Pn=n("tr",null,[n("td",null,"AsQueryable"),n("td",null,"IQueryable"),n("td"),n("td",null,"Convert ISelect to IQueryable, mainly used for extension, e.g., abp IRepository GetAll() interface method needs to return IQueryable object. Note: IQueryable methods are more likely to cause pollution, so avoid this conversion as much as possible"),n("td")],-1),Bn=n("tr",null,[n("td",null,"ToTreeList()"),n("td",null,"List<TEntity>"),n("td",null,"None"),n("td",null,"Return hierarchical data in the form of a TreeList"),n("td")],-1),Mn=n("tr",null,[n("td",null,"AsTreeCte()"),n("td",null,"ISelect"),n("td",null,"(up, pathSelector, level)"),n("td",null,"Recursive query of hierarchical tables"),n("td")],-1);function Gn(Jn,jn){const a=i("RouterLink"),o=i("ExternalLinkIcon");return c(),p("div",null,[r,k,n("table",null,[h,n("tbody",null,[n("tr",null,[n("td",null,[s(a,{to:"/en/guide/paging.html"},{default:e(()=>[t("《Paging Queries》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/repository.html"},{default:e(()=>[t("《Repository Layer》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/read-write-splitting.html"},{default:e(()=>[t("《Read-Write Separation》")]),_:1})])]),n("tr",null,[n("td",null,[s(a,{to:"/en/guide/select-single-table.html"},{default:e(()=>[t("《Single Table Queries》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/filters.html"},{default:e(()=>[t("《Filters》")]),_:1})]),m]),n("tr",null,[n("td",null,[s(a,{to:"/en/guide/select-multi-table.html"},{default:e(()=>[t("《Multi-Table Queries》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/select-lazy-loading.html"},{default:e(()=>[t("《Lazy Loading》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/performance.html"},{default:e(()=>[t("《Performance》")]),_:1})])]),n("tr",null,[n("td",null,[s(a,{to:"/en/guide/withtempquery.html"},{default:e(()=>[t("《Nested Queries》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/select-include.html"},{default:e(()=>[t("《Eager Loading》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/sharding.html"},{default:e(()=>[t("《Sharding》")]),_:1})])]),n("tr",null,[n("td",null,[s(a,{to:"/en/guide/select-group-by.html"},{default:e(()=>[t("《Group By Aggregation Queries》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/expression-function.html"},{default:e(()=>[t("《Expression Functions》")]),_:1})]),n("td",null,[s(a,{to:"/en/guide/multi-tenancy.html"},{default:e(()=>[t("《Multi-Tenancy》")]),_:1})])]),n("tr",null,[n("td",null,[s(a,{to:"/en/guide/select-return-data.html"},{default:e(()=>[t("《Return Data》")]),_:1})]),b,g])])]),v,n("p",null,[t("For more details, see "),s(a,{to:"/en/guide/expression-function.html"},{default:e(()=>[t("《Expression Functions》")]),_:1})]),f,n("p",null,[n("a",_,[t("《Efficient Understanding of FreeSql WhereDynamicFilter and Insights into Its Design》"),s(o)])]),y,n("ul",null,[q,x,S,L,T,I,w,n("li",null,[t("Custom: "),n("a",W,[t("Custom parsing"),s(o)])])]),N,n("table",null,[E,n("tbody",null,[C,R,D,F,O,Q,A,P,B,M,G,J,j,V,z,U,H,$,K,X,Y,Z,nn,n("tr",null,[tn,sn,an,n("td",null,[t('Native SQL syntax condition, Where("id = @id", new { id = 1 } ,'),s(a,{to:"/en/guide/ado.html#parameter"},{default:e(()=>[t("Note the prefix @, according to the specific database")]),_:1}),t(" not explained elsewhere. Same applies)")]),en]),ln,on,un,cn,pn,dn,rn,kn,hn,mn,bn,gn,vn,fn,_n,yn,qn,xn,Sn,Ln,Tn,In,wn,Wn,Nn,En,Cn,Rn,Dn,Fn,On,Qn,An,Pn,Bn,Mn])])])}const Un=u(d,[["render",Gn],["__file","select.html.vue"]]);export{Un as default};
