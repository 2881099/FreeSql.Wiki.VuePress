import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as t,e as a}from"./app-BXdwL82y.js";const e={},p=a(`<h1 id="type-mapping" tabindex="-1"><a class="header-anchor" href="#type-mapping" aria-hidden="true">#</a> Type Mapping</h1><h2 id="type-mapping-default" tabindex="-1"><a class="header-anchor" href="#type-mapping-default" aria-hidden="true">#</a> Type Mapping (Default)</h2><p>Note: Due to formatting issues, not all supported databases are displayed.</p><table><thead><tr><th>CSharp</th><th>MySql</th><th>SqlServer</th><th>PostgreSQL</th><th>Oracle</th><th>Sqlite</th><th>Dameng</th></tr></thead><tbody><tr><td>bool | bool?</td><td>bit(1)</td><td>bit</td><td>bool</td><td>number(1)</td><td>boolean</td><td>number(1)</td></tr><tr><td>sbyte | sbyte?</td><td>tinyint(3)</td><td>smallint</td><td>int2</td><td>number(4)</td><td>smallint</td><td>number(4)</td></tr><tr><td>short | short?</td><td>smallint(6)</td><td>smallint</td><td>int2</td><td>number(6)</td><td>smallint</td><td>number(6)</td></tr><tr><td>int | int?</td><td>int(11)</td><td>int</td><td>int4</td><td>number(11)</td><td>integer</td><td>number(11)</td></tr><tr><td>long | long?</td><td>bigint(20)</td><td>bigint</td><td>int8</td><td>number(21)</td><td>integer</td><td>number(21)</td></tr><tr><td>byte | byte?</td><td>tinyint(3) unsigned</td><td>tinyint</td><td>int2</td><td>number(3)</td><td>int2</td><td>number(3)</td></tr><tr><td>ushort | ushort?</td><td>smallint(5) unsigned</td><td>int</td><td>int4</td><td>number(5)</td><td>unsigned</td><td>number(5)</td></tr><tr><td>uint | uint?</td><td>int(10) unsigned</td><td>bigint</td><td>int8</td><td>number(10)</td><td>decimal(10,0)</td><td>number(10)</td></tr><tr><td>ulong | ulong?</td><td>bigint(20) unsigned</td><td>decimal(20,0)</td><td>numeric(20,0)</td><td>number(20)</td><td>decimal(21,0)</td><td>number(20)</td></tr><tr><td>double | double?</td><td>double</td><td>float</td><td>float8</td><td>float(126)</td><td>double</td><td>double</td></tr><tr><td>float | float?</td><td>float</td><td>real</td><td>float4</td><td>float(63)</td><td>float</td><td>real</td></tr><tr><td>decimal | decimal?</td><td>decimal(10,2)</td><td>decimal(10,2)</td><td>numeric(10,2)</td><td>number(10,2)</td><td>decimal(10,2)</td><td>number(10,2)</td></tr><tr><td>Guid | Guid?</td><td>char(36)</td><td>uniqueidentifier</td><td>uuid</td><td>char(36 CHAR)</td><td>character(36)</td><td>char(36)</td></tr><tr><td>TimeSpan | TimeSpan?</td><td>time</td><td>time</td><td>time</td><td>interval day(2) to second(6)</td><td>bigint</td><td>-</td></tr><tr><td>DateTime | DateTime?</td><td>datetime</td><td>datetime</td><td>timestamp</td><td>timestamp(6)</td><td>datetime</td><td>timestamp(6)</td></tr><tr><td>DateTimeOffset | DateTimeOffset?</td><td>-</td><td>datetimeoffset</td><td>-</td><td>timestamp(6) with local time zone</td><td>-</td><td>timestamp(6)</td></tr><tr><td>Enum | Enum?</td><td>enum</td><td>int</td><td>int4</td><td>number(16)</td><td>mediumint</td><td>number(16)</td></tr><tr><td>FlagsEnum | FlagsEnum?</td><td>set</td><td>bigint</td><td>int8</td><td>number(32)</td><td>bigint</td><td>number(32)</td></tr><tr><td>byte[]</td><td>varbinary(255)</td><td>varbinary(255)</td><td>bytea</td><td>blob</td><td>blob</td><td>blob</td></tr><tr><td>string</td><td>varchar(255)</td><td>nvarchar(255)</td><td>varchar(255)</td><td>nvarchar2(255)</td><td>nvarchar(255)</td><td>nvarchar2(255)</td></tr></tbody></table><blockquote><p>For string specifying length [Column(DbType = &quot;varchar(max)&quot;)] or [MaxLength(-1)] or [Column(StringLength = -1)], when length is -1, the mapping is as follows:</p></blockquote><table><thead><tr><th>MySql</th><th>PostgreSQL</th><th>SqlServer</th><th>Oracle</th><th>Sqlite</th><th>Firebird</th><th>DuckDB</th><th>MsAccess</th><th>Dameng</th><th>Kingbase</th></tr></thead><tbody><tr><td>text</td><td>text</td><td>varchar(max)</td><td>nclob</td><td>text</td><td>blob sub_type 1</td><td>text</td><td>longtext</td><td>text</td><td>text</td></tr></tbody></table><blockquote><p>Note: MySql [MaxLength(-2)] or [Column(StringLength = -2)] maps to longtext</p></blockquote><blockquote><p>For decimal specifying length [Column(Precision = 10, Scale = 2)]</p></blockquote><h2 id="maptype" tabindex="-1"><a class="header-anchor" href="#maptype" aria-hidden="true">#</a> MapType</h2><p>Using MapType Enum -&gt; string/int etc.:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">PeopleType</span> t1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">PeopleType</span> t2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">BigInteger</span> t3 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PeopleType</span> <span class="token punctuation">{</span> TaiWan<span class="token punctuation">,</span> abc<span class="token punctuation">,</span> HongKong <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> Json</h2><blockquote><p>dotnet add package FreeSql.Extensions.JsonMap</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token function">UseJsonMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Open</span>

<span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonMap</span><span class="token punctuation">,</span> <span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DbType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TableOptions</span> Options <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">TableOptions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Value1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Value2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Options<span class="token punctuation">.</span>Value1 <span class="token operator">==</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>Options<span class="token punctuation">.</span>Value2 <span class="token operator">==</span> <span class="token string">&quot;xx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//WHERE json_extract(a.&quot;Options&quot;,&#39;$.Value1&#39;) = 100 AND json_extract(a.&quot;Options&quot;,&#39;$.Value2&#39;) = &#39;xx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typehandlers-custom" tabindex="-1"><a class="header-anchor" href="#typehandlers-custom" aria-hidden="true">#</a> TypeHandlers (Custom)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>FreeSql<span class="token punctuation">.</span>Internal<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>TypeHandlers<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">JsonClass</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">String_JsonClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> StringLength <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">JsonClass</span> json <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">JsonClass</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> a <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> b <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">String_JsonClass</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TypeHandler<span class="token punctuation">&lt;</span>JsonClass<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name">JsonClass</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">JsonClass</span> <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>JsonClass<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Class1</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Custom DateTimeOffset</span>
    <span class="token punctuation">[</span><span class="token function">Column</span><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> DbType <span class="token operator">=</span> <span class="token string">&quot;datetime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTimeOffset</span> Join <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DateTimeOffsetTypeHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TypeHandler<span class="token punctuation">&lt;</span>DateTimeOffset<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">DateTimeOffset</span> <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DateTimeOffset<span class="token punctuation">.</span>TryParse<span class="token class-name"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> dts<span class="token punctuation">)</span> <span class="token punctuation">?</span></span> dts <span class="token punctuation">:</span> DateTimeOffset<span class="token punctuation">.</span>MinValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-mapping-special" tabindex="-1"><a class="header-anchor" href="#type-mapping-special" aria-hidden="true">#</a> Type Mapping (Special)</h2><p>FreeSql.Provider.MySql/MySqlConnector：</p><table><thead><tr><th>CSharp</th><th>MySql</th></tr></thead><tbody><tr><td>MygisPoint</td><td>point</td></tr><tr><td>MygisLineString</td><td>linestring</td></tr><tr><td>MygisPolygon</td><td>polygon</td></tr><tr><td>MygisMultiPoint</td><td>multipoint</td></tr><tr><td>MygisMultiLineString</td><td>multilinestring</td></tr><tr><td>MygisMultiPolygon</td><td>multipolygon</td></tr></tbody></table><p>If <code>int</code>, <code>byte</code> types specify <code>DbType=&quot;tinyint(1)&quot;</code>, please note that <code>tinyint(1)</code> is by default mapped to <code>bool</code> in ado.net. You can specify <code>TreatTinyAsBoolean=false</code> in the connection string to map <code>tinyint(1)</code> to <code>SByte</code> instead of <code>bool</code>.</p><p>FreeSql.Provider.PostgreSQL：</p><table><thead><tr><th>CSharp</th><th>PostgreSQL</th></tr></thead><tbody><tr><td>BitArray</td><td>varbit(64)</td></tr><tr><td>NpgsqlPoint | NpgsqlPoint?</td><td>point</td></tr><tr><td>NpgsqlLine | NpgsqlLine?</td><td>line</td></tr><tr><td>NpgsqlLSeg | NpgsqlLSeg?</td><td>lseg</td></tr><tr><td>NpgsqlBox | NpgsqlBox?</td><td>box</td></tr><tr><td>NpgsqlPath | NpgsqlPath?</td><td>path</td></tr><tr><td>NpgsqlPolygon | NpgsqlPolygon?</td><td>polygon</td></tr><tr><td>NpgsqlCircle | NpgsqlCircle?</td><td>circle</td></tr><tr><td>(IPAddress Address, int Subnet) | (IPAddress Address, int Subnet)?</td><td></td></tr></tbody></table><table><thead><tr><th>csharp</th><th>PostgreSQL</th></tr></thead><tbody><tr><td>BitArray</td><td>varbit(64)</td></tr><tr><td>NpgsqlPoint | NpgsqlPoint?</td><td>point</td></tr><tr><td>NpgsqlLine | NpgsqlLine?</td><td>line</td></tr><tr><td>NpgsqlLSeg | NpgsqlLSeg?</td><td>lseg</td></tr><tr><td>NpgsqlBox | NpgsqlBox?</td><td>box</td></tr><tr><td>NpgsqlPath | NpgsqlPath?</td><td>path</td></tr><tr><td>NpgsqlPolygon | NpgsqlPolygon?</td><td>polygon</td></tr><tr><td>NpgsqlCircle | NpgsqlCircle?</td><td>circle</td></tr><tr><td>(IPAddress Address, int Subnet) | (IPAddress Address, int Subnet)?</td><td>cidr</td></tr><tr><td>IPAddress</td><td>inet</td></tr><tr><td>PhysicalAddress</td><td>macaddr</td></tr><tr><td>NpgsqlRange&lt;int&gt; | NpgsqlRange&lt;int&gt;?</td><td>int4range</td></tr><tr><td>NpgsqlRange&lt;long&gt; | NpgsqlRange&lt;long&gt;?</td><td>int8range</td></tr><tr><td>NpgsqlRange&lt;decimal&gt; | NpgsqlRange&lt;decimal&gt;?</td><td>numrange</td></tr><tr><td>NpgsqlRange&lt;DateTime&gt; | NpgsqlRange&lt;DateTime&gt;?</td><td>tsrange</td></tr><tr><td>PostgisPoint</td><td>geometry</td></tr><tr><td>PostgisLineString</td><td>geometry</td></tr><tr><td>PostgisPolygon</td><td>geometry</td></tr><tr><td>PostgisMultiPoint</td><td>geometry</td></tr><tr><td>PostgisMultiLineString</td><td>geometry</td></tr><tr><td>PostgisMultiPolygon</td><td>geometry</td></tr><tr><td>PostgisGeometry</td><td>geometry</td></tr><tr><td>PostgisGeometryCollection</td><td>geometry</td></tr><tr><td>Dictionary&lt;string, string&gt;</td><td>hstore</td></tr><tr><td>JToken</td><td>jsonb</td></tr><tr><td>JObject</td><td>jsonb</td></tr><tr><td>JArray</td><td>jsonb</td></tr><tr><td>Array</td><td>All the above types are supported, including default types</td></tr></tbody></table><h2 id="rewrite-re-read" tabindex="-1"><a class="header-anchor" href="#rewrite-re-read" aria-hidden="true">#</a> Rewrite/Re-read</h2><p>Rewrite SQL on write and rewrite SQL on read, suitable for read/write scenarios with geography types.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DbType <span class="token operator">=</span> <span class="token string">&quot;geography&quot;</span><span class="token punctuation">,</span> 
    RewriteSql <span class="token operator">=</span> <span class="token string">&quot;geography::STGeomFromText({0}, 4236)&quot;</span><span class="token punctuation">,</span> 
    RereadSql <span class="token operator">=</span> <span class="token string">&quot;{0}.STAsText()&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> geo <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token comment">// Insert: INSERT INTO [ts_geocrud01]([id], [geo]) VALUES(@id_0, geography::STGeomFromText(@geo_0, 4236))</span>

<span class="token comment">// Query: SELECT TOP 1 a.[id], a.[geo].STAsText() </span>
<span class="token comment">// FROM [ts_geocrud01] a </span>
<span class="token comment">// WHERE (a.[id] = &#39;c7227d5e-0bcf-4b71-8f0f-d69a552fe84e&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function c(l,d){return s(),t("div",null,o)}const u=n(e,[["render",c],["__file","type-mapping.html.vue"]]);export{u as default};
