import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as r,c as k,d as t,w as a,a as n,b as s,e as p}from"./app-Yn51kuhr.js";const m={},v=p('<p><code>FreeSql.Repository</code> 作为扩展，实现了通用仓储层功能。与其他规范标准一样，仓储层也有相应的规范定义。FreeSql.Repository 参考 abp vnext 接口，定义和实现基础的仓储层（CURD），应该算比较通用的方法吧。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2><ul><li>Select/Attach 快照对象，Update 只更新变化的字段；</li><li>Insert 插入数据，适配各数据库优化执行 ExecuteAffrows/ExecuteIdentity/ExecuteInserted；</li><li>InsertOrUpdate 插入或更新；</li><li>SaveMany 方法快速保存导航对象（一对多、多对多）；</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2>',4),h=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s(" dotnet "),n("span",{class:"token function"},"add"),s(` package FreeSql.Repository
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`Install-Package FreeSql.Repository
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),b=p(`<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token class-name">IFreeSql</span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSql<span class="token punctuation">.</span>FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>DataType<span class="token punctuation">.</span>Sqlite<span class="token punctuation">,</span> connectionString<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseAutoSyncStructure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//自动迁移实体的结构到数据库</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//请务必定义成 Singleton 单例模式</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Song</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><p>方法 1、IFreeSql 的扩展方法；</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> curd <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：Repository 对象多线程不安全,因此不应在多个线程上同时对其执行工作。</p></blockquote><ul><li>不支持从不同的线程同时使用同一仓储实例</li></ul><p>方法 2、继承实现；</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SongRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">SongRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>fsql<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">//在这里增加 CURD 以外的方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法 3、依赖注入；</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFreeSql<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddFreeRepository</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//在控制器使用</span>
<span class="token keyword">public</span> <span class="token function">SongsController</span><span class="token punctuation">(</span><span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> songRepository<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>依赖注入的方式可实现全局【过滤与验证】的设定，方便租户功能的设计；</p></blockquote>`,12),y=p(`<h2 id="状态管理" tabindex="-1"><a class="header-anchor" href="#状态管理" aria-hidden="true">#</a> 状态管理</h2><p>只更新变化的属性：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此时快照 item</span>
item<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;newtitle&quot;</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对比快照时的变化</span>
<span class="token comment">//UPDATE \`tb_topic\` SET \`Title\` = ?p_0</span>
<span class="token comment">//WHERE (\`Id\` = 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是觉得先查询再更新，啰嗦？</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Topic</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时快照 item</span>
item<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;newtitle&quot;</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对比快照时的变化</span>
<span class="token comment">//UPDATE \`tb_topic\` SET \`Title\` = ?p_0</span>
<span class="token comment">//WHERE (\`Id\` = 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>repo.CompareState(item) 可获取 item 的状态变化信息</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 比较实体，计算出值发生变化的属性，以及属性变化的前后值</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newdata<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>最新的实体对象，它将与附加实体的状态对比<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>key: 属性名, value: [旧值, 新值]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">CompareState</span><span class="token punctuation">(</span><span class="token class-name">TEntity</span> newdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤与验证" tabindex="-1"><a class="header-anchor" href="#过滤与验证" aria-hidden="true">#</a> 过滤与验证</h2><p>假设我们有 User(用户)、Topic(主题)两个实体，在领域类中定义了两个仓储：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userRepository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetGuidRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> topicRepository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetGuidRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在开发过程中，总是担心 topicRepository 的数据安全问题，即有可能查询或操作到其他用户的主题。因此我们在 v0.0.7 版本进行了改进，增加了 filter lambda 表达式参数。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userRepository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetGuidRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> topicRepository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetGuidRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>UserId <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在查询/修改/删除时附加此条件，从而达到不会修改其他用户的数据；</li><li>在添加时，使用表达式验证数据的合法性，若不合法则抛出异常；</li></ul><h2 id="分表与分库" tabindex="-1"><a class="header-anchor" href="#分表与分库" aria-hidden="true">#</a> 分表与分库</h2><p>FreeSql 提供 AsTable 分表的基础方法，GuidRepository 作为分存式仓储将实现了分表与分库（不支持跨服务器分库）的封装。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> logRepository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetGuidRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Log<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> oldname <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">oldname</span><span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;YYYYMM&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面我们得到一个日志仓储按年月分表，使用它 CURD 最终会操作 Log_201903 表。</p><p>注意事项：</p><ul><li>v0.11.12 以后的版本可以使用 CodeFirst 迁移分表；</li><li>不可在分表分库的实体类型中使用《延时加载》；</li></ul><h2 id="兼容问题" tabindex="-1"><a class="header-anchor" href="#兼容问题" aria-hidden="true">#</a> 兼容问题</h2><p>SqlServer 提供的 output inserted 特性，在表使用了自增或数据库定义了默认值的时候，使用它可以快速将 insert 的数据返回。PostgreSQL 也有相应的功能，如此方便但不是每个数据库都支持。</p><p>当采用了不支持该特性的数据库（Sqlite/MySql/Oracle/达梦/南大通用/MsAccess），并且实体使用了自增属性，仓储批量插入将变为逐条执行，可以考虑以下改进：</p><ul><li>使用 uuid 作为主键（即 Guid）；</li><li>避免使用数据库的默认值功能；</li></ul><h2 id="联级保存" tabindex="-1"><a class="header-anchor" href="#联级保存" aria-hidden="true">#</a> 联级保存</h2>`,24),_=p('<h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><table><thead><tr><th>属性</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>EntityType</td><td>Type</td><td>仓储正在操作的实体类型，注意它不一定是 TEntity</td></tr><tr><td>UnitOfWork</td><td>IUnitOfWork</td><td>正在使用的工作单元</td></tr><tr><td>Orm</td><td>IFreeSql</td><td>正在使用的 Orm</td></tr><tr><td>DbContextOptions</td><td>DbContextOptions</td><td>正在使用的 DbContext 设置，修改设置不影响其他</td></tr><tr><td>DataFilter</td><td>IDataFilter&lt;TEntity&gt;</td><td>仓储过滤器，本对象内生效</td></tr><tr><td>UpdateDiy</td><td>IUpdate&lt;TEntity&gt;</td><td>准备更新数据，与仓储同事务</td></tr><tr><td>Select</td><td>ISelect&lt;TEntity&gt;</td><td>准备查询数据</td></tr></tbody></table>',2),f=n("thead",null,[n("tr",null,[n("th",null,"方法"),n("th",null,"返回值"),n("th",null,"参数"),n("th",null,"说明")])],-1),T=n("tr",null,[n("td",null,"AsType"),n("td",null,"void"),n("td",null,"Type"),n("td",null,"改变仓储正在操作的实体类型")],-1),E=n("tr",null,[n("td",null,"Get"),n("td",null,"TEntity"),n("td",null,"TKey"),n("td",null,"根据主键，查询数据")],-1),w=n("tr",null,[n("td",null,"Find"),n("td",null,"TEntity"),n("td",null,"TKey"),n("td",null,"根据主键，查询数据")],-1),q=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"TKey"),n("td",null,"根据主键删除数据")],-1),S=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"Lambda"),n("td",null,"根据 lambda 条件删除数据")],-1),x=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"TEntity"),n("td",null,"删除数据")],-1),I=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量删除数据")],-1),R={href:"https://freesql.net/guide/cascade-delete.html",target:"_blank",rel:"noopener noreferrer"},U=n("td",null,"List<object>",-1),F=n("td",null,"Lambda",-1),C=n("td",null,"根据导航属性递归数据库删除数据",-1),A=n("tr",null,[n("td",null,"Insert"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"插入数据，若实体有自增列，插入后的自增值会填充到实体中")],-1),D=n("tr",null,[n("td",null,"Insert"),n("td",null,"-"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量插入数据")],-1),G=n("tr",null,[n("td",null,"Update"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"更新数据")],-1),L=n("tr",null,[n("td",null,"Update"),n("td",null,"-"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量更新数据")],-1),B=n("tr",null,[n("td",null,"InsertOrUpdate"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"插入或更新数据")],-1),O=n("tr",null,[n("td",null,"FlushState"),n("td",null,"-"),n("td",null,"无"),n("td",null,"清除状态管理数据")],-1),M=n("tr",null,[n("td",null,"Attach"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"附加实体到状态管理，可用于不查询就更新或删除")],-1),N=n("tr",null,[n("td",null,"Attach"),n("td",null,"-"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量附加实体到状态管理")],-1),P=n("tr",null,[n("td",null,"AttachOnlyPrimary"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"只附加实体的主键数据到状态管理")],-1),W=n("td",null,"-",-1),V=n("td",null,"TEntity, string",-1),Y=n("td",null,"保存实体的指定 ManyToMany/OneToMany 导航属性（完整对比）",-1),K=n("td",null,"-",-1),j=n("td",null,"List<TEntity>",-1),H=n("td",null,"准备编辑一个 List 实体",-1),Q=n("tr",null,[n("td",null,"EndEdit"),n("td",null,"int"),n("td",null,"无"),n("td",null,"完成编辑数据，进行保存动作")],-1),$=n("blockquote",null,[n("p",null,"状态管理，可实现 Update 只更新变化的字段（不更新所有字段），灵活使用 Attach 和 Update 用起来非常舒服。")],-1);function z(J,X){const i=c("CodeTabs"),e=c("RouterLink"),u=c("ExternalLinkIcon");return r(),k("div",null,[v,t(i,{id:"31",data:[{id:".NET CLI"},{id:".NET Framework"}],active:0},{title0:a(({value:l,isActive:o})=>[s(".NET CLI")]),title1:a(({value:l,isActive:o})=>[s(".NET Framework")]),tab0:a(({value:l,isActive:o})=>[h]),tab1:a(({value:l,isActive:o})=>[g]),_:1},8,["data"]),b,n("p",null,[s("更多资料："),t(e,{to:"/guide/filters.html"},{default:a(()=>[s("《过滤器、全局过滤器》")]),_:1})]),y,n("p",null,[s("请移步文档 "),t(e,{to:"/guide/cascade-saving.html"},{default:a(()=>[s("《联级保存》")]),_:1})]),_,n("table",null,[f,n("tbody",null,[T,E,w,q,S,x,I,n("tr",null,[n("td",null,[n("a",R,[s("DeleteCascadeByDatabase"),t(u)])]),U,F,C]),A,D,G,L,B,O,M,N,P,n("tr",null,[n("td",null,[t(e,{to:"/guide/cascade-saving.html"},{default:a(()=>[s("SaveMany")]),_:1})]),W,V,Y]),n("tr",null,[n("td",null,[t(e,{to:"/guide/insert-or-update.html#_4%E3%80%81beginedit-%E6%89%B9%E9%87%8F%E7%BC%96%E8%BE%91"},{default:a(()=>[s("BeginEdit")]),_:1})]),K,j,H]),Q])]),$])}const sn=d(m,[["render",z],["__file","repository.html.vue"]]);export{sn as default};
