import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as r,c as i,a as t,b as n,d as e,w as c,e as l}from"./app-Cb7GMO-H.js";const p={},u=t("h2",{id:"介绍",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),n(" 介绍")],-1),b=t("p",null,"DuckDB 是一款进程内分析数据库，它可以在无需维护分布式多服务器系统的情况下处理出人意料的大型数据集。",-1),h=t("p",null,"DuckDB has two configurable options for concurrency:",-1),m=t("ul",null,[t("li",null,"One process can both read and write to the database."),t("li",null,"Multiple processes can read from the database, but no processes can write (access_mode = 'READ_ONLY').")],-1),k={href:"https://duckdb.org/docs/",target:"_blank",rel:"noopener noreferrer"},g=l(`<h2 id="安装包" tabindex="-1"><a class="header-anchor" href="#安装包" aria-hidden="true">#</a> 安装包</h2><p>FreeSql.Provider.Duckdb</p><p>.NET CLI</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet <span class="token function">add</span> package FreeSql.Provider.Duckdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Package Manager</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Install-Package FreeSql.Provider.Duckdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token class-name">IFreeSql</span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSql<span class="token punctuation">.</span>FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>DataType<span class="token punctuation">.</span>DuckDB<span class="token punctuation">,</span> <span class="token string">&quot;DataSource = train_services.db&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseMonitorCommand</span><span class="token punctuation">(</span>cmd <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Sql：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">cmd<span class="token punctuation">.</span>CommandText</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseAutoSyncStructure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//自动创建表</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖的第三方 ado.net 驱动源代码：https://github.com/Giorgi/DuckDB.NET</p><table><thead><tr><th>Connection String</th><th>Description</th></tr></thead><tbody><tr><td>DataSource = :memory:</td><td>Connect to a new in-memory database</td></tr><tr><td>DataSource = :memory:?cache=shared</td><td>Connect to a shared, in-memory database</td></tr><tr><td>DataSource = train_services.db</td><td>Connect to train_services.db</td></tr><tr><td>DataSource = train_services.db;ACCESS_MODE=READ_ONLY</td><td>Connect to train_services.db, make connection read-only</td></tr><tr><td>DataSource = :memory:;threads=8;ACCESS_MODE=READ_ONLY</td><td>Connect to a new in-memory database, limit threads to 8, make connection read-only</td></tr><tr><td>DataSource = train_services.db;ACCESS_MODE=READ_ONLY;memory_limit=10GB</td><td>Connect to train_services.db, make connection read-only, limit RAM usage to 10GB</td></tr></tbody></table><p>默认映射类型：</p><table><thead><tr><th>CSharp</th><th>DuckDB</th><th>说明</th></tr></thead><tbody><tr><td>bool/bool?</td><td>BOOLEAN</td><td>logical boolean (true/false)</td></tr><tr><td>sbyte/sbyte?</td><td>TINYINT</td><td>signed one-byte integer</td></tr><tr><td>short/short?</td><td>SMALLINT</td><td>signed two-byte integer</td></tr><tr><td>int/int?</td><td>INTEGER</td><td>signed four-byte integer</td></tr><tr><td>long/long?</td><td>BIGINT</td><td>signed eight-byte integer</td></tr><tr><td>byte/byte?</td><td>UTINYINT</td><td></td></tr><tr><td>ushort/ushort?</td><td>USMALLINT</td><td></td></tr><tr><td>uint/uint?</td><td>UINTEGER</td><td></td></tr><tr><td>ulong/ulong?</td><td>UBIGINT</td><td></td></tr><tr><td>double/double?</td><td>DOUBLE</td><td>double precision floating-point number (8 bytes)</td></tr><tr><td>float/float?</td><td>FLOAT</td><td>single precision floating-point number (4 bytes)</td></tr><tr><td>decimal/decimal?</td><td>DECIMAL(10,2)</td><td>fixed-precision number with the given width (precision) and scale</td></tr><tr><td>TimeSpan/TimeSpan?</td><td>TIME</td><td>time of day (no time zone)</td></tr><tr><td>DateTime/DateTime?</td><td>TIMESTAMP</td><td>combination of time and date</td></tr><tr><td>TimeOnly/TimeOnly?</td><td>TIME</td><td></td></tr><tr><td>DateOnly/DateOnly?</td><td>DATE</td><td>calendar date (year, month day)</td></tr><tr><td>byte[]</td><td>BLOB</td><td>variable-length binary data</td></tr><tr><td>string</td><td>VARCHAR(255)</td><td>variable-length character string</td></tr><tr><td>char</td><td>CHAR(1)</td><td></td></tr><tr><td>Guid/Guid?</td><td>UUID</td><td>UUID data type</td></tr><tr><td>BitArray</td><td>BIT</td><td>string of 1s and 0s</td></tr><tr><td>BigInteger/BigInteger?</td><td>HUGEINT</td><td>signed sixteen-byte integer</td></tr><tr><td>T[]</td><td>ARRAY</td><td>如 int[]、string[]，不能是可空 int?[]</td></tr><tr><td>List&lt;T&gt;</td><td>LIST</td><td>如 List&lt;int&gt;、List&lt;string&gt;，不能是可空 List&lt;int?&gt;</td></tr><tr><td>Dictionary&lt;string, object&gt;</td><td>STRUCT</td><td>{&#39;i&#39;: 42, &#39;j&#39;: &#39;a&#39;}</td></tr><tr><td>Dictionary&lt;TKey, TValue&gt;</td><td>MAP</td><td>map([1, 2], [&#39;a&#39;, &#39;b&#39;])</td></tr></tbody></table>`,12);function _(v,y){const s=a("ExternalLinkIcon"),d=a("RouterLink");return r(),i("div",null,[u,b,h,m,t("p",null,[t("a",k,[n("DuckDB | 官网 "),e(s)])]),g,t("blockquote",null,[t("p",null,[n("自定义映射，请移步"),e(d,{to:"/guide/type-mapping.html"},{default:c(()=>[n("【类型映射】")]),_:1}),n("文档。")])])])}const T=o(p,[["render",_],["__file","freesql-provider-duckdb.html.vue"]]);export{T as default};
