import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,a as e}from"./app-C4mrjflZ.js";const p={};function o(c,n){return a(),t("div",null,n[0]||(n[0]=[e(`<h1 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> Insert</h1><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For creation details, please refer to the getting started document</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Topic</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;newtitle</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> Clicks <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-single-insert" tabindex="-1"><a class="header-anchor" href="#_1-single-insert" aria-hidden="true">#</a> 1. Single Insert</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t1 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`Topic\`(\`Clicks\`, \`Title\`, \`CreateTime\`)</span>
<span class="token comment">//VALUES(?Clicks0, ?Title0, ?CreateTime0)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-return-auto-incremented-value" tabindex="-1"><a class="header-anchor" href="#_2-return-auto-incremented-value" aria-hidden="true">#</a> 2. Return Auto-Incremented Value</h2><p>If the table has an auto-increment column, the ID should be returned after inserting data.</p><p>Method 1: (Raw)</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">long</span></span> id <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Id <span class="token operator">=</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Method 2: (Using FreeSql.Repository)</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Can be obtained from the IOC container</span>
repo<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>The repository will fill the auto-incremented value into items[0].Id (supports batch insert backfill)</p></blockquote><blockquote><p>DbFirst mode sequence: [Column(IsIdentity = true, InsertValueSql = &quot;seqname.nextval&quot;)]</p></blockquote><h2 id="_3-batch-insert" tabindex="-1"><a class="header-anchor" href="#_3-batch-insert" aria-hidden="true">#</a> 3. Batch Insert</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t2 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`Topic\`(\`Clicks\`, \`Title\`, \`CreateTime\`)</span>
<span class="token comment">//VALUES(?Clicks0, ?Title0, ?CreateTime0), (?Clicks1, ?Title1, ?CreateTime1),</span>
<span class="token comment">//(?Clicks2, ?Title2, ?CreateTime2), (?Clicks3, ?Title3, ?CreateTime3),</span>
<span class="token comment">//(?Clicks4, ?Title4, ?CreateTime4), (?Clicks5, ?Title5, ?CreateTime5),</span>
<span class="token comment">//(?Clicks6, ?Title6, ?CreateTime6), (?Clicks7, ?Title7, ?CreateTime7),</span>
<span class="token comment">//(?Clicks8, ?Title8, ?CreateTime8), (?Clicks9, ?Title9, ?CreateTime9)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is recommended to turn off parameterization when batch inserting by using <code>.NoneParameter()</code> to improve execution efficiency.</p><p>When inserting a large amount of data, the internal operations are split into batches according to the following rules:</p><table><thead><tr><th></th><th>Quantity</th><th>Parameter Count</th></tr></thead><tbody><tr><td>MySql</td><td>5000</td><td>3000</td></tr><tr><td>PostgreSQL</td><td>5000</td><td>3000</td></tr><tr><td>SqlServer</td><td>1000</td><td>2100</td></tr><tr><td>Oracle</td><td>500</td><td>999</td></tr><tr><td>Sqlite</td><td>5000</td><td>999</td></tr></tbody></table><p>You can also set appropriate values through <code>BatchOptions</code>. When no external transaction is provided, an internal transaction is opened to ensure insert integrity.</p><h2 id="_4-high-performance-bulkcopy" tabindex="-1"><a class="header-anchor" href="#_4-high-performance-bulkcopy" aria-hidden="true">#</a> 4. High-Performance BulkCopy</h2><table><thead><tr><th>Package</th><th>Extension Method</th><th>Description</th></tr></thead><tbody><tr><td>FreeSql.Provider.SqlServer</td><td>ExecuteSqlBulkCopy</td><td></td></tr><tr><td>FreeSql.Provider.MySqlConnector</td><td>ExecuteMySqlBulkCopy</td><td></td></tr><tr><td>FreeSql.Provider.Oracle</td><td>ExecuteOracleBulkCopy</td><td></td></tr><tr><td>FreeSql.Provider.PostgreSQL</td><td>ExecutePgCopy</td><td></td></tr><tr><td>FreeSql.Provider.Dameng</td><td>ExecuteDmBulkCopy</td><td>Dameng</td></tr><tr><td>FreeSql.Provider.KingbaseES</td><td>ExecuteKdbCopy</td><td>KingbaseES</td></tr></tbody></table><p>Batch Insert Performance Test Reference (52 Fields)</p><table><thead><tr><th></th><th>180K</th><th>10K</th><th>5K</th><th>2K</th><th>1K</th><th>500</th><th>100</th><th>50</th></tr></thead><tbody><tr><td>MySql 5.5 ExecuteAffrows</td><td>38,481</td><td>2,234</td><td>1,136</td><td>284</td><td>239</td><td>167</td><td>66</td><td>30</td></tr><tr><td>MySql 5.5 ExecuteMySqlBulkCopy</td><td>28,405</td><td>1,142</td><td>657</td><td>451</td><td>435</td><td>592</td><td>47</td><td>22</td></tr><tr><td>SqlServer Express ExecuteAffrows</td><td>402,355</td><td>24,847</td><td>11,465</td><td>4,971</td><td>2,437</td><td>915</td><td>138</td><td>88</td></tr><tr><td>SqlServer Express ExecuteSqlBulkCopy</td><td>21,065</td><td>578</td><td>326</td><td>139</td><td>105</td><td>79</td><td>60</td><td>48</td></tr><tr><td>PostgreSQL 10 ExecuteAffrows</td><td>46,756</td><td>3,294</td><td>2,269</td><td>1,019</td><td>374</td><td>209</td><td>51</td><td>37</td></tr><tr><td>PostgreSQL 10 ExecutePgCopy</td><td>10,090</td><td>583</td><td>337</td><td>136</td><td>88</td><td>61</td><td>30</td><td>25</td></tr></tbody></table><blockquote><p>180K Explanation: Inserting 180,000 rows, the numbers in the table represent execution time (ms).</p></blockquote><p>Batch Insert Performance Test Reference (10 Fields)</p><table><thead><tr><th></th><th>180K</th><th>10K</th><th>5K</th><th>2K</th><th>1K</th><th>500</th><th>100</th><th>50</th></tr></thead><tbody><tr><td>MySql 5.5 ExecuteAffrows</td><td>11,171</td><td>866</td><td>366</td><td>80</td><td>83</td><td>50</td><td>24</td><td>34</td></tr><tr><td>MySql 5.5 ExecuteMySqlBulkCopy</td><td>6,504</td><td>399</td><td>257</td><td>116</td><td>87</td><td>100</td><td>16</td><td>16</td></tr><tr><td>SqlServer Express ExecuteAffrows</td><td>47,204</td><td>2,275</td><td>1,108</td><td>488</td><td>279</td><td>123</td><td>35</td><td>16</td></tr><tr><td>SqlServer Express ExecuteSqlBulkCopy</td><td>4,248</td><td>127</td><td>71</td><td>30</td><td>48</td><td>14</td><td>11</td><td>10</td></tr><tr><td>PostgreSQL 10 ExecuteAffrows</td><td>9,786</td><td>568</td><td>336</td><td>157</td><td>102</td><td>34</td><td>9</td><td>6</td></tr><tr><td>PostgreSQL 10 ExecutePgCopy</td><td>4,081</td><td>167</td><td>93</td><td>39</td><td>21</td><td>12</td><td>4</td><td>2</td></tr></tbody></table><blockquote><p>Test results are performed under the same operating system and all have been warmed up.</p></blockquote><h2 id="_5-dynamic-table-names" tabindex="-1"><a class="header-anchor" href="#_5-dynamic-table-names" aria-hidden="true">#</a> 5. Dynamic Table Names</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsTable</span><span class="token punctuation">(</span><span class="token string">&quot;Topic_201903&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Insert into Topic_201903 table</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-insert-specified-columns" tabindex="-1"><a class="header-anchor" href="#_6-insert-specified-columns" aria-hidden="true">#</a> 6. Insert Specified Columns</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t3 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InsertColumns</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`Topic\`(\`Title\`)</span>
<span class="token comment">//VALUES(?Title0), (?Title1), (?Title2), (?Title3), (?Title4),</span>
<span class="token comment">//(?Title5), (?Title6), (?Title7), (?Title8), (?Title9)</span>

<span class="token class-name"><span class="token keyword">var</span></span> t4 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InsertColumns</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> a<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Clicks <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`Topic\`(\`Clicks\`, \`Title\`)</span>
<span class="token comment">//VALUES(?Clicks0, ?Title0), (?Clicks1, ?Title1), (?Clicks2, ?Title2),</span>
<span class="token comment">//(?Clicks3, ?Title3), (?Clicks4, ?Title4), (?Clicks5, ?Title5),</span>
<span class="token comment">//(?Clicks6, ?Title6), (?Clicks7, ?Title7), (?Clicks8, ?Title8),</span>
<span class="token comment">//(?Clicks9, ?Title9)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-ignore-columns" tabindex="-1"><a class="header-anchor" href="#_7-ignore-columns" aria-hidden="true">#</a> 7. Ignore Columns</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t5 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IgnoreColumns</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`Topic\`(\`Clicks\`, \`Title\`)</span>
<span class="token comment">//VALUES(?Clicks0, ?Title0), (?Clicks1, ?Title1), (?Clicks2, ?Title2),</span>
<span class="token comment">//(?Clicks3, ?Title3), (?Clicks4, ?Title4), (?Clicks5, ?Title5),</span>
<span class="token comment">//(?Clicks6, ?Title6), (?Clicks7, ?Title7), (?Clicks8, ?Title8),</span>
<span class="token comment">//(?Clicks9, ?Title9)</span>

<span class="token class-name"><span class="token keyword">var</span></span> t6 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IgnoreColumns</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> a<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> a<span class="token punctuation">.</span>CreateTime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`Topic\`(\`Clicks\`)</span>
<span class="token comment">//VALUES(?Clicks0), (?Clicks1), (?Clicks2), (?Clicks3), (?Clicks4),</span>
<span class="token comment">//(?Clicks5), (?Clicks6), (?Clicks7), (?Clicks8), (?Clicks9)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-dictionary-insertion" tabindex="-1"><a class="header-anchor" href="#_8-dictionary-insertion" aria-hidden="true">#</a> 8. Dictionary Insertion</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fsql<span class="token punctuation">.</span><span class="token function">InsertDict</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsTable</span><span class="token punctuation">(</span><span class="token string">&quot;table1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Note: List&lt;Dictionary&lt;string, object&gt;&gt; is for batch insertion</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-import-table" tabindex="-1"><a class="header-anchor" href="#_9-import-table" aria-hidden="true">#</a> 9. Import Table</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> affrows <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">InsertInto</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Topic2</span>
    <span class="token punctuation">{</span>
        Title <span class="token operator">=</span> a<span class="token punctuation">.</span>Title
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>Topic2<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>Title<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>Clicks<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>CreateTime<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> a<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>Title<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;0001-01-01 00:00:00&#39;</span>
<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>Topic<span class="token punctuation">\`</span></span> a
<span class="token keyword">LIMIT</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: Since <code>Clicks</code> and <code>CreateTime</code> are not selected, values set using the target entity property <code>[Column(InsertValueSql = xx)]</code>, or default values of the target entity properties in C# will be used.</p><h2 id="_10-mysql-insert-ignore-into" tabindex="-1"><a class="header-anchor" href="#_10-mysql-insert-ignore-into" aria-hidden="true">#</a> 10. MySql <code>Insert Ignore Into</code></h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Insert</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MySqlIgnoreInto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AppendData</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">///INSERT IGNORE INTO \`Topic\`(\`Clicks\`)</span>
<span class="token comment">//VALUES(?Clicks0), (?Clicks1), (?Clicks2), (?Clicks3), (?Clicks4),</span>
<span class="token comment">//(?Clicks5), (?Clicks6), (?Clicks7), (?Clicks8), (?Clicks9)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-mysql-on-duplicate-key-update" tabindex="-1"><a class="header-anchor" href="#_11-mysql-on-duplicate-key-update" aria-hidden="true">#</a> 11. MySql <code>On Duplicate Key Update</code></h2><p>FreeSql.Provider.MySql and FreeSql.Provider.MySqlConnector support the MySQL-specific feature <code>On Duplicate Key Update</code>, which implements inserting or updating data (supports batch operations).</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">TestInfo</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> time <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestInfo</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">&quot;title-100&quot;</span><span class="token punctuation">,</span> time <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;2000-01-01&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">NoneParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OnDuplicateKeyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`TestInfo\`(\`id\`, \`title\`, \`time\`) VALUES(100, &#39;title-100&#39;, &#39;2000-01-01 00:00:00.000&#39;)</span>
<span class="token comment">//ON DUPLICATE KEY UPDATE</span>
<span class="token comment">//\`title\` = VALUES(\`title\`), </span>
<span class="token comment">//\`time\` = VALUES(\`time\`)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Methods that can be called after <code>OnDuplicateKeyUpdate()</code>:</p><table><thead><tr><th>Method Name</th><th>Description</th></tr></thead><tbody><tr><td>IgnoreColumns</td><td>Ignore the columns to be updated, similar to <code>IUpdate.IgnoreColumns</code></td></tr><tr><td>UpdateColumns</td><td>Specify the columns to be updated, similar to <code>IUpdate.UpdateColumns</code></td></tr><tr><td>Set</td><td>Manually specify the columns to be updated, similar to <code>IUpdate.Set</code></td></tr><tr><td>SetRaw</td><td>Supplement to <code>Set</code> method, can pass SQL strings</td></tr><tr><td>ToSql</td><td>Return the SQL statement to be executed</td></tr><tr><td>ExecuteAffrows</td><td>Execute and return the number of affected rows</td></tr></tbody></table><p>Both <code>IInsert</code> and <code>OnDuplicateKeyUpdate</code> have <code>IgnoreColumns</code> and <code>UpdateColumns</code> methods.</p><p>When inserting entities or entity collections, and the <code>time</code> column is ignored, the code is as follows:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">IgnoreColumns</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>time<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">NoneParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OnDuplicateKeyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO \`TestInfo\`(\`id\`, \`title\`) VALUES(200, &#39;title-200&#39;)</span>
<span class="token comment">//ON DUPLICATE KEY UPDATE</span>
<span class="token comment">//\`title\` = VALUES(\`title\`), </span>
<span class="token comment">//\`time\` = &#39;2000-01-01 00:00:00.000&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We find that the <code>UPDATE time</code> part becomes a constant, rather than <code>VALUES(\\</code>time\`)\`. The mechanism is as follows:</p><p>When columns exist in the <code>insert</code> part, they will be set in the <code>update</code> part as <code>VALUES(\\</code>field\`)\`;</p><p>When columns do not exist in the <code>insert</code> part, they will be set as constants in the <code>update</code> part. When operating on entity arrays, this constant will be executed as <code>case when ... end</code> (similar to <code>IUpdate</code>).</p><h2 id="_12-postgresql-on-conflict-do-update" tabindex="-1"><a class="header-anchor" href="#_12-postgresql-on-conflict-do-update" aria-hidden="true">#</a> 12. PostgreSQL <code>On Conflict Do Update</code></h2><p>FreeSql.Provider.PostgreSQL supports PostgreSQL 9.5+ specific feature <code>On Conflict(id) Do Update</code>, which is used similarly to MySQL&#39;s <code>OnDuplicateKeyUpdate</code>.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">IgnoreColumns</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>time<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">NoneParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OnConflictDoUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//INSERT INTO &quot;&quot;TestInfo&quot;&quot;(&quot;&quot;id&quot;&quot;, &quot;&quot;title&quot;&quot;) VALUES(200, &#39;title-200&#39;), (201, &#39;title-201&#39;), (202, &#39;title-202&#39;)</span>
<span class="token comment">//ON CONFLICT(&quot;&quot;id&quot;&quot;) DO UPDATE SET</span>
<span class="token comment">//&quot;&quot;title&quot;&quot; = EXCLUDED.&quot;&quot;title&quot;&quot;,</span>
<span class="token comment">//&quot;&quot;time&quot;&quot; = CASE EXCLUDED.&quot;&quot;id&quot;&quot;</span>
<span class="token comment">//WHEN 200 THEN &#39;2000-01-01 00:00:00.000000&#39;</span>
<span class="token comment">//WHEN 201 THEN &#39;2000-01-01 00:00:00.000000&#39;</span>
<span class="token comment">//WHEN 202 THEN &#39;2000-01-01 00:00:00.000000&#39; END::timestamp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><table><thead><tr><th>Method</th><th>Return Value</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td>AppendData</td><td>&lt;this&gt;</td><td>T1 | IEnumerable&lt;T1&gt;</td><td>Append entities to be inserted</td></tr><tr><td>InsertIdentity</td><td>&lt;this&gt;</td><td>None</td><td>Specify auto-increment column</td></tr><tr><td>InsertColumns</td><td>&lt;this&gt;</td><td>Lambda</td><td>Columns to be inserted</td></tr><tr><td>IgnoreColumns</td><td>&lt;this&gt;</td><td>Lambda</td><td>Columns to be ignored</td></tr><tr><td>IgnoreInsertValueSql</td><td>&lt;this&gt;</td><td>Lambda</td><td>Columns with <code>InsertValueSql</code> to be ignored</td></tr><tr><td>CommandTimeout</td><td>&lt;this&gt;</td><td>int</td><td>Command timeout setting (seconds)</td></tr><tr><td>WithTransaction</td><td>&lt;this&gt;</td><td>DbTransaction</td><td>Set transaction object</td></tr><tr><td>WithConnection</td><td>&lt;this&gt;</td><td>DbConnection</td><td>Set connection object</td></tr><tr><td>ToSql</td><td>string</td><td></td><td>Return the SQL statement to be executed</td></tr><tr><td>OnDuplicateKeyUpdate</td><td>OnDuplicateKeyUpdate&lt;T1&gt;</td><td>None</td><td>MySQL-specific feature <code>On Duplicate Key Update</code></td></tr><tr><td>OnConflictDoUpdate</td><td>OnConflictDoUpdate&lt;T1&gt;</td><td>None</td><td>PostgreSQL-specific feature <code>On Conflict Do Update</code></td></tr><tr><td>ExecuteAffrows</td><td>long</td><td></td><td>Execute SQL statement and return the number of affected rows</td></tr><tr><td>ExecuteIdentity</td><td>long</td><td></td><td>Execute SQL statement and return auto-increment value</td></tr><tr><td>ExecuteInserted</td><td>List&lt;T1&gt;</td><td></td><td>Execute SQL statement and return the inserted records</td></tr><tr><td>ExecuteSqlBulkCopy</td><td>void</td><td></td><td>SQL Server-specific feature, execute <code>SqlBulkCopy</code> batch insert</td></tr><tr><td>ExecutePgCopy</td><td>void</td><td></td><td>PostgreSQL-specific feature, execute <code>Copy</code> batch import data</td></tr></tbody></table>`,56)]))}const d=s(p,[["render",o],["__file","insert.html.vue"]]);export{d as default};
