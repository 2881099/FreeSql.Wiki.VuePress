import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as d,c as r,d as t,w as a,a as n,b as s,e as c}from"./app-B7dFHUfW.js";const k={},m=n("p",null,[n("code",null,"FreeSql.DbContext"),s(" 参考 abp vnext 接口规范，实现了通用的仓储层功能（CURD），理解成传统增强版（DAL）。")],-1),v=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s(" dotnet "),n("span",{class:"token function"},"add"),s(` package FreeSql.DbContext
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`Install-Package FreeSql.DbContext
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),y=c(`<ul><li>Select/Attach 快照对象，Update 只更新变化的字段；</li><li>Insert 插入数据，适配各数据库优化执行 ExecuteAffrows/ExecuteIdentity/ExecuteInserted；</li><li>级联保存、级联删除（一对一、一对多、多对多）；</li><li>仓储 + 工作单元设计模式，风格简洁、统一；</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Song</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：Repository 对象多线程不安全，因此不应在多个线程上同时对其执行工作。</p></blockquote><h2 id="临时用法" tabindex="-1"><a class="header-anchor" href="#临时用法" aria-hidden="true">#</a> 临时用法</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> curd <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>适合在局部代码中，临时的创建仓储，用完就扔掉。</p></blockquote><h2 id="泛型仓储-依赖注入" tabindex="-1"><a class="header-anchor" href="#泛型仓储-依赖注入" aria-hidden="true">#</a> 泛型仓储（依赖注入）</h2><p>方法 2、泛型仓储+依赖注入（.NET Core)；</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//先看入门文档注入 IFreeSql</span>
services<span class="token punctuation">.</span><span class="token function">AddFreeRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//在控制器使用泛型仓储</span>
<span class="token keyword">public</span> <span class="token function">SongsController</span><span class="token punctuation">(</span><span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> songRepository<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承仓储-依赖注入" tabindex="-1"><a class="header-anchor" href="#继承仓储-依赖注入" aria-hidden="true">#</a> 继承仓储（依赖注入）</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//先看入门文档注入 IFreeSql</span>
services<span class="token punctuation">.</span><span class="token function">AddFreeRepository</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SongRepository</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果没有继承的仓储，第二个参数不用传</span>

<span class="token comment">//使用继承的仓储</span>
<span class="token keyword">public</span> <span class="token function">SongsController</span><span class="token punctuation">(</span><span class="token class-name">SongRepository</span> repo1<span class="token punctuation">,</span> <span class="token class-name">TopicRepository</span> repo2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SongRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">SongRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">//在这里增加 CURD 以外的方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对比更新" tabindex="-1"><a class="header-anchor" href="#对比更新" aria-hidden="true">#</a> 对比更新</h2><p>只更新变化的属性：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此时快照 item</span>
item<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;newtitle&quot;</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对比快照时的变化</span>
<span class="token comment">//UPDATE \`tb_topic\` SET \`Title\` = ?p_0</span>
<span class="token comment">//WHERE (\`Id\` = 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是觉得先查询再更新，啰嗦？</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Topic</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时快照 item</span>
item<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;newtitle&quot;</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对比快照时的变化</span>
<span class="token comment">//UPDATE \`tb_topic\` SET \`Title\` = ?p_0</span>
<span class="token comment">//WHERE (\`Id\` = 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>repo.CompareState(item) 可获取 item 的状态变化信息</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 比较实体，计算出值发生变化的属性，以及属性变化的前后值</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newdata<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>最新的实体对象，它将与附加实体的状态对比<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>key: 属性名, value: [旧值, 新值]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">CompareState</span><span class="token punctuation">(</span><span class="token class-name">TEntity</span> newdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="登陆信息-依赖注入" tabindex="-1"><a class="header-anchor" href="#登陆信息-依赖注入" aria-hidden="true">#</a> 登陆信息（依赖注入）</h2><p>repo.DbContextOptions.AuditValue 适合与 AddScoped（依赖注入） 信息结合，统一设置登陆信息。</p><p>如下示例：使用仓储插入/更新时自动使用登陆信息</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyRepository<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyRepositoryOptions</span>
<span class="token punctuation">{</span>
    AuditValue <span class="token operator">=</span> e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>AuditValueType <span class="token operator">==</span> AuditValueType<span class="token punctuation">.</span>Insert <span class="token operator">&amp;&amp;</span>
            e<span class="token punctuation">.</span>Object <span class="token keyword">is</span> <span class="token class-name">IEntityCreated</span> obj1 <span class="token operator">&amp;&amp;</span> obj1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj1<span class="token punctuation">.</span>CreatedUserId <span class="token operator">=</span> user<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
            obj1<span class="token punctuation">.</span>CreatedUserName <span class="token operator">=</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>AuditValueType <span class="token operator">==</span> AuditValueType<span class="token punctuation">.</span>Update <span class="token operator">&amp;&amp;</span>
            e<span class="token punctuation">.</span>Object <span class="token keyword">is</span> <span class="token class-name">IEntityModified</span> obj2 <span class="token operator">&amp;&amp;</span> obj2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj2<span class="token punctuation">.</span>ModifiedUserId <span class="token operator">=</span> user<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
            obj2<span class="token punctuation">.</span>ModifiedUserName <span class="token operator">=</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span> <span class="token keyword">where</span> <span class="token class-name">TEntity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">,</span> <span class="token class-name">MyRepositoryOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">?.</span>AuditValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> DbContextOptions<span class="token punctuation">.</span>AuditValue <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> options<span class="token punctuation">.</span><span class="token function">AuditValue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MyRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">&gt;</span></span></span> <span class="token keyword">where</span> <span class="token class-name">TEntity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">,</span> <span class="token class-name">MyRepositoryOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>fsql<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyRepositoryOptions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>DbContextAuditValueEventArgs<span class="token punctuation">&gt;</span></span> AuditValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="兼容问题" tabindex="-1"><a class="header-anchor" href="#兼容问题" aria-hidden="true">#</a> 兼容问题</h2><p>SqlServer 提供的 output inserted 特性，在表使用了自增或数据库定义了默认值的时候，使用它可以快速将 insert 的数据返回。PostgreSQL 也有相应的功能，如此方便但不是每个数据库都支持。</p><p>当采用了不支持该特性的数据库（Sqlite/MySql/Oracle/达梦/南大通用/MsAccess），并且实体使用了自增属性，仓储批量插入将变为逐条执行，可以考虑以下改进：</p><ul><li>使用 uuid 作为主键（即 Guid）；</li><li>避免使用数据库的默认值功能；</li></ul><h2 id="联级保存" tabindex="-1"><a class="header-anchor" href="#联级保存" aria-hidden="true">#</a> 联级保存</h2>`,27),h=c('<h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><table><thead><tr><th>属性</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>EntityType</td><td>Type</td><td>仓储正在操作的实体类型，注意它不一定是 TEntity</td></tr><tr><td>UnitOfWork</td><td>IUnitOfWork</td><td>正在使用的工作单元</td></tr><tr><td>Orm</td><td>IFreeSql</td><td>正在使用的 Orm</td></tr><tr><td>DbContextOptions</td><td>DbContextOptions</td><td>正在使用的 DbContext 设置，修改设置不影响其他</td></tr><tr><td>UpdateDiy</td><td>IUpdate&lt;TEntity&gt;</td><td>准备更新数据，与仓储同事务</td></tr><tr><td>Select</td><td>ISelect&lt;TEntity&gt;</td><td>准备查询数据</td></tr></tbody></table>',2),g=n("thead",null,[n("tr",null,[n("th",null,"方法"),n("th",null,"返回值"),n("th",null,"参数"),n("th",null,"说明")])],-1),_=n("tr",null,[n("td",null,"AsType"),n("td",null,"void"),n("td",null,"Type"),n("td",null,"改变仓储正在操作的实体类型")],-1),w=n("tr",null,[n("td",null,"Get"),n("td",null,"TEntity"),n("td",null,"TKey"),n("td",null,"根据主键，查询数据")],-1),E=n("tr",null,[n("td",null,"Find"),n("td",null,"TEntity"),n("td",null,"TKey"),n("td",null,"根据主键，查询数据")],-1),f=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"TKey"),n("td",null,"根据主键删除数据")],-1),T=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"Lambda"),n("td",null,"根据 lambda 条件删除数据")],-1),A=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"TEntity"),n("td",null,"删除数据")],-1),x=n("tr",null,[n("td",null,"Delete"),n("td",null,"int"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量删除数据")],-1),I=n("td",null,"List<object>",-1),S=n("td",null,"Lambda",-1),q=n("td",null,"根据导航属性递归数据库删除数据",-1),R=n("tr",null,[n("td",null,"Insert"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"插入数据，若实体有自增列，插入后的自增值会填充到实体中")],-1),C=n("tr",null,[n("td",null,"Insert"),n("td",null,"-"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量插入数据")],-1),U=n("tr",null,[n("td",null,"Update"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"更新数据")],-1),D=n("tr",null,[n("td",null,"Update"),n("td",null,"-"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量更新数据")],-1),B=n("tr",null,[n("td",null,"InsertOrUpdate"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"插入或更新数据")],-1),F=n("tr",null,[n("td",null,"FlushState"),n("td",null,"-"),n("td",null,"无"),n("td",null,"清除状态管理数据")],-1),O=n("tr",null,[n("td",null,"Attach"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"附加实体到状态管理，可用于不查询就更新或删除")],-1),M=n("tr",null,[n("td",null,"Attach"),n("td",null,"-"),n("td",null,"IEnumerable<TEntity>"),n("td",null,"批量附加实体到状态管理")],-1),V=n("tr",null,[n("td",null,"AttachOnlyPrimary"),n("td",null,"-"),n("td",null,"TEntity"),n("td",null,"只附加实体的主键数据到状态管理")],-1),j=n("td",null,"-",-1),L=n("td",null,"List<TEntity>",-1),N=n("td",null,"准备编辑一个 List 实体",-1),G=n("tr",null,[n("td",null,"EndEdit"),n("td",null,"int"),n("td",null,"无"),n("td",null,"完成编辑数据，进行保存动作")],-1),P=n("blockquote",null,[n("p",null,"状态管理，可实现 Update 只更新变化的字段（不更新所有字段），灵活使用 Attach 和 Update 用起来非常舒服。")],-1);function K(W,H){const i=l("CodeTabs"),e=l("RouterLink");return d(),r("div",null,[m,t(i,{id:"3",data:[{id:".NET CLI"},{id:".NET Framework"}],active:0},{title0:a(({value:p,isActive:o})=>[s(".NET CLI")]),title1:a(({value:p,isActive:o})=>[s(".NET Framework")]),tab0:a(({value:p,isActive:o})=>[v]),tab1:a(({value:p,isActive:o})=>[b]),_:1}),y,n("p",null,[s("请移步文档 "),t(e,{to:"/guide/cascade-saving.html"},{default:a(()=>[s("《联级保存》")]),_:1})]),h,n("table",null,[g,n("tbody",null,[_,w,E,f,T,A,x,n("tr",null,[n("td",null,[t(e,{to:"/guide/cascade-delete.html#%E5%9F%BA%E4%BA%8E%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%91%E7%BA%A7%E8%81%94%E5%88%A0%E9%99%A4"},{default:a(()=>[s("DeleteCascadeByDatabase")]),_:1})]),I,S,q]),R,C,U,D,B,F,O,M,V,n("tr",null,[n("td",null,[t(e,{to:"/guide/insert-or-update.html#_4%E3%80%81%E8%A1%A8%E6%A0%BC%E7%BC%96%E8%BE%91-beginedit"},{default:a(()=>[s("BeginEdit")]),_:1})]),j,L,N]),G])]),P])}const J=u(k,[["render",K],["__file","repository.html.vue"]]);export{J as default};
