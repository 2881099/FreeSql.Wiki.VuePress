import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as l,c as u,a as n,b as s,d as a,w as p,e as o}from"./app-CdwY6YbT.js";const r={},d=o(`<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>Having tried ado.net, dapper, ef, and the Repository pattern, and even writing my own generator tools for common CRUD operations, I&#39;ve encountered some inconveniences:</p><ul><li>Each time before use, it needs to be declared and then operated on.</li><li>Many people have one operation class (or DAL, DbContext, Repository) for each entity class.</li></ul><p>This document introduces a minimalist CRUD operation approach using <code>BaseEntity</code>.</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><ul><li>Automatic migration of entity structure (CodeFirst) to the database.</li><li>Direct CRUD operations using entity methods.</li><li>Simplified entity type definition, eliminating the need to configure primary keys and common fields (such as <code>CreateTime</code>, <code>UpdateTime</code>).</li><li>Implements soft delete logic for single-table and multi-table queries.</li></ul><h2 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration" aria-hidden="true">#</a> Declaration</h2><p>Refer to the <code>BaseEntity.cs</code> source code (about 100 lines), copy it into your project, and then add the NuGet packages:</p><blockquote><p><code>dotnet add package FreeSql.DbContext</code></p></blockquote><blockquote><p><code>dotnet add package FreeSql.Provider.Sqlite</code></p></blockquote><ol><li>Define an entity type with an <code>int</code> primary key that is auto-incremented. When <code>BaseEntity&lt;TKey&gt;</code> is specified as <code>int/long</code>, it will assume the primary key is auto-incremented:</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserGroup</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseEntity<span class="token punctuation">&lt;</span>UserGroup<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> GroupName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you do not want the primary key to be auto-incremented, you can override the property:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserGroup</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseEntity<span class="token punctuation">&lt;</span>UserGroup<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> GroupName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),k=o(`<ol start="2"><li>Define an entity type with a <code>Guid</code> primary key. The Guid value will be automatically generated and ordered, so you don&#39;t need to specify <code>Guid.NewGuid()</code> yourself:</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseEntity<span class="token punctuation">&lt;</span>UserGroup<span class="token punctuation">,</span> Guid<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Define an entity type with multiple primary keys. You can override the field names in the static constructor:</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseEntity<span class="token punctuation">&lt;</span>User2<span class="token punctuation">,</span> Guid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token function">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        User2<span class="token punctuation">.</span>Orm<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConfigEntity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>PkId1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">&quot;UserId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>PkId2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">&quot;Index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Username <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crud-operations" tabindex="-1"><a class="header-anchor" href="#crud-operations" aria-hidden="true">#</a> CRUD Operations</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Add</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserGroup</span> <span class="token punctuation">{</span> GroupName <span class="token operator">=</span> <span class="token string">&quot;Group One&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Update</span>
item<span class="token punctuation">.</span>GroupName <span class="token operator">=</span> <span class="token string">&quot;Group Two&quot;</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add or Update</span>
item<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Soft Delete</span>
item<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Restore Soft Deleted</span>
item<span class="token punctuation">.</span><span class="token function">Restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get object by primary key</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> UserGroup<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Query Data</span>
<span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> UserGroup<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EntityType.Select</code> is a query object and operates similarly to <code>FreeSql.ISelect</code>.</p><p>When performing multi-table queries, the soft delete condition will be appended to each table.</p>`,8),m={href:"https://github.com/dotnetcore/FreeSql/tree/master/Examples/base_entity",target:"_blank",rel:"noopener noreferrer"};function v(y,b){const e=t("RouterLink"),c=t("ExternalLinkIcon");return l(),u("div",null,[d,n("blockquote",null,[n("p",null,[s("For more entity attribute configurations, see "),a(e,{to:"/en/guide/entity-attribute.html"},{default:p(()=>[s("Entity Attributes")]),_:1})])]),k,n("blockquote",null,[n("p",null,[s("For more query methods, refer to "),a(e,{to:"/en/guide/select.html"},{default:p(()=>[s("Queries")]),_:1})])]),n("p",null,[s("Example project: "),n("a",m,[s("https://github.com/dotnetcore/FreeSql/tree/master/Examples/base_entity"),a(c)])])])}const f=i(r,[["render",v],["__file","BaseEntity.html.vue"]]);export{f as default};
