import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as p,a as n,d as s,w as a,b as t,e as u}from"./app-4f78730c.js";const d={},r=n("h1",{id:"查询",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#查询","aria-hidden":"true"},"#"),t(" 查询")],-1),k=n("p",null,"FreeSql 在查询数据下足了功夫，链式查询语法、多表查询、表达式函数支持得非常到位。",-1),h=n("thead",null,[n("tr",null,[n("th"),n("th"),n("th")])],-1),m=n("td",null,null,-1),_=n("td",null,null,-1),v=u(`<h2 id="sqlserver-withlock-withindex" tabindex="-1"><a class="header-anchor" href="#sqlserver-withlock-withindex" aria-hidden="true">#</a> SqlServer WithLock/WithIndex</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock <span class="token operator">|</span> SqlServerLock<span class="token punctuation">.</span>NoWait<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock, NoWait)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(index=idx_01, NoLock)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多表：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">InnerJoin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>x <span class="token operator">==</span> b<span class="token punctuation">.</span>xx<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;idx_02&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ..</span>
<span class="token comment">//FROM [Region] a With(index=idx_01, NoLock) </span>
<span class="token comment">//INNER JOIN [T2] b With(index=idx_02) ON a.[x] = b.[xx]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局设置 NoLock：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//所有实体类生效</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//【指定】实体类生效</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Region</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特别介绍-wheredynamicfilter" tabindex="-1"><a class="header-anchor" href="#特别介绍-wheredynamicfilter" aria-hidden="true">#</a> 特别介绍 WhereDynamicFilter</h2>`,7),b={href:"https://www.cnblogs.com/FreeSql/p/16485310.html",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"ISelect.WhereDynamicFilter 方法实现动态过滤条件（与前端交互），支持的操作符：",-1),g=n("li",null,"Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith：包含/不包含，like '%xx%'，或者 like 'xx%'，或者 like '%xx'",-1),f=n("li",null,"Equal/NotEqual：等于/不等于",-1),L=n("li",null,"GreaterThan/GreaterThanOrEqual：大于/大于等于",-1),y=n("li",null,"LessThan/LessThanOrEqual：小于/小于等于",-1),T=n("li",null,"Range：范围查询",-1),S=n("li",null,"DateRange：日期范围，有特殊处理 value[1] + 1",-1),x=n("li",null,"Any/NotAny：是否符合 value 中任何一项（直白的说是 SQL IN）",-1),w={href:"https://github.com/dotnetcore/FreeSql/discussions/1550",target:"_blank",rel:"noopener noreferrer"},W=u(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DynamicFilterInfo</span> dyfilter <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFilterInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">@&quot;
{
  &quot;&quot;Logic&quot;&quot;: &quot;&quot;And&quot;&quot;,
  &quot;&quot;Filters&quot;&quot;:
  [
    { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 1 },
    {
      &quot;&quot;Logic&quot;&quot;: &quot;&quot;Or&quot;&quot;,
      &quot;&quot;Filters&quot;&quot;:
      [
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 2 },
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 3 }
      ]
    }
  ]
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereDynamicFilter</span><span class="token punctuation">(</span>dyfilter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//WHERE id = 1 AND (id = 2 OR id = 3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>动态排序：ISelect.OrderByPropertyName(&quot;Parent.Code&quot;)</p></blockquote><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2>`,3),I=n("thead",null,[n("tr",null,[n("th",null,"方法"),n("th",null,"返回值"),n("th",null,"参数"),n("th",null,"描述"),n("th")])],-1),N=n("tr",null,[n("td",null,"ToSql"),n("td",null,"string"),n("td"),n("td",null,"返回即将执行的 SQL 语句"),n("td")],-1),E=n("tr",null,[n("td",null,"ToList"),n("td",null,"List<T1>"),n("td"),n("td",null,"执行 SQL 查询，返回 T1 实体所有字段的记录，若存在导航属性则一起查询返回，记录不存在时返回 Count 为 0 的列表"),n("td")],-1),O=n("tr",null,[n("td",null,"ToList<T>"),n("td",null,"List<T>"),n("td",null,"Lambda"),n("td",null,"执行 SQL 查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表"),n("td")],-1),R=n("tr",null,[n("td",null,"ToList<T>"),n("td",null,"List<T>"),n("td",null,"string field"),n("td",null,"执行 SQL 查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表"),n("td")],-1),F=n("tr",null,[n("td",null,"ToOne"),n("td",null,"T1"),n("td"),n("td",null,"执行 SQL 查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null"),n("td")],-1),C=n("tr",null,[n("td",null,"ToAggregate<T>"),n("td",null,"List<T>"),n("td",null,"Lambda"),n("td",null,"执行 SQL 查询，返回指定字段的聚合结果（适合不需要 GroupBy 的场景）"),n("td")],-1),D=n("tr",null,[n("td",null,"Any"),n("td",null,"bool"),n("td"),n("td",null,"执行 SQL 查询，是否有记录"),n("td")],-1),B=n("tr",null,[n("td",null,"Sum"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"指定一个列求和"),n("td")],-1),Q=n("tr",null,[n("td",null,"Min"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"指定一个列求最小值"),n("td")],-1),A=n("tr",null,[n("td",null,"Max"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"指定一个列求最大值"),n("td")],-1),G=n("tr",null,[n("td",null,"Avg"),n("td",null,"T"),n("td",null,"Lambda"),n("td",null,"指定一个列求平均值"),n("td")],-1),J=n("tr",null,[n("td",null,"【分页】"),n("td"),n("td"),n("td"),n("td")],-1),P=n("tr",null,[n("td",null,"Count"),n("td",null,"long"),n("td"),n("td",null,"查询的记录数量"),n("td")],-1),M=n("tr",null,[n("td",null,"Count"),n("td",null,"<this>"),n("td",null,"out long"),n("td",null,"查询的记录数量，以参数 out 形式返回"),n("td")],-1),V=n("tr",null,[n("td",null,"Skip"),n("td",null,"<this>"),n("td",null,"int offset"),n("td",null,"查询向后偏移行数"),n("td")],-1),z=n("tr",null,[n("td",null,"Offset"),n("td",null,"<this>"),n("td",null,"int offset"),n("td",null,"查询向后偏移行数"),n("td")],-1),H=n("tr",null,[n("td",null,"Limit"),n("td",null,"<this>"),n("td",null,"int limit"),n("td",null,"查询多少条数据"),n("td")],-1),U=n("tr",null,[n("td",null,"Take"),n("td",null,"<this>"),n("td",null,"int limit"),n("td",null,"查询多少条数据"),n("td")],-1),j=n("tr",null,[n("td",null,"Page"),n("td",null,"<this>"),n("td",null,"int pageIndex, int pageSize"),n("td",null,"分页"),n("td")],-1),K=n("tr",null,[n("td",null,"【条件】"),n("td"),n("td"),n("td"),n("td")],-1),X=n("tr",null,[n("td",null,"Where"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"支持多表查询表达式，多次使用相当于 AND"),n("td")],-1),Y=n("tr",null,[n("td",null,"WhereIf"),n("td",null,"<this>"),n("td",null,"bool, Lambda"),n("td",null,"支持多表查询表达式"),n("td")],-1),Z=n("td",null,"Where",-1),$=n("td",null,"<this>",-1),nn=n("td",null,"string, parms",-1),tn=n("td",null,null,-1),sn=n("tr",null,[n("td",null,"WhereIf"),n("td",null,"<this>"),n("td",null,"bool, string, parms"),n("td",null,'原生 sql 语法条件，WhereIf(true, "id = @id", new { id = 1 }'),n("td")],-1),ln=n("tr",null,[n("td",null,"WhereCascade"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"实现多表查询时，向每个表中附加条件"),n("td")],-1),an=n("tr",null,[n("td",null,"WhereDynamicFilter"),n("td",null,"<this>"),n("td",null,"DynamicFilterInfo"),n("td",null,"动态过滤条件(与前端交互)"),n("td")],-1),en=n("tr",null,[n("td",null,"【分组】"),n("td"),n("td"),n("td"),n("td")],-1),on=n("tr",null,[n("td",null,"GroupBy"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"按选择的列分组，GroupBy(a => a.Name)"),n("td",null,"GroupBy(a => new{a.Name,a.Time})")],-1),un=n("tr",null,[n("td",null,"GroupBy"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'按原生 sql 语法分组，GroupBy("concat(name, @cc)", new { cc = 1 })'),n("td")],-1),cn=n("tr",null,[n("td",null,"Having"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'按原生 sql 语法聚合条件过滤，Having("count(name) = @cc", new { cc = 1 })'),n("td")],-1),pn=n("tr",null,[n("td",null,"Disdinct"),n("td",null,"<this>"),n("td"),n("td",null,".Distinct().ToList(x => x.GroupName) 是对指定字段"),n("td")],-1),dn=n("tr",null,[n("td",null,"【排序】"),n("td"),n("td"),n("td"),n("td")],-1),rn=n("tr",null,[n("td",null,"OrderBy"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"按列排序，OrderBy(a => a.Time)，可多次使用"),n("td")],-1),kn=n("tr",null,[n("td",null,"OrderByDescending"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"按列倒向排序，OrderByDescending(a => a.Time)"),n("td")],-1),hn=n("tr",null,[n("td",null,"OrderBy"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'按原生 sql 语法排序，OrderBy("count(name) + @cc", new { cc = 1 })'),n("td")],-1),mn=n("tr",null,[n("td",null,"OrderByPropertyName"),n("td",null,"string, bool"),n("td",null,"按属性名字符串排序（支持导航属性）"),n("td"),n("td")],-1),_n=n("tr",null,[n("td",null,"【联表】"),n("td"),n("td"),n("td"),n("td")],-1),vn=n("tr",null,[n("td",null,"LeftJoin"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"左联查询，可使用导航属性，或指定关联的实体类型"),n("td")],-1),bn=n("tr",null,[n("td",null,"InnerJoin"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"联接查询，可使用导航属性，或指定关联的实体类型"),n("td")],-1),qn=n("tr",null,[n("td",null,"RightJoin"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"右联查询，可使用导航属性，或指定关联的实体类型"),n("td")],-1),gn=n("tr",null,[n("td",null,"LeftJoin"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'左联查询，使用原生 sql 语法，LeftJoin("type b on b.id = a.id and b.clicks > @clicks", new { clicks = 1 })'),n("td")],-1),fn=n("tr",null,[n("td",null,"InnerJoin"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'联接查询，使用原生 sql 语法，InnerJoin("type b on b.id = a.id and b.clicks > @clicks", new { clicks = 1 })'),n("td")],-1),Ln=n("tr",null,[n("td",null,"RightJoin"),n("td",null,"<this>"),n("td",null,"string, parms"),n("td",null,'右联查询，使用原生 sql 语法，RightJoin("type b on b.id = a.id and b.clicks > @clicks", new { clicks = 1 })'),n("td")],-1),yn=n("tr",null,[n("td",null,"From"),n("td",null,"<this>"),n("td",null,"Lambda"),n("td",null,"多表查询，3 个表以上使用非常方便，目前设计最大支持 10 个表"),n("td")],-1),Tn=n("tr",null,[n("td",null,"FromQuery"),n("td",null,"ISelect<T1, T2>"),n("td",null,"ISelect<T2>"),n("td",null,"单表连成双表查询"),n("td")],-1),Sn=n("tr",null,[n("td",null,"WithTempQuery"),n("td",null,"ISelect<T1>"),n("td",null,"Lambda"),n("td",null,"将单表或多表查询嵌套成单表查询"),n("td")],-1),xn=n("tr",null,[n("td",null,"WithMemory"),n("td",null,"ISelect<T1>"),n("td",null,"List<T1>"),n("td",null,"使用内存数据查询"),n("td")],-1),wn=n("tr",null,[n("td",null,"UnionAll"),n("td",null,"ISelect<T1>"),n("td",null,"ISelect<T1>[]"),n("td",null,"联合查询"),n("td")],-1),Wn=n("tr",null,[n("td",null,"【其他】"),n("td"),n("td"),n("td"),n("td")],-1),In=n("tr",null,[n("td",null,"As"),n("td",null,"<this>"),n("td",null,'string alias = "a"'),n("td",null,"指定别名"),n("td")],-1),Nn=n("tr",null,[n("td",null,"Master"),n("td",null,"<this>"),n("td"),n("td",null,"指定从主库查询（默认查询从库）"),n("td")],-1),En=n("tr",null,[n("td",null,"CommandTimeout"),n("td",null,"<this>"),n("td",null,"int"),n("td",null,"命令超时设置(秒)"),n("td")],-1),On=n("tr",null,[n("td",null,"WithTransaction"),n("td",null,"<this>"),n("td",null,"DbTransaction"),n("td",null,"设置事务对象"),n("td")],-1),Rn=n("tr",null,[n("td",null,"WithConnection"),n("td",null,"<this>"),n("td",null,"DbConnection"),n("td",null,"设置连接对象"),n("td")],-1),Fn=n("tr",null,[n("td",null,"WithLock"),n("td",null,"<this>"),n("td",null,"Enum"),n("td",null,"SqlServer NoLock 等特有的设置"),n("td")],-1),Cn=n("tr",null,[n("td",null,"ForUpdate"),n("td",null,"<this>"),n("td",null,"bool"),n("td",null,"排他更新锁，对不同的数据库已作适配，详细说明见注释"),n("td")],-1),Dn=n("tr",null,[n("td",null,"AsQueryable"),n("td",null,"IQueryable"),n("td"),n("td",null,"将 ISelect 转换为 IQueryable，此方法主要用于扩展，比如：abp IRepository GetAll() 接口方法需要返回 IQueryable 对象。注意：IQueryable 方法污染较为严重，请尽量避免此转换"),n("td")],-1),Bn=n("tr",null,[n("td",null,"ToTreeList()"),n("td",null,"List<TEntity>"),n("td",null,"无"),n("td",null,"将父子关系的数据以 TreeList 的形式返回"),n("td")],-1),Qn=n("tr",null,[n("td",null,"AsTreeCte()"),n("td",null,"ISelect"),n("td",null,"(up, pathSelector, level)"),n("td",null,"递归查询父子关系表"),n("td")],-1);function An(Gn,Jn){const l=o("RouterLink"),e=o("ExternalLinkIcon");return c(),p("div",null,[r,k,n("table",null,[h,n("tbody",null,[n("tr",null,[n("td",null,[s(l,{to:"/guide/paging.html"},{default:a(()=>[t("《分页查询》")]),_:1})]),n("td",null,[s(l,{to:"/guide/repository.html"},{default:a(()=>[t("《仓储层 Repository》")]),_:1})]),n("td",null,[s(l,{to:"/guide/read-write-splitting.html"},{default:a(()=>[t("《读写分离》")]),_:1})])]),n("tr",null,[n("td",null,[s(l,{to:"/guide/select-single-table.html"},{default:a(()=>[t("《单表查询》")]),_:1})]),n("td",null,[s(l,{to:"/guide/filters.html"},{default:a(()=>[t("《过滤器》")]),_:1})]),n("td",null,[s(l,{to:"/guide/linq-to-sql.html"},{default:a(()=>[t("《LinqToSql》")]),_:1})])]),n("tr",null,[n("td",null,[s(l,{to:"/guide/select-multi-table.html"},{default:a(()=>[t("《多表查询》")]),_:1})]),n("td",null,[s(l,{to:"/guide/select-lazy-loading.html"},{default:a(()=>[t("《延时加载》")]),_:1})]),n("td",null,[s(l,{to:"/guide/performance.html"},{default:a(()=>[t("《性能》")]),_:1})])]),n("tr",null,[n("td",null,[s(l,{to:"/guide/withtempquery.html"},{default:a(()=>[t("《嵌套查询》")]),_:1})]),n("td",null,[s(l,{to:"/guide/select-include.html"},{default:a(()=>[t("《贪婪加载》")]),_:1})]),n("td",null,[s(l,{to:"/guide/sharding.html"},{default:a(()=>[t("《分表分库》")]),_:1})])]),n("tr",null,[n("td",null,[s(l,{to:"/guide/select-group-by.html"},{default:a(()=>[t("《分组聚合查询》")]),_:1})]),n("td",null,[s(l,{to:"/guide/expression-function.html"},{default:a(()=>[t("《表达式函数》")]),_:1})]),n("td",null,[s(l,{to:"/guide/multi-tenancy.html"},{default:a(()=>[t("《多租户》")]),_:1})])]),n("tr",null,[n("td",null,[s(l,{to:"/guide/select-return-data.html"},{default:a(()=>[t("《返回数据》")]),_:1})]),m,_])])]),v,n("p",null,[n("a",b,[t("《高效理解 FreeSql WhereDynamicFilter，深入了解设计初衷》"),s(e)])]),q,n("ul",null,[g,f,L,y,T,S,x,n("li",null,[t("Custom："),n("a",w,[t("自定义解析"),s(e)])])]),W,n("table",null,[I,n("tbody",null,[N,E,O,R,F,C,D,B,Q,A,G,J,P,M,V,z,H,U,j,K,X,Y,n("tr",null,[Z,$,nn,n("td",null,[t('原生 sql 语法条件，Where("id = @id", new { id = 1 } ,'),s(l,{to:"/guide/ado.html#%E5%8F%82%E6%95%B0%E5%8C%96"},{default:a(()=>[t("注意前缀@,根据具体数据库决定")]),_:1}),t(" 其他地方不再说明。同理 )")]),tn]),sn,ln,an,en,on,un,cn,pn,dn,rn,kn,hn,mn,_n,vn,bn,qn,gn,fn,Ln,yn,Tn,Sn,xn,wn,Wn,In,Nn,En,On,Rn,Fn,Cn,Dn,Bn,Qn])])])}const Vn=i(d,[["render",An],["__file","select.html.vue"]]);export{Vn as default};
