import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,o as p,c,a as t,b as n,d as a,e}from"./app-BC0_DOXp.js";const i={},l=e(`<h1 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h1><p>FreeSql 在查询数据下足了功夫，链式风格、多表查询、表达式函数、导航属性支持得非常到位。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="paging">《分页查询》</a></td><td><a href="repository">《仓储层 Repository》</a></td><td><a href="read-write-splitting">《读写分离》</a></td></tr><tr><td><a href="select-single-table">《单表查询》</a></td><td><a href="filters">《过滤器》</a></td><td><a href="linq-to-sql">《LinqToSql》</a></td></tr><tr><td><a href="select-multi-table">《多表查询》</a></td><td><a href="select-lazy-loading">《延时加载》</a></td><td><a href="performance">《性能》</a></td></tr><tr><td><a href="withtempquery">《嵌套查询》</a></td><td><a href="select-include">《贪婪加载》</a></td><td><a href="sharding">《分表分库》</a></td></tr><tr><td><a href="select-group-by">《分组聚合查询》</a></td><td><a href="expression-function">《表达式函数》</a></td><td><a href="multi-tenancy">《多租户》</a></td></tr><tr><td><a href="select-return-data">《返回数据》</a></td><td></td><td></td></tr></tbody></table><h2 id="表达式函数" tabindex="-1"><a class="header-anchor" href="#表达式函数" aria-hidden="true">#</a> 表达式函数</h2><table><thead><tr><th>说明</th><th>Lambda 表达式</th><th>SQL</th></tr></thead><tbody><tr><td>in</td><td>Where(a =&gt; new [] { 1,2,3 }.Contains(a.Id))</td><td>[Id] in (1,2,3)</td></tr><tr><td>not in</td><td>Where(a =&gt; !new [] { 1,2,3 }.Contains(a.Id))</td><td>[Id] not in (1,2,3)</td></tr><tr><td>多列in</td><td>Where(a =&gt; list.Any(b =&gt; b.Item1 == a.Id &amp;&amp; b.Item2 == a.ct1))</td><td>([Id]=1 and [ct1]=1) or ([Id]=2 and [ct1]=2)</td></tr><tr><td>like &#39;%xxx%&#39;</td><td>Where(a =&gt; a.Title.Contains(&quot;xxx&quot;))</td><td>[Title] like &#39;%xxx%&#39;</td></tr><tr><td>like &#39;xxx%&#39;</td><td>Where(a =&gt; a.Title.StartsWith(&quot;xxx&quot;))</td><td>[Title] like &#39;xxx%&#39;</td></tr><tr><td>like &#39;%xxx&#39;</td><td>Where(a =&gt; a.Title.EndsWith(&quot;xxx&quot;))</td><td>[Title] like &#39;%xxx&#39;</td></tr><tr><td>日期范围</td><td>Where(a =&gt; a.Time.Between(time1, time2))</td><td>[Time] between @time1 and @time2</td></tr><tr><td>是否存在</td><td>.Any()</td><td>select 1 from ...</td></tr><tr><td>总数</td><td>.Count()</td><td>select count(*) from ...</td></tr><tr><td>求和</td><td>.Sum(a =&gt; a.Score)</td><td>select sum([Score]) from ...</td></tr><tr><td>平均</td><td>.Avg(a =&gt; a.Score)</td><td>select avg([Score]) from ...</td></tr><tr><td>最大值</td><td>.Max(a =&gt; a.Score)</td><td>select max([Score]) from ...</td></tr><tr><td>最小值</td><td>.Min(a =&gt; a.Score)</td><td>select min([Score]) from ...</td></tr></tbody></table><p>更详细请前往<a href="expression-function">《表达式函数》</a></p><h2 id="sqlserver-withlock-withindex" tabindex="-1"><a class="header-anchor" href="#sqlserver-withlock-withindex" aria-hidden="true">#</a> SqlServer WithLock/WithIndex</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock <span class="token operator">|</span> SqlServerLock<span class="token punctuation">.</span>NoWait<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock, NoWait)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(index=idx_01, NoLock)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多表：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">InnerJoin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>x <span class="token operator">==</span> b<span class="token punctuation">.</span>xx<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;idx_02&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ..</span>
<span class="token comment">//FROM [Region] a With(index=idx_01, NoLock) </span>
<span class="token comment">//INNER JOIN [T2] b With(index=idx_02) ON a.[x] = b.[xx]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局设置 NoLock：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//所有实体类生效</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//【指定】实体类生效</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Region</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态过滤-wheredynamicfilter" tabindex="-1"><a class="header-anchor" href="#动态过滤-wheredynamicfilter" aria-hidden="true">#</a> 动态过滤 WhereDynamicFilter</h2>`,13),u={href:"https://www.cnblogs.com/FreeSql/p/16485310.html",target:"_blank",rel:"noopener noreferrer"},r=t("p",null,"ISelect.WhereDynamicFilter 方法实现动态过滤条件（与前端交互），支持的操作符：",-1),k=t("li",null,"Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith：包含/不包含，like '%xx%'，或者 like 'xx%'，或者 like '%xx'",-1),m=t("li",null,"Equal/NotEqual：等于/不等于",-1),h=t("li",null,"GreaterThan/GreaterThanOrEqual：大于/大于等于",-1),g=t("li",null,"LessThan/LessThanOrEqual：小于/小于等于",-1),v=t("li",null,"Range：范围查询",-1),b=t("li",null,"DateRange：日期范围，有特殊处理 value[1] + 1",-1),q=t("li",null,"Any/NotAny：是否符合 value 中任何一项（直白的说是 SQL IN）",-1),f={href:"https://github.com/dotnetcore/FreeSql/discussions/1550",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DynamicFilterInfo</span> dyfilter <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFilterInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">@&quot;
{
  &quot;&quot;Logic&quot;&quot;: &quot;&quot;And&quot;&quot;,
  &quot;&quot;Filters&quot;&quot;:
  [
    { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 1 },
    {
      &quot;&quot;Logic&quot;&quot;: &quot;&quot;Or&quot;&quot;,
      &quot;&quot;Filters&quot;&quot;:
      [
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 2 },
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 3 }
      ]
    }
  ]
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereDynamicFilter</span><span class="token punctuation">(</span>dyfilter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//WHERE id = 1 AND (id = 2 OR id = 3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>动态表名：ISelect.AsTable((t, old) =&gt; $&quot;{old}_201903&quot;)</p></blockquote><blockquote><p>动态排序：ISelect.OrderByPropertyName(&quot;Parent.Code&quot;)</p></blockquote><blockquote><p>动态返回：ISelect.ToDataTableByPropertyName(new string[] { &quot;Parent.Code&quot;, &quot;Id&quot; })</p></blockquote><blockquote><p>动态贪婪加载：ISelect.IncludeByPropertyName(&quot;Parent.Parent&quot;).IncludeByPropertyName(&quot;Parent.Childs&quot;)</p></blockquote><h2 id="克隆查询-iselect" tabindex="-1"><a class="header-anchor" href="#克隆查询-iselect" aria-hidden="true">#</a> 克隆查询 ISelect</h2><p>科普：csharp 7.0 支持本地函数，方法内再定义临时方法，这个特性向大家推荐，在很多时候都非常有效。</p><p>方法内还可以定义方法，那就称它：本地函数/嵌套方法。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">ISelect<span class="token punctuation">&lt;</span>AdmRoute<span class="token punctuation">&gt;</span></span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AdmRoute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Parent<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span>Parent_Id<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> Parent_Id<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ParentId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span>mn_Roles_Id<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> mn_Roles_Id<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> select1 <span class="token operator">=</span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> select2 <span class="token operator">=</span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    select1<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//此时 select2 不会附加 a.Status == 0 条件</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><table><thead><tr><th>方法</th><th>返回值</th><th>参数</th><th>描述</th><th></th></tr></thead><tbody><tr><td>ToSql</td><td>string</td><td></td><td>返回即将执行的 SQL 语句</td><td></td></tr><tr><td>ToList</td><td>List&lt;T1&gt;</td><td></td><td>执行 SQL 查询，返回 T1 实体所有字段的记录，若存在导航属性则一起查询返回，记录不存在时返回 Count 为 0 的列表</td><td></td></tr><tr><td>ToList&lt;T&gt;</td><td>List&lt;T&gt;</td><td>Lambda</td><td>执行 SQL 查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表</td><td></td></tr><tr><td>ToList&lt;T&gt;</td><td>List&lt;T&gt;</td><td>string field</td><td>执行 SQL 查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表</td><td></td></tr><tr><td>ToOne</td><td>T1</td><td></td><td>执行 SQL 查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null</td><td></td></tr><tr><td>ToAggregate&lt;T&gt;</td><td>List&lt;T&gt;</td><td>Lambda</td><td>执行 SQL 查询，返回指定字段的聚合结果（适合不需要 GroupBy 的场景）</td><td></td></tr><tr><td>Any</td><td>bool</td><td></td><td>执行 SQL 查询，是否有记录</td><td></td></tr><tr><td>Sum</td><td>T</td><td>Lambda</td><td>指定一个列求和</td><td></td></tr><tr><td>Min</td><td>T</td><td>Lambda</td><td>指定一个列求最小值</td><td></td></tr><tr><td>Max</td><td>T</td><td>Lambda</td><td>指定一个列求最大值</td><td></td></tr><tr><td>Avg</td><td>T</td><td>Lambda</td><td>指定一个列求平均值</td><td></td></tr><tr><td>【分页】</td><td></td><td></td><td></td><td></td></tr><tr><td>Count</td><td>long</td><td></td><td>查询的记录数量</td><td></td></tr><tr><td>Count</td><td>&lt;this&gt;</td><td>out long</td><td>查询的记录数量，以参数 out 形式返回</td><td></td></tr><tr><td>Skip</td><td>&lt;this&gt;</td><td>int offset</td><td>查询向后偏移行数</td><td></td></tr><tr><td>Offset</td><td>&lt;this&gt;</td><td>int offset</td><td>查询向后偏移行数</td><td></td></tr><tr><td>Limit</td><td>&lt;this&gt;</td><td>int limit</td><td>查询多少条数据</td><td></td></tr><tr><td>Take</td><td>&lt;this&gt;</td><td>int limit</td><td>查询多少条数据</td><td></td></tr><tr><td>Page</td><td>&lt;this&gt;</td><td>int pageIndex, int pageSize</td><td>分页</td><td></td></tr><tr><td>【条件】</td><td></td><td></td><td></td><td></td></tr><tr><td>Where</td><td>&lt;this&gt;</td><td>Lambda</td><td>支持多表查询表达式，多次使用相当于 AND</td><td></td></tr><tr><td>WhereIf</td><td>&lt;this&gt;</td><td>bool, Lambda</td><td>支持多表查询表达式</td><td></td></tr><tr><td>Where</td><td>&lt;this&gt;</td><td>string, parms</td><td>原生 sql 语法条件，Where(&quot;id = @id&quot;, new { id = 1 } ,<a href="ado#%E5%8F%82%E6%95%B0%E5%8C%96">注意前缀@,根据具体数据库决定</a> 其他地方不再说明。同理 )</td><td></td></tr><tr><td>WhereIf</td><td>&lt;this&gt;</td><td>bool, string, parms</td><td>原生 sql 语法条件，WhereIf(true, &quot;id = @id&quot;, new { id = 1 }</td><td></td></tr><tr><td>WhereCascade</td><td>&lt;this&gt;</td><td>Lambda</td><td>实现多表查询时，向每个表中附加条件</td><td></td></tr><tr><td>WhereDynamicFilter</td><td>&lt;this&gt;</td><td>DynamicFilterInfo</td><td>动态过滤条件(与前端交互)</td><td></td></tr><tr><td>【分组】</td><td></td><td></td><td></td><td></td></tr><tr><td>GroupBy</td><td>&lt;this&gt;</td><td>Lambda</td><td>按选择的列分组，GroupBy(a =&gt; a.Name)</td><td>GroupBy(a =&gt; new{a.Name,a.Time})</td></tr><tr><td>GroupBy</td><td>&lt;this&gt;</td><td>string, parms</td><td>按原生 sql 语法分组，GroupBy(&quot;concat(name, @cc)&quot;, new { cc = 1 })</td><td></td></tr><tr><td>Having</td><td>&lt;this&gt;</td><td>string, parms</td><td>按原生 sql 语法聚合条件过滤，Having(&quot;count(name) = @cc&quot;, new { cc = 1 })</td><td></td></tr><tr><td>Disdinct</td><td>&lt;this&gt;</td><td></td><td>.Distinct().ToList(x =&gt; x.GroupName) 是对指定字段</td><td></td></tr><tr><td>【排序】</td><td></td><td></td><td></td><td></td></tr><tr><td>OrderBy</td><td>&lt;this&gt;</td><td>Lambda</td><td>按列排序，OrderBy(a =&gt; a.Time)，可多次使用</td><td></td></tr><tr><td>OrderByDescending</td><td>&lt;this&gt;</td><td>Lambda</td><td>按列倒向排序，OrderByDescending(a =&gt; a.Time)</td><td></td></tr><tr><td>OrderBy</td><td>&lt;this&gt;</td><td>string, parms</td><td>按原生 sql 语法排序，OrderBy(&quot;count(name) + @cc&quot;, new { cc = 1 })</td><td></td></tr><tr><td>OrderByPropertyName</td><td>string, bool</td><td>按属性名字符串排序（支持导航属性）</td><td></td><td></td></tr><tr><td>【联表】</td><td></td><td></td><td></td><td></td></tr><tr><td>LeftJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>左联查询，可使用导航属性，或指定关联的实体类型</td><td></td></tr><tr><td>InnerJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>联接查询，可使用导航属性，或指定关联的实体类型</td><td></td></tr><tr><td>RightJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>右联查询，可使用导航属性，或指定关联的实体类型</td><td></td></tr><tr><td>LeftJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>左联查询，使用原生 sql 语法，LeftJoin(&quot;type b on b.id = a.id and b.clicks &gt; @clicks&quot;, new { clicks = 1 })</td><td></td></tr><tr><td>InnerJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>联接查询，使用原生 sql 语法，InnerJoin(&quot;type b on b.id = a.id and b.clicks &gt; @clicks&quot;, new { clicks = 1 })</td><td></td></tr><tr><td>RightJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>右联查询，使用原生 sql 语法，RightJoin(&quot;type b on b.id = a.id and b.clicks &gt; @clicks&quot;, new { clicks = 1 })</td><td></td></tr><tr><td>From</td><td>&lt;this&gt;</td><td>Lambda</td><td>多表查询，3 个表以上使用非常方便，目前设计最大支持 10 个表</td><td></td></tr><tr><td>FromQuery</td><td>ISelect&lt;T1, T2&gt;</td><td>ISelect&lt;T2&gt;</td><td>单表连成双表查询</td><td></td></tr><tr><td>WithTempQuery</td><td>ISelect&lt;T1&gt;</td><td>Lambda</td><td>将单表或多表查询嵌套成单表查询</td><td></td></tr><tr><td>WithMemory</td><td>ISelect&lt;T1&gt;</td><td>List&lt;T1&gt;</td><td>使用内存数据查询</td><td></td></tr><tr><td>UnionAll</td><td>ISelect&lt;T1&gt;</td><td>ISelect&lt;T1&gt;[]</td><td>联合查询</td><td></td></tr><tr><td>【其他】</td><td></td><td></td><td></td><td></td></tr><tr><td>As</td><td>&lt;this&gt;</td><td>string alias = &quot;a&quot;</td><td>指定别名</td><td></td></tr><tr><td>Master</td><td>&lt;this&gt;</td><td></td><td>指定从主库查询（默认查询从库）</td><td></td></tr><tr><td>CommandTimeout</td><td>&lt;this&gt;</td><td>int</td><td>命令超时设置(秒)</td><td></td></tr><tr><td>WithTransaction</td><td>&lt;this&gt;</td><td>DbTransaction</td><td>设置事务对象</td><td></td></tr><tr><td>WithConnection</td><td>&lt;this&gt;</td><td>DbConnection</td><td>设置连接对象</td><td></td></tr><tr><td>WithLock</td><td>&lt;this&gt;</td><td>Enum</td><td>SqlServer NoLock 等特有的设置</td><td></td></tr><tr><td>ForUpdate</td><td>&lt;this&gt;</td><td>bool</td><td>排他更新锁，对不同的数据库已作适配，详细说明见注释</td><td></td></tr><tr><td>AsQueryable</td><td>IQueryable</td><td></td><td>将 ISelect 转换为 IQueryable，此方法主要用于扩展，比如：abp IRepository GetAll() 接口方法需要返回 IQueryable 对象。注意：IQueryable 方法污染较为严重，请尽量避免此转换</td><td></td></tr><tr><td>ToTreeList()</td><td>List&lt;TEntity&gt;</td><td>无</td><td>将父子关系的数据以 TreeList 的形式返回</td><td></td></tr><tr><td>AsTreeCte()</td><td>ISelect</td><td>(up, pathSelector, level)</td><td>递归查询父子关系表</td><td></td></tr></tbody></table>`,11);function L(x,T){const s=d("ExternalLinkIcon");return p(),c("div",null,[l,t("p",null,[t("a",u,[n("《高效理解 FreeSql WhereDynamicFilter，深入了解设计初衷》"),a(s)])]),r,t("ul",null,[k,m,h,g,v,b,q,t("li",null,[n("Custom："),t("a",f,[n("自定义解析"),a(s)])])]),y])}const _=o(i,[["render",L],["__file","select.html.vue"]]);export{_ as default};
