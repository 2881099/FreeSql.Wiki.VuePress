import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as o,a as n,b as s,d as c,e as l}from"./app-UBewaJPQ.js";const i={},u=n("h1",{id:"freeredis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#freeredis","aria-hidden":"true"},"#"),s(" FreeRedis")],-1),r=n("p",null,[n("code",null,"CSRedisCore"),s(" 是 .NETFramework 4.0 及以上 访问 redis-server 的客户端组件，也是 FreeSql 作者早年发布的 nuget 版本。")],-1),d=n("p",null,[s("后来重构了更简易的 "),n("code",null,"FreeRedis"),s("，目前推荐大家使用 "),n("code",null,"FreeRedis"),s("，支持几乎所有 .NET 平台和 AOT。")],-1),k={href:"https://github.com/2881099/FreeRedis",target:"_blank",rel:"noopener noreferrer"},v=l(`<ul><li>🌈 所有方法名与 redis-cli 保持一致</li><li>🌌 支持 Redis 集群（服务端要求 3.2 及以上版本）</li><li>⛳ 支持 Redis 哨兵模式</li><li>🎣 支持主从分离（Master-Slave）</li><li>📡 支持发布订阅（Pub-Sub）</li><li>📃 支持 Redis Lua 脚本</li><li>💻 支持管道（Pipeline）</li><li>📰 支持事务</li><li>🌴 支持 GEO 命令（服务端要求 3.2 及以上版本）</li><li>🌲 支持 STREAM 类型命令（服务端要求 5.0 及以上版本）</li><li>⚡ 支持本地缓存（Client-side-cahing，服务端要求 6.0 及以上版本）</li><li>🌳 支持 Redis 6 的 RESP3 协议</li></ul><h2 id="🚀-快速入门" tabindex="-1"><a class="header-anchor" href="#🚀-快速入门" aria-hidden="true">#</a> 🚀 快速入门</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisClient</span> cli <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:6379,password=123,defaultDatabase=13&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//cli.Serialize = obj =&gt; JsonConvert.SerializeObject(obj);</span>
<span class="token comment">//cli.Deserialize = (json, type) =&gt; JsonConvert.DeserializeObject(json, type);</span>
cli<span class="token punctuation">.</span>Notice <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印命令日志</span>

cli<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cli<span class="token punctuation">.</span><span class="token function">MSet</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> value1 <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> vals <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">MGet</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>支持 STRING、HASH、LIST、SET、ZSET、BITMAP、HyperLogLog、GEO、Stream 以及布隆过滤器等。</p></blockquote><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:right;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">protocol</td><td style="text-align:right;">RESP2</td><td style="text-align:left;">若使用 RESP3 协议，你需要 Redis 6.0 环境</td></tr><tr><td style="text-align:left;">user</td><td style="text-align:right;">&lt;empty&gt;</td><td style="text-align:left;">Redis 服务端用户名，要求 Redis 6.0 环境</td></tr><tr><td style="text-align:left;">password</td><td style="text-align:right;">&lt;empty&gt;</td><td style="text-align:left;">Redis 服务端密码</td></tr><tr><td style="text-align:left;">defaultDatabase</td><td style="text-align:right;">0</td><td style="text-align:left;">Redis 服务端数据库</td></tr><tr><td style="text-align:left;">max poolsize</td><td style="text-align:right;">100</td><td style="text-align:left;">连接池最大连接数</td></tr><tr><td style="text-align:left;">min poolsize</td><td style="text-align:right;">5</td><td style="text-align:left;">连接池最小连接数</td></tr><tr><td style="text-align:left;">idleTimeout</td><td style="text-align:right;">20000</td><td style="text-align:left;">连接池中元素的空闲时间（单位为毫秒 ms），适用于连接到远程服务器</td></tr><tr><td style="text-align:left;">connectTimeout</td><td style="text-align:right;">10000</td><td style="text-align:left;">连接超时，单位为毫秒（ms）</td></tr><tr><td style="text-align:left;">receiveTimeout</td><td style="text-align:right;">10000</td><td style="text-align:left;">接收超时，单位为毫秒（ms）</td></tr><tr><td style="text-align:left;">sendTimeout</td><td style="text-align:right;">10000</td><td style="text-align:left;">发送超时，单位为毫秒（ms）</td></tr><tr><td style="text-align:left;">encoding</td><td style="text-align:right;">utf-8</td><td style="text-align:left;">字符串字符集</td></tr><tr><td style="text-align:left;">retry</td><td style="text-align:right;">0</td><td style="text-align:left;">协议发生错误时，重试执行的次数</td></tr><tr><td style="text-align:left;">ssl</td><td style="text-align:right;">false</td><td style="text-align:left;">启用加密传输</td></tr><tr><td style="text-align:left;">name</td><td style="text-align:right;">&lt;empty&gt;</td><td style="text-align:left;">连接名，使用 CLIENT LIST 命令查看</td></tr><tr><td style="text-align:left;">prefix</td><td style="text-align:right;">&lt;empty&gt;</td><td style="text-align:left;"><code>key</code> 前辍，所有方法都会附带此前辍，cli.Set(prefix + &quot;key&quot;, 111);</td></tr></tbody></table><blockquote><p>IPv6: [fe80::b164:55b3:4b4f:7ce6%15]:6379</p></blockquote><h2 id="🎣-master-slave-读写分离" tabindex="-1"><a class="header-anchor" href="#🎣-master-slave-读写分离" aria-hidden="true">#</a> 🎣 Master-Slave (读写分离)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisClient</span> cli <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span>
    <span class="token string">&quot;127.0.0.1:6379,password=123,defaultDatabase=13&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;127.0.0.1:6380,password=123,defaultDatabase=13&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;127.0.0.1:6381,password=123,defaultDatabase=13&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>写入时连接 127.0.0.1:6379，读取时随机连接 6380 6381</p></blockquote><h2 id="⛳-redis-sentinel-哨兵高可用" tabindex="-1"><a class="header-anchor" href="#⛳-redis-sentinel-哨兵高可用" aria-hidden="true">#</a> ⛳ Redis Sentinel (哨兵高可用)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisClient</span> cli <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span>
    <span class="token string">&quot;mymaster,password=123&quot;</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;192.169.1.10:26379&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.169.1.11:26379&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.169.1.12:26379&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">true</span> <span class="token comment">//是否读写分离</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🌌-redis-cluster-集群" tabindex="-1"><a class="header-anchor" href="#🌌-redis-cluster-集群" aria-hidden="true">#</a> 🌌 Redis Cluster (集群)</h2><p>假如你有一个 Redis Cluster 集群，其中有三个主节点(7001-7003)、三个从节点(7004-7006)，则连接此集群的代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisClient</span> cli <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionStringBuilder<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;192.168.0.2:7001&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.0.2:7002&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.0.2:7003&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="⚡-client-side-cahing-本地缓存" tabindex="-1"><a class="header-anchor" href="#⚡-client-side-cahing-本地缓存" aria-hidden="true">#</a> ⚡ Client-side-cahing (本地缓存)</h2><blockquote><p>服务端要求 6.0 及以上版本</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>cli<span class="token punctuation">.</span><span class="token function">UseClientSideCaching</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClientSideCachingOptions</span>
<span class="token punctuation">{</span>
    <span class="token comment">//本地缓存的容量</span>
    Capacity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token comment">//过滤哪些键能被本地缓存</span>
    KeyFilter <span class="token operator">=</span> key <span class="token operator">=&gt;</span> key<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Interceptor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//检查长期未使用的缓存</span>
    CheckExpired <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> dt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">Subtract</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token operator">&gt;</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📡-subscribe-订阅" tabindex="-1"><a class="header-anchor" href="#📡-subscribe-订阅" aria-hidden="true">#</a> 📡 Subscribe (订阅)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span>cli<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> ondata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//wait .Dispose()</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ondata</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> channel<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">channel</span><span class="token punctuation">}</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">data</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📃-scripting-脚本" tabindex="-1"><a class="header-anchor" href="#📃-scripting-脚本" aria-hidden="true">#</a> 📃 Scripting (脚本)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> r1 <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">Eval</span><span class="token punctuation">(</span><span class="token string">&quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot;</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> r2 <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">Eval</span><span class="token punctuation">(</span><span class="token string">&quot;return {1,2,{3,&#39;Hello World!&#39;}}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">;</span>

cli<span class="token punctuation">.</span><span class="token function">Eval</span><span class="token punctuation">(</span><span class="token string">&quot;return redis.call(&#39;set&#39;,KEYS[1],&#39;bar&#39;)&quot;</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="💻-pipeline-管道" tabindex="-1"><a class="header-anchor" href="#💻-pipeline-管道" aria-hidden="true">#</a> 💻 Pipeline (管道)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pipe <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">StartPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    pipe<span class="token punctuation">.</span><span class="token function">IncrBy</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipe<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> Null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipe<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ret <span class="token operator">=</span> pipe<span class="token punctuation">.</span><span class="token function">EndPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> ret<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📰-transaction-事务" tabindex="-1"><a class="header-anchor" href="#📰-transaction-事务" aria-hidden="true">#</a> 📰 Transaction (事务)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> tran <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">Multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tran<span class="token punctuation">.</span><span class="token function">IncrBy</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tran<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> Null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tran<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ret <span class="token operator">=</span> tran<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> ret<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📯-getdatabase-切库" tabindex="-1"><a class="header-anchor" href="#📯-getdatabase-切库" aria-hidden="true">#</a> 📯 GetDatabase (切库)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> val1 <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔍-scan-扫描" tabindex="-1"><a class="header-anchor" href="#🔍-scan-扫描" aria-hidden="true">#</a> 🔍 Scan (扫描)</h2><blockquote><p>支持集群模式</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> keys <span class="token keyword">in</span> cli<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function g(m,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,r,d,n("p",null,[s("开源地址："),n("a",k,[s("https://github.com/2881099/FreeRedis"),c(a)])]),v])}const f=t(i,[["render",g],["__file","freeredis.html.vue"]]);export{f as default};
