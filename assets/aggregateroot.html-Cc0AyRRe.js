import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as l,c as i,a as s,b as n,d as t,w as u,e as p}from"./app-CHQkJX5P.js";const r={},k=p(`<h1 id="聚合根-实验室" tabindex="-1"><a class="header-anchor" href="#聚合根-实验室" aria-hidden="true">#</a> 聚合根（实验室）</h1><p>FreeSql.DbContext 定义了 IBaseRepository&lt;T&gt; 仓储接口，（虽然）支持了级联保存、级联删除功能，（但是）使用时需要人工自己判断何时开启、何时使用。</p><p>本文看上去像 EF，实则有区别，主要区别在级联边界的规则设定，例如我们允许 OneToMany 从下层向上递归级联，但是仅限查询，不能增删改。研究目的希望从机制上杜绝痛点，让操作变得更可控。</p><p><strong>AggregateRootRepository 是 IBaseRepository&lt;T&gt; 一种新的尝试实现</strong>，根据聚合根特点，实现可控的级联添加、级联更新、级联删除、级联查询（查询时自动 Include/IncludeMany）操作。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAggregateRootRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>dotnet add package FreeSql.Extensions.AggregateRoot</p></blockquote>`,6),d={href:"https://github.com/dotnetcore/FreeSql/discussions/1235",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="设定边界" tabindex="-1"><a class="header-anchor" href="#设定边界" aria-hidden="true">#</a> 设定边界</h2><p>将一个主要的实体类认定为聚合根，设定好安全的管辖范围（边界），CRUD 时会把边界之内的所有内容看作一个整体。</p><p>边界之外的导航属性，<code>增删改</code> 递归时会忽略：</p><ul><li>ManyToOne</li><li>ManyToMany(外部表)</li><li>PgArrayToMany</li></ul><p>边界之内的导航属性，<code>增删改</code> 递归时会级联操作：</p><ul><li>OneToOne</li><li>OneToMany</li><li>ManyToMany(中间表)</li></ul><p>示例1：在聚合根内递归所有 OneToOne/OneToMany 导航属性</p><ul><li>OneToOne: Order &lt;-&gt; OrderExt</li><li>OneToMany: Order &lt;== OrderDetail</li><li>OneToOne: OrderDetail &lt;-&gt; OrderDetailExt</li><li>聚合根 Order 的管辖范围：Extdata、Details、Details[?].Extdata</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">OrderExt</span> Extdata <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderDetail<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderDetail<span class="token punctuation">&gt;</span></span> Details <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderExt</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field3 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Order</span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderDetail</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field4 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">OrderDetailExt</span> Extdata <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderDetailExt</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderDetailId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field5 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">OrderDetail</span> OrderDetail <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2：在聚合根内递归所有 ManyToMany 导航属性对应的中间表</p><ul><li>ManyToMany: Order &lt;=&gt; Tag</li><li>聚合根 Order 会根据 Tags 生成 OrderTag 中间表数据，进行管理</li><li>聚合根 Order 不会管理 Tag 实体类，以及 Tag 向下延申的导航属性（外部表不属于管辖范围）</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ..</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ManyToMany <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">OrderTag</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Tag<span class="token punctuation">&gt;</span></span> Tags <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderTag</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> TagId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Order</span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>TagId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Tag</span> Tag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Tag</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ManyToMany <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">OrderTag</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> Orders <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h2><p>根据上面设定的边界，插入时会自动 <code>级联插入</code> 边界以内的内容。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
<span class="token punctuation">{</span>
    Field2 <span class="token operator">=</span> <span class="token string">&quot;field2&quot;</span><span class="token punctuation">,</span>
    Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderExt</span> <span class="token punctuation">{</span> Field3 <span class="token operator">=</span> <span class="token string">&quot;field3&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>OrderDetail<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetail</span> <span class="token punctuation">{</span> Field4 <span class="token operator">=</span> <span class="token string">&quot;field4_01&quot;</span><span class="token punctuation">,</span> Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetailExt</span> <span class="token punctuation">{</span> Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_01&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetail</span> <span class="token punctuation">{</span> Field4 <span class="token operator">=</span> <span class="token string">&quot;field4_02&quot;</span><span class="token punctuation">,</span> Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetailExt</span> <span class="token punctuation">{</span> Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_02&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetail</span> <span class="token punctuation">{</span> Field4 <span class="token operator">=</span> <span class="token string">&quot;field4_03&quot;</span><span class="token punctuation">,</span> Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetailExt</span> <span class="token punctuation">{</span> Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_03&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Tags <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Tag<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
repository<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//级联插入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>插入 Order 表记录；</li><li>插入 OrderExt 表记录；</li><li>插入 OrderDetail 表记录；</li><li>插入 OrderDetailExt 表记录；</li><li>插入 OrderTag 表记录；（不会插入 Tag 表记录）</li></ul><blockquote><p>注意：即使 order.Tags 在数据库不存在，也不会插入 Tag 表记录</p></blockquote><h2 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h2><p>根据上面设定的边界，查询时会自动 <code>Include/IncludeMany</code> 边界以内的内容。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span>Select
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果等同于：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Details<span class="token punctuation">,</span> 
        then <span class="token operator">=&gt;</span> then<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Tags<span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展查询边界：</p><blockquote><p>提示：[AggregateRootBoundary(&quot;name&quot;, Break = true)] 设置边界范围，请往后面看。。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">OrderRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AggregateRootRepository<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">OrderRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">,</span> <span class="token class-name">UnitOfWorkManager</span> uowManager<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>uowManager<span class="token punctuation">?.</span>Orm <span class="token operator">??</span> fsql<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>AggregateRootUtils<span class="token punctuation">.</span><span class="token function">GetAutoIncludeQueryStaicCode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fsql<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//控制台输出一块 Include/IncludeMany 字符串，内容与下方 SelectDiy 代码块相同</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ISelect<span class="token punctuation">&lt;</span>IFreeSql<span class="token punctuation">&gt;</span></span> Select <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>SelectDiy
        <span class="token comment">//.TrackToList(this.SelectAggregateRootTracking) 状态跟踪</span>
        <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Details<span class="token punctuation">,</span> 
            then <span class="token operator">=&gt;</span> then<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Tags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重写 Select 可以把边界以外的数据一起查询出来（例如 ManyToOne 导航属性），但是 <code>添加/修改/删除</code> 仍然采用默认边界规则</p><p>手工使用 SelectDiy Include/IncludeMany 包含内容，如果小于默认边界规则，则建议不要开启 <code>状态跟踪</code> （保存数据可能造成不一致），反之则应该开启。（详细请往后看 <code>更新数据</code>）</p><h2 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h2><p>根据上面设定的边界，删除时会自动 <code>级联删除</code> 边界以内的内容。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>repository<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>删除 OrderExt 表对应的记录；</li><li>删除 OrderDetailExt 表对应的记录；</li><li>删除 OrderDetail 表对应的记录；</li><li>删除 OrderTag 表对应的记录；（不会删除 Tag 表记录）</li><li>删除 Order 表对应的记录；</li></ul><p>删除数据是在内存递归 order 实例进行的，因此需要使用 repository 提前查询，内容庞大时有性能缺陷。</p><p>如果设置了数据库表外键的级联删除功能，则只需删除 Order 表对应的记录，并且不需要提前查询。</p><h2 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据" aria-hidden="true">#</a> 更新数据</h2><p>根据上面设定的边界，更新时会自动 <code>级联保存</code> 边界以内的内容。</p><p>repository.Attach 存储更新前的数据快照（查询会自动快照），称为副本，repository.Update 的时候和副本进行级联对比保存。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> repository<span class="token punctuation">.</span>Select<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时已自动 Attach</span>
order<span class="token punctuation">.</span>Tags<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tag</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Details<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Extdata<span class="token punctuation">.</span>Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_01_01&quot;</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Field2 <span class="token operator">=</span> <span class="token string">&quot;field2_02&quot;</span><span class="token punctuation">;</span>
repository<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加 OrderTag 表记录；（不会管理 Tag 表记录）</li><li>删除 OrderDetail 表记录；</li><li>删除 OrderDetailExt 表记录；</li><li>更新 OrderDetailExt 表记录；</li><li>更新 Order 表记录；</li></ul><p><code>完整保存</code> 先查询再更新，机制容易理解，数据一致性也更有保障。但是如果聚合根下内容较庞大，将会造成性能问题。</p><p>例如 Order 下面的评论数据大约有 1000 条，每天还不断有新的记录，每次 Load 内存再保存代价就太大了。</p><p>利用对比保存的特点，可以变向实现 <code>追加记录</code>：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ..</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderComment<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderComment<span class="token punctuation">&gt;</span></span> Comments <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderComment</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field6 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//单表数据</span>
repository<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//快照时 Comments 是 NULL/EMPTY</span>
order<span class="token punctuation">.</span>Comments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>OrderComment<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Comments<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderComment</span> <span class="token punctuation">{</span> Field6 <span class="token operator">=</span> <span class="token string">&quot;field6_01&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Comments<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderComment</span> <span class="token punctuation">{</span> Field6 <span class="token operator">=</span> <span class="token string">&quot;field6_02&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repository<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 fsql 只查询了单表数据；</li><li>order 本身没发生变化，所以不更新 Order 表记录；</li><li>添加 OrderComment 表记录2条；</li></ul><blockquote><p>我为什么不直接对 OrderComment 进行单表操作啊？？？</p></blockquote><blockquote><p>答案你们回答！！！</p></blockquote><p><code>对比保存</code> 规则说明：</p><table><thead><tr><th>导航属性</th><th>副本</th><th>最新</th><th>结果</th></tr></thead><tbody><tr><td>OneToOne</td><td>NULL</td><td>Object</td><td><code>添加</code> 最新 记录</td></tr><tr><td>OneToOne</td><td>Object</td><td>NULL</td><td><code>删除</code> 副本 记录</td></tr><tr><td>OneToOne</td><td>Object</td><td>Object</td><td>内容发生变化则 <code>更新</code> 最新 记录，否则 <code>忽略</code></td></tr><tr><td>OneToMany</td><td>NULL/Empty</td><td>List</td><td><code>添加</code> 最新 List 记录</td></tr><tr><td>OneToMany</td><td>List</td><td>NULL</td><td><code>忽略</code></td></tr><tr><td>OneToMany</td><td>List</td><td>Empty</td><td><code>删除</code> 副本 List 记录</td></tr><tr><td>OneToMany</td><td>List</td><td>List</td><td><code>对比保存</code> 计算出 <code>添加</code>、<code>更新</code>、<code>删除</code> 三种行为</td></tr></tbody></table><blockquote><p>ManyToMany 只会操作 <code>中间表</code>（外部表不属于管辖范围），对比保存的机制与 OneToMany 一致</p></blockquote><h2 id="插入或更新数据" tabindex="-1"><a class="header-anchor" href="#插入或更新数据" aria-hidden="true">#</a> 插入或更新数据</h2><p>InsertOrUpdate 执行逻辑依托聚合根对象的 <code>主键</code> 和 <code>状态管理</code>，状态管理存储的是副本。</p><p>1、如果主键是 <code>自增</code>：</p><ul><li>无值，则 <code>插入数据</code>；</li><li>有值，则判断 状态管理; <ul><li>存在，则与副本对比 <code>更新数据</code>；</li><li>不存在，则查询 数据库；（内容庞大时有性能问题） <ul><li>存在，则与查询的内容对比 <code>更新数据</code>；</li><li>不存在，则 <code>插入数据</code>；</li></ul></li></ul></li></ul><p>2、如果主键不是 自增：</p><ul><li>无值，则 <code>抛出异常</code>；</li><li>有值，逻辑同上；</li></ul><h2 id="扩展边界" tabindex="-1"><a class="header-anchor" href="#扩展边界" aria-hidden="true">#</a> 扩展边界</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ..</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AggregateRootBoundary</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;solution_1&quot;</span><span class="token punctuation">,</span> Break <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> BreakThen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AggregateRootBoundary</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;solution_2&quot;</span><span class="token punctuation">,</span> Break <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderDetail<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderDetail<span class="token punctuation">&gt;</span></span> Details <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

repository<span class="token punctuation">.</span><span class="token function">ChangeBoundary</span><span class="token punctuation">(</span><span class="token string">&quot;solution_1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Break 递归时，终止当前导航属性</li><li>BreakThen 递归时，终止下探</li></ul><p>AggregateRootBoundary 可以设置边界之内的导航属性，缩小边界范围。</p><p>也可以设置非边界之内的导航属性 ManyToOne/ManyToMany/PgArrayToMany，仅查询有效，<code>增删改</code> 时依然会忽略它们。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>1、<strong>理解边界</strong>，理解本文提出的边界规则。</p><ul><li>ManyToOne 导航属性，是 <code>边界之外</code>；</li><li>ManyToMany 导航属性，<code>中间表</code>（OrderTag） 是边界之内，<code>外部表</code>（Tag） 是 <code>边界之外</code>；</li><li>OneToOne 导航属性，是边界之内；</li><li>OneToMany 导航属性，是边界之内；</li></ul><p>AggregateRootRepository 只对边界之内的数据进行递归 CRUD 操作，把聚合根看成一个整体。</p><p>特殊情况可以继承后重写 Select 属性扩大、或缩小查询内容：</p><ul><li>Insert/Delete/Update 不会对 <code>扩大</code> 边界之外的数据进行增删改；</li><li>Update <code>缩小</code> 后的查询内容，由于导航属性值为 NULL，不会删除未查询的内容；</li></ul><p>2、<strong>善用事务</strong>，使用事务解决一致操作问题。</p>`,66);function v(b,y){const e=a("ExternalLinkIcon"),o=a("RouterLink");return l(),i("div",null,[k,s("p",null,[n("意见征集、讨论区："),s("a",d,[n("https://github.com/dotnetcore/FreeSql/discussions/1235"),t(e)])]),s("p",null,[n("接下来的内容，严重依赖"),t(o,{to:"/guide/navigate-attribute.html"},{default:u(()=>[n("【导航属性】")]),_:1}),n("的正确配置，请先学会再继续向下！")]),m])}const h=c(r,[["render",v],["__file","aggregateroot.html.vue"]]);export{h as default};
