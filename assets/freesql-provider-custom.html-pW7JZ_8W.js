import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as s,b as n,d as l,e as a}from"./app-mZ5Qajen.js";const i={},r=a(`<h1 id="国产数据库" tabindex="-1"><a class="header-anchor" href="#国产数据库" aria-hidden="true">#</a> 国产数据库</h1><table><thead><tr><th>数据库名称</th><th>提供者</th><th>系列风格</th></tr></thead><tbody><tr><td>达梦</td><td>FreeSql.Provider.Dameng</td><td>Oracle</td></tr><tr><td>神州通用</td><td>FreeSql.Provider.ShenTong</td><td>PostgreSQL</td></tr><tr><td>人大金仓</td><td>FreeSql.Provider.KingbaseES</td><td>PostgreSQL</td></tr><tr><td>南大通用</td><td>FreeSql.Provider.GBase</td><td>Informix</td></tr><tr><td>虚谷</td><td>FreeSql.Provider.Xugu</td><td>Oracle</td></tr><tr><td>翰高</td><td>FreeSql.Provider.Custom、FreeSql.Provider.Odbc</td><td>PostgreSQL</td></tr></tbody></table><p>由于太多，在此不一一列举，它们大多数语法兼容 MySql、Oracle、SqlServer、PostgreSQL 四种常用数据库之一。</p><p>FreeSql.Provider.Custom 提供了这四种数据库适配，并且支持 CodeFirst/DbFirst 以及完整的 FreeSql 功能。</p><p>FreeSql.Provider.Custom 不依赖具体 ado.net/odbc/oledb dll 驱动，使用者在外部自行引用 dll 驱动。</p><p>访问 MySql 数据库为例：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseConnectionFactory</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>CustomMySql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;Data Source=...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseNoneCommandParameter</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseMonitorCommand</span><span class="token punctuation">(</span>cmd <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>CommandText<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token function">SetDbProviderFactory</span><span class="token punctuation">(</span>MySqlConnectorFactory<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若某国产数据库兼容 MySql SQL，先引用对方提供的 DLL，然后：</p><ul><li>将上面 new MySqlConnection 替换成 new XxxConnection</li><li>将上面 MySqlConnectorFactory.Instance 替换成对应的 DbProviderFactory</li></ul><p>提示：对方 DLL 一般都会提供这两个现实类</p><h1 id="自定义适配" tabindex="-1"><a class="header-anchor" href="#自定义适配" aria-hidden="true">#</a> 自定义适配</h1><p>除了上面，还提供了自定义适配更多的数据库，比如 mssql2000、db2，自定义适配将牺牲一些功能：</p><ul><li>不支持 CodeFirst 自动迁移</li><li>不支持 DbFirst 接口方法的实现</li><li>不支持 原来的分页方法，需要自行判断 id 进行分页</li><li>只支持较少的基础类型：bool,sbyte,short,int,long,byte,ushort,uint,ulong,double,float,decimal,DateTime,byte[],string,Guid</li></ul><p>使用者只需求重写类 FreeSql.Custom.CustomAdapter 就可以自定义访问不同的数据库。</p>`,14),u={href:"https://github.com/2881099/FreeSql/blob/master/Providers/FreeSql.Provider.Custom/CustomAdapter.cs",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Mssql2000Adapter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">FreeSql<span class="token punctuation">.</span>Custom<span class="token punctuation">.</span>CustomAdapter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> InsertAfterGetIdentitySql <span class="token operator">=&gt;</span> <span class="token string">&quot;SELECT SCOPE_IDENTITY()&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//可以重写更多的设置</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">IFreeSql</span> fsql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Custom<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">@&quot;Data Source=...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//be sure to define as singleton mode</span>

fsql<span class="token punctuation">.</span><span class="token function">SetCustomAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mssql2000Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>适配好新的 CustomAdapter 后，请在 FreeSqlBuilder.Build 之后调用 IFreeSql.SetCustomAdapter 方法生效。</p>`,2);function k(m,v){const t=o("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[n("我们默认做了一套 sqlserver 的语法和映射适配，代码在 "),s("a",u,[n("CustomAdapter.cs"),l(t)]),n("，请查看代码了解。")]),d])}const q=e(i,[["render",k],["__file","freesql-provider-custom.html.vue"]]);export{q as default};
