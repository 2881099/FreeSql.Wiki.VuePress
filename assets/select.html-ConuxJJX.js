import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,o as i,c as p,a as t,b as n,d as a,e}from"./app-z0SGY7K-.js";const c={},l=e(`<h1 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> Select</h1><p>FreeSql has invested heavily in querying data, offering features like fluent style, multi-table queries, expression functions, and strong support for navigation properties.</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="paging">《Paging Queries》</a></td><td><a href="repository">《Repository Layer》</a></td><td><a href="read-write-splitting">《Read-Write Separation》</a></td></tr><tr><td><a href="select-single-table">《Single Table Queries》</a></td><td><a href="filters">《Filters》</a></td><td><a href="linq-to-sql">《LinqToSql》</a></td></tr><tr><td><a href="select-multi-table">《Multi-Table Queries》</a></td><td><a href="select-lazy-loading">《Lazy Loading》</a></td><td><a href="performance">《Performance》</a></td></tr><tr><td><a href="withtempquery">《Nested Queries》</a></td><td><a href="select-include">《Eager Loading》</a></td><td><a href="sharding">《Sharding》</a></td></tr><tr><td><a href="select-group-by">《Group By Aggregation Queries》</a></td><td><a href="expression-function">《Expression Functions》</a></td><td><a href="multi-tenancy">《Multi-Tenancy》</a></td></tr><tr><td><a href="select-return-data">《Return Data》</a></td><td></td><td></td></tr></tbody></table><h2 id="expression-functions" tabindex="-1"><a class="header-anchor" href="#expression-functions" aria-hidden="true">#</a> Expression Functions</h2><table><thead><tr><th>Description</th><th>Lambda Expression</th><th>SQL</th></tr></thead><tbody><tr><td>in</td><td>Where(a =&gt; new [] { 1,2,3 }.Contains(a.Id))</td><td>[Id] in (1,2,3)</td></tr><tr><td>not in</td><td>Where(a =&gt; !new [] { 1,2,3 }.Contains(a.Id))</td><td>[Id] not in (1,2,3)</td></tr><tr><td>Multi-column in</td><td>Where(a =&gt; list.Any(b =&gt; b.Item1 == a.Id &amp;&amp; b.Item2 == a.ct1))</td><td>([Id]=1 and [ct1]=1) or ([Id]=2 and [ct1]=2)</td></tr><tr><td>like &#39;%xxx%&#39;</td><td>Where(a =&gt; a.Title.Contains(&quot;xxx&quot;))</td><td>[Title] like &#39;%xxx%&#39;</td></tr><tr><td>like &#39;xxx%&#39;</td><td>Where(a =&gt; a.Title.StartsWith(&quot;xxx&quot;))</td><td>[Title] like &#39;xxx%&#39;</td></tr><tr><td>like &#39;%xxx&#39;</td><td>Where(a =&gt; a.Title.EndsWith(&quot;xxx&quot;))</td><td>[Title] like &#39;%xxx&#39;</td></tr><tr><td>Date range</td><td>Where(a =&gt; a.Time.Between(time1, time2))</td><td>[Time] between @time1 and @time2</td></tr><tr><td>Exists</td><td>.Any()</td><td>select 1 from ...</td></tr><tr><td>Count</td><td>.Count()</td><td>select count(*) from ...</td></tr><tr><td>Sum</td><td>.Sum(a =&gt; a.Score)</td><td>select sum([Score]) from ...</td></tr><tr><td>Average</td><td>.Avg(a =&gt; a.Score)</td><td>select avg([Score]) from ...</td></tr><tr><td>Maximum</td><td>.Max(a =&gt; a.Score)</td><td>select max([Score]) from ...</td></tr><tr><td>Minimum</td><td>.Min(a =&gt; a.Score)</td><td>select min([Score]) from ...</td></tr></tbody></table><p>For more details, see <a href="expression-function">《Expression Functions》</a></p><h2 id="sqlserver-withlock-withindex" tabindex="-1"><a class="header-anchor" href="#sqlserver-withlock-withindex" aria-hidden="true">#</a> SqlServer WithLock/WithIndex</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock <span class="token operator">|</span> SqlServerLock<span class="token punctuation">.</span>NoWait<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(NoLock, NoWait)</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ... FROM [Region] a With(index=idx_01, NoLock)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multi-table:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">InnerJoin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>x <span class="token operator">==</span> b<span class="token punctuation">.</span>xx<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIndex</span><span class="token punctuation">(</span><span class="token string">&quot;idx_01&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;idx_02&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT TOP 1 ..</span>
<span class="token comment">//FROM [Region] a With(index=idx_01, NoLock) </span>
<span class="token comment">//INNER JOIN [T2] b With(index=idx_02) ON a.[x] = b.[xx]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Global NoLock Setting:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//Applies to all entity classes</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//【Specific】entity classes</span>
fsql<span class="token punctuation">.</span><span class="token function">SetGlobalSelectWithLock</span><span class="token punctuation">(</span>SqlServerLock<span class="token punctuation">.</span>NoLock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Region</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dynamic-filtering-wheredynamicfilter" tabindex="-1"><a class="header-anchor" href="#dynamic-filtering-wheredynamicfilter" aria-hidden="true">#</a> Dynamic Filtering WhereDynamicFilter</h2>`,13),u={href:"https://www.cnblogs.com/FreeSql/p/16485310.html",target:"_blank",rel:"noopener noreferrer"},r=t("p",null,"The ISelect.WhereDynamicFilter method implements dynamic filtering conditions (interacting with the frontend), supporting the following operators:",-1),k=t("li",null,"Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith: Contains/Does not contain, like '%xx%', or like 'xx%', or like '%xx'",-1),m=t("li",null,"Equal/NotEqual: Equals/Not equals",-1),h=t("li",null,"GreaterThan/GreaterThanOrEqual: Greater than/Greater than or equal",-1),g=t("li",null,"LessThan/LessThanOrEqual: Less than/Less than or equal",-1),b=t("li",null,"Range: Range query",-1),v=t("li",null,"DateRange: Date range, with special handling value[1] + 1",-1),f=t("li",null,"Any/NotAny: Whether it matches any item in value (essentially SQL IN)",-1),q={href:"https://github.com/dotnetcore/FreeSql/discussions/1550",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">DynamicFilterInfo</span> dyfilter <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFilterInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">@&quot;
{
  &quot;&quot;Logic&quot;&quot;: &quot;&quot;And&quot;&quot;,
  &quot;&quot;Filters&quot;&quot;:
  [
    { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 1 },
    {
      &quot;&quot;Logic&quot;&quot;: &quot;&quot;Or&quot;&quot;,
      &quot;&quot;Filters&quot;&quot;:
      [
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 2 },
        { &quot;&quot;Field&quot;&quot;: &quot;&quot;id&quot;&quot;, &quot;&quot;Operator&quot;&quot;: &quot;&quot;Equals&quot;&quot;, &quot;&quot;Value&quot;&quot;: 3 }
      ]
    }
  ]
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Region<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereDynamicFilter</span><span class="token punctuation">(</span>dyfilter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//WHERE id = 1 AND (id = 2 OR id = 3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Dynamic Table Names: ISelect.AsTable((t, old) =&gt; $&quot;{old}_201903&quot;)</p></blockquote><blockquote><p>Dynamic Sorting: ISelect.OrderByPropertyName(&quot;Parent.Code&quot;)</p></blockquote><blockquote><p>Dynamic Returns: ISelect.ToDataTableByPropertyName(new string[] { &quot;Parent.Code&quot;, &quot;Id&quot; })</p></blockquote><blockquote><p>Dynamic Eager Loading: ISelect.IncludeByPropertyName(&quot;Parent.Parent&quot;).IncludeByPropertyName(&quot;Parent.Childs&quot;)</p></blockquote><h2 id="clone-queries-iselect" tabindex="-1"><a class="header-anchor" href="#clone-queries-iselect" aria-hidden="true">#</a> Clone Queries ISelect</h2><p>For your information: C# 7.0 supports local functions, which allows defining temporary methods within a method. This feature is highly recommended as it is very effective in many scenarios.</p><p>When a method is defined inside another method, it is called: local function/nested method.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">ISelect<span class="token punctuation">&lt;</span>AdmRoute<span class="token punctuation">&gt;</span></span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AdmRoute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Parent<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span>Parent_Id<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> Parent_Id<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ParentId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WhereIf</span><span class="token punctuation">(</span>mn_Roles_Id<span class="token punctuation">?.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> mn_Roles_Id<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> select1 <span class="token operator">=</span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> select2 <span class="token operator">=</span> <span class="token function">getSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    select1<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// At this point, select2 will not have the a.Status == 0 condition</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><table><thead><tr><th>Method</th><th>Return Type</th><th>Parameters</th><th>Description</th><th></th></tr></thead><tbody><tr><td>ToSql</td><td>string</td><td></td><td>Returns the SQL statement to be executed</td><td></td></tr><tr><td>ToList</td><td>List&lt;T1&gt;</td><td></td><td>Executes SQL query and returns records of all fields of the T1 entity; if navigation properties exist, they are also queried and returned. If no records exist, returns a list with Count 0.</td><td></td></tr><tr><td>ToList&lt;T&gt;</td><td>List&lt;T&gt;</td><td>Lambda</td><td>Executes SQL query and returns records of specified fields; if no records exist, returns a list with Count 0.</td><td></td></tr><tr><td>ToList&lt;T&gt;</td><td>List&lt;T&gt;</td><td>string field</td><td>Executes SQL query and returns records of the field specified, and can be received as a tuple or basic types (int, string, long); if no records exist, returns a list with Count 0.</td><td></td></tr><tr><td>ToOne</td><td>T1</td><td></td><td>Executes SQL query and returns the first record of all fields of the T1 entity; if no record exists, returns null.</td><td></td></tr><tr><td>ToAggregate&lt;T&gt;</td><td>List&lt;T&gt;</td><td>Lambda</td><td>Executes SQL query and returns aggregate results of specified fields (suitable for scenarios where GroupBy is not required).</td><td></td></tr><tr><td>Any</td><td>bool</td><td></td><td>Executes SQL query to check if there are any records.</td><td></td></tr><tr><td>Sum</td><td>T</td><td>Lambda</td><td>Computes the sum of a specified column.</td><td></td></tr><tr><td>Min</td><td>T</td><td>Lambda</td><td>Computes the minimum value of a specified column.</td><td></td></tr><tr><td>Max</td><td>T</td><td>Lambda</td><td>Computes the maximum</td><td></td></tr><tr><td>Max</td><td>T</td><td>Lambda</td><td>Specifies the maximum value of a column</td><td></td></tr><tr><td>Avg</td><td>T</td><td>Lambda</td><td>Specifies the average value of a column</td><td></td></tr><tr><td>【Pagination】</td><td></td><td></td><td></td><td></td></tr><tr><td>Count</td><td>long</td><td></td><td>The number of records in the query</td><td></td></tr><tr><td>Count</td><td>&lt;this&gt;</td><td>out long</td><td>The number of records in the query, returned as an out parameter</td><td></td></tr><tr><td>Skip</td><td>&lt;this&gt;</td><td>int offset</td><td>Offset the number of rows in the query</td><td></td></tr><tr><td>Offset</td><td>&lt;this&gt;</td><td>int offset</td><td>Offset the number of rows in the query</td><td></td></tr><tr><td>Limit</td><td>&lt;this&gt;</td><td>int limit</td><td>Specify the number of data records to query</td><td></td></tr><tr><td>Take</td><td>&lt;this&gt;</td><td>int limit</td><td>Specify the number of data records to query</td><td></td></tr><tr><td>Page</td><td>&lt;this&gt;</td><td>int pageIndex, int pageSize</td><td>Pagination</td><td></td></tr><tr><td>【Condition】</td><td></td><td></td><td></td><td></td></tr><tr><td>Where</td><td>&lt;this&gt;</td><td>Lambda</td><td>Supports multi-table query expressions; using multiple times is equivalent to AND</td><td></td></tr><tr><td>WhereIf</td><td>&lt;this&gt;</td><td>bool, Lambda</td><td>Supports multi-table query expressions</td><td></td></tr><tr><td>Where</td><td>&lt;this&gt;</td><td>string, parms</td><td>Native SQL syntax condition, Where(&quot;id = @id&quot;, new { id = 1 } ,<a href="ado#parameter">Note the prefix @, according to the specific database</a> not explained elsewhere. Same applies)</td><td></td></tr><tr><td>WhereIf</td><td>&lt;this&gt;</td><td>bool, string, parms</td><td>Native SQL syntax condition, WhereIf(true, &quot;id = @id&quot;, new { id = 1 }</td><td></td></tr><tr><td>WhereCascade</td><td>&lt;this&gt;</td><td>Lambda</td><td>Add conditions to each table in multi-table queries</td><td></td></tr><tr><td>WhereDynamicFilter</td><td>&lt;this&gt;</td><td>DynamicFilterInfo</td><td>Dynamic filtering conditions (interaction with the frontend)</td><td></td></tr><tr><td>【GroupBy】</td><td></td><td></td><td></td><td></td></tr><tr><td>GroupBy</td><td>&lt;this&gt;</td><td>Lambda</td><td>Group by selected columns, GroupBy(a =&gt; a.Name)</td><td>GroupBy(a =&gt; new{a.Name,a.Time})</td></tr><tr><td>GroupBy</td><td>&lt;this&gt;</td><td>string, parms</td><td>Group by native SQL syntax, GroupBy(&quot;concat(name, @cc)&quot;, new { cc = 1 })</td><td></td></tr><tr><td>Having</td><td>&lt;this&gt;</td><td>string, parms</td><td>Filter aggregation conditions by native SQL syntax, Having(&quot;count(name) = @cc&quot;, new { cc = 1 })</td><td></td></tr><tr><td>Disdinct</td><td>&lt;this&gt;</td><td></td><td>.Distinct().ToList(x =&gt; x.GroupName) is for a specific field</td><td></td></tr><tr><td>【Sort】</td><td></td><td></td><td></td><td></td></tr><tr><td>OrderBy</td><td>&lt;this&gt;</td><td>Lambda</td><td>Sort by column, OrderBy(a =&gt; a.Time), can be used multiple times</td><td></td></tr><tr><td>OrderByDescending</td><td>&lt;this&gt;</td><td>Lambda</td><td>Sort by column in descending order, OrderByDescending(a =&gt; a.Time)</td><td></td></tr><tr><td>OrderBy</td><td>&lt;this&gt;</td><td>string, parms</td><td>Sort by native SQL syntax, OrderBy(&quot;count(name) + @cc&quot;, new { cc = 1 })</td><td></td></tr><tr><td>OrderByPropertyName</td><td>string, bool</td><td>Sort by property name string (supports navigation properties)</td><td></td><td></td></tr><tr><td>【Multi-tables】</td><td></td><td></td><td></td><td></td></tr><tr><td>LeftJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>Left join query, supports navigation properties or specifying associated entity types</td><td></td></tr><tr><td>InnerJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>Inner join query, supports navigation properties or specifying associated entity types</td><td></td></tr><tr><td>RightJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>Right join query, supports navigation properties or specifying associated entity types</td><td></td></tr><tr><td>LeftJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>Left join query using native SQL syntax, LeftJoin(&quot;type b on b.id = a.id and b.clicks &gt; @clicks&quot;, new { clicks = 1 })</td><td></td></tr><tr><td>InnerJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>Inner join query using native SQL syntax, InnerJoin(&quot;type b on b.id = a.id and b.clicks &gt; @clicks&quot;, new { clicks = 1 })</td><td></td></tr><tr><td>RightJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>Right join query using native SQL syntax, RightJoin(&quot;type b on b.id = a.id and b.clicks &gt; @clicks&quot;, new { clicks = 1 })</td><td></td></tr><tr><td>From</td><td>&lt;this&gt;</td><td>Lambda</td><td>Multi-table queries, very convenient for more than 3 tables; currently supports up to 10 tables</td><td></td></tr><tr><td>FromQuery</td><td>ISelect&lt;T1, T2&gt;</td><td>ISelect&lt;T2&gt;</td><td>Single table into double table query</td><td></td></tr><tr><td>WithTempQuery</td><td>ISelect&lt;T1&gt;</td><td>Lambda</td><td>Nest single or multiple table queries into a single table query</td><td></td></tr><tr><td>WithMemory</td><td>ISelect&lt;T1&gt;</td><td>List&lt;T1&gt;</td><td>Query using in-memory data</td><td></td></tr><tr><td>UnionAll</td><td>ISelect&lt;T1&gt;</td><td>ISelect&lt;T1&gt;[]</td><td>Union query</td><td></td></tr><tr><td>【Other】</td><td></td><td></td><td></td><td></td></tr><tr><td>As</td><td>&lt;this&gt;</td><td>string alias = &quot;a&quot;</td><td>Specify alias</td><td></td></tr><tr><td>Master</td><td>&lt;this&gt;</td><td></td><td>Specify querying from the master database (default is querying from the slave database)</td><td></td></tr><tr><td>CommandTimeout</td><td>&lt;this&gt;</td><td>int</td><td>Command timeout setting (seconds)</td><td></td></tr><tr><td>WithTransaction</td><td>&lt;this&gt;</td><td>DbTransaction</td><td>Set transaction object</td><td></td></tr><tr><td>WithConnection</td><td>&lt;this&gt;</td><td>DbConnection</td><td>Set connection object</td><td></td></tr><tr><td>WithLock</td><td>&lt;this&gt;</td><td>Enum</td><td>Special settings like SqlServer NoLock</td><td></td></tr><tr><td>ForUpdate</td><td>&lt;this&gt;</td><td>bool</td><td>Exclusive update lock, adapted for different databases, detailed explanation in comments</td><td></td></tr><tr><td>AsQueryable</td><td>IQueryable</td><td></td><td>Convert ISelect to IQueryable, mainly used for extension, e.g., abp IRepository GetAll() interface method needs to return IQueryable object. Note: IQueryable methods are more likely to cause pollution, so avoid this conversion as much as possible</td><td></td></tr><tr><td>ToTreeList()</td><td>List&lt;TEntity&gt;</td><td>None</td><td>Return hierarchical data in the form of a TreeList</td><td></td></tr><tr><td>AsTreeCte()</td><td>ISelect</td><td>(up, pathSelector, level)</td><td>Recursive query of hierarchical tables</td><td></td></tr></tbody></table>`,11);function x(S,L){const s=d("ExternalLinkIcon");return i(),p("div",null,[l,t("p",null,[t("a",u,[n("《Efficient Understanding of FreeSql WhereDynamicFilter and Insights into Its Design》"),a(s)])]),r,t("ul",null,[k,m,h,g,b,v,f,t("li",null,[n("Custom: "),t("a",q,[n("Custom parsing"),a(s)])])]),y])}const w=o(c,[["render",x],["__file","select.html.vue"]]);export{w as default};
