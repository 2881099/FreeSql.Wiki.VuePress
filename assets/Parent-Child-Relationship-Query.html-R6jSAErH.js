import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-H1Vgrpeo.js";const p={},e=t(`<h1 id="parent-child-relationship-query" tabindex="-1"><a class="header-anchor" href="#parent-child-relationship-query" aria-hidden="true">#</a> Parent Child Relationship Query</h1><p>Unlimited classification (father and child) is a commonly used table design. Each design method highlights advantages but also brings defects, such as:</p><ul><li>Way 1：There is only the <code>parent_id</code> field in the table design, which is <strong>troublesome</strong>: query trouble (this article can solve it).</li><li>Way 2：The redundant child id in the table design is easy to query, and it is <strong>troublesome</strong>: it needs to be recalculated when insert/update/delete;</li><li>Way 3：The left and right value codes are stored in the table design, <strong>troublesome</strong>: the same as above;</li></ul><p>Way 1: The design is the simplest. This article solves its recursive query problem and makes the use transparent.</p><h2 id="parent-child-navigation-properties" tabindex="-1"><a class="header-anchor" href="#parent-child-navigation-properties" aria-hidden="true">#</a> Parent-child Navigation Properties</h2><p>Among the FreeSql navigation properties, there are settings for the parent-child relationship, as follows:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Area</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Code <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ParentCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ParentCode<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
  <span class="token keyword">public</span> <span class="token return-type class-name">Area</span> Parent <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ParentCode<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
  <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span> Childs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Define the Parent property, in the expression can be like this:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Define the Childs attribute, in the expression (subquery):</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Childs<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To define the Childs property, you can also use <a href="Cascade-Saving">Cascade Saving</a>, <a href="Greed-Loading">Greed Loading</a> and so on.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;1=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span>DbContextOptions<span class="token punctuation">.</span>EnableCascadeSave <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span>DbContextOptions<span class="token punctuation">.</span>NoneParameter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span>
<span class="token punctuation">{</span>
  Code <span class="token operator">=</span> <span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span>
  Name <span class="token operator">=</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">,</span>
  Childs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span>
    <span class="token punctuation">{</span>
      Code <span class="token operator">=</span> <span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span>
      Name <span class="token operator">=</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span>
      Childs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span><span class="token punctuation">{</span> Code<span class="token operator">=</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;北京市&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span><span class="token punctuation">{</span> Code<span class="token operator">=</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;东城区&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="totreelist" tabindex="-1"><a class="header-anchor" href="#totreelist" aria-hidden="true">#</a> ToTreeList</h2><p>After configuring the parent-child properties, you can use it like this:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t1 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The query data is originally flat. The <code>ToTreeList</code> method processes the returned flat data into a tree list in memory and returns it.</p><h2 id="delete-recursively-astreecte" tabindex="-1"><a class="header-anchor" href="#delete-recursively-astreecte" aria-hidden="true">#</a> Delete Recursively - AsTreeCte</h2><p>Very common infinite level classification table function, when deleting a tree node, the child nodes are also processed.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ToDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Delete all records under 中国.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If logically delete:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ToUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>IsDeleted<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Logically delete all records under 中国.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="query-recursively-astreecte" tabindex="-1"><a class="header-anchor" href="#query-recursively-astreecte" aria-hidden="true">#</a> Query Recursively - AsTreeCte</h2><p>If you do not design an infinite level classification table with data redundancy, recursive query is essential. <code>AsTreeCte</code> is the package for solving recursive query. Method parameters description:</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>(Optional) pathSelector</td><td>Path content selection, you can set the query to return: <code>中国 -&gt; 北京 -&gt; 东城区</code></td></tr><tr><td>(Optional) up</td><td><em>false</em> (default): recursive query from parent to child; <br><em>true</em>: recursive query from child to parent</td></tr><tr><td>(Optional) pathSeparator</td><td>Set the connector of <code>pathSelector</code>, default: <code>-&gt;</code></td></tr><tr><td>(Optional) level</td><td>Set recursion level</td></tr></tbody></table><blockquote><p>Databases that have passed the test: MySql8.0, SqlServer, PostgreSQL, Oracle, Sqlite, Firebird, 达梦, 人大金仓, 神舟通用, 南大通用, 翰高, MSAccess And ClickHouse.</p></blockquote><p>Practice 1: AsTreeCte() + ToTreeList</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t2 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Query all records under 中国</span>
  <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ToTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Not necessary, you can also use ToList (see Practice 2)</span>
Assert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// WITH &quot;as_tree_cte&quot;</span>
<span class="token comment">// as</span>
<span class="token comment">// (</span>
<span class="token comment">// SELECT 0 as cte_level, a.&quot;Code&quot;, a.&quot;Name&quot;, a.&quot;ParentCode&quot; </span>
<span class="token comment">// FROM &quot;Area&quot; a </span>
<span class="token comment">// WHERE (a.&quot;Name&quot; = &#39;中国&#39;)</span>

<span class="token comment">// union all</span>

<span class="token comment">// SELECT wct1.cte_level + 1 as cte_level, wct2.&quot;Code&quot;, wct2.&quot;Name&quot;, wct2.&quot;ParentCode&quot; </span>
<span class="token comment">// FROM &quot;as_tree_cte&quot; wct1 </span>
<span class="token comment">// INNER JOIN &quot;Area&quot; wct2 ON wct2.&quot;ParentCode&quot; = wct1.&quot;Code&quot;</span>
<span class="token comment">// )</span>
<span class="token comment">// SELECT a.&quot;Code&quot;, a.&quot;Name&quot;, a.&quot;ParentCode&quot; </span>
<span class="token comment">// FROM &quot;as_tree_cte&quot; a </span>
<span class="token comment">// ORDER BY a.&quot;Code&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Practice 2: AsTreeCte() + ToList</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t3 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> t3<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//The executed SQL is the same as Practice 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Practice 3: AsTreeCte(pathSelector) + ToList</p><p>After setting the <code>pathSelector</code> parameter, how to return the hidden field?</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t4 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>Code <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> 
    item <span class="token operator">=</span> a<span class="token punctuation">,</span> 
    level <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span><span class="token string">&quot;a.cte_level&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    path <span class="token operator">=</span> <span class="token string">&quot;a.cte_path&quot;</span> 
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> t4<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000] -&gt; 北京市[110100]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000] -&gt; 东城区[110101]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// WITH &quot;as_tree_cte&quot;</span>
<span class="token comment">// as</span>
<span class="token comment">// (</span>
<span class="token comment">// SELECT 0 as cte_level, a.&quot;Name&quot; || &#39;[&#39; || a.&quot;Code&quot; || &#39;]&#39; as cte_path, a.&quot;Code&quot;, a.&quot;Name&quot;, a.&quot;ParentCode&quot; </span>
<span class="token comment">// FROM &quot;Area&quot; a </span>
<span class="token comment">// WHERE (a.&quot;Name&quot; = &#39;中国&#39;)</span>

<span class="token comment">// union all</span>

<span class="token comment">// SELECT wct1.cte_level + 1 as cte_level, wct1.cte_path || &#39; -&gt; &#39; || wct2.&quot;Name&quot; || &#39;[&#39; || wct2.&quot;Code&quot; || &#39;]&#39; as cte_path, wct2.&quot;Code&quot;, wct2.&quot;Name&quot;, wct2.&quot;ParentCode&quot; </span>
<span class="token comment">// FROM &quot;as_tree_cte&quot; wct1 </span>
<span class="token comment">// INNER JOIN &quot;Area&quot; wct2 ON wct2.&quot;ParentCode&quot; = wct1.&quot;Code&quot;</span>
<span class="token comment">// )</span>
<span class="token comment">// SELECT a.&quot;Code&quot; as1, a.&quot;Name&quot; as2, a.&quot;ParentCode&quot; as5, a.cte_level as6, a.cte_path as7 </span>
<span class="token comment">// FROM &quot;as_tree_cte&quot; a </span>
<span class="token comment">// ORDER BY a.&quot;Code&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>More practice...please try according to the code comments.</p></blockquote><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><ul><li><a href="Query-from-Multi-Tablea">《Query from Multi Tables》</a></li><li><a href="Return-Data">《Return Data》</a></li><li><a href="Linq-to-Sql">《LinqToSql》</a></li><li><a href="Repository-Layer">《Repository Layer》</a></li><li><a href="Filters-and-Global-Filters">《Filters and Global Filters》</a></li><li><a href="Lazy-Loading">《FreeSql Optimization: Lazy Loading》</a></li><li><a href="Greed-Loading">《FreeSql Optimization: Greed Loading》</a></li><li><a href="Expression-Function">《Expression Function》</a></li><li><a href="Performance">《Performance》</a></li><li><a href="Sharding-Tables-and-Database">《Sharding Tables and Database》</a></li><li><a href="Tenant">《Tenant》</a></li></ul>`,36),o=[e];function c(u,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Parent-Child-Relationship-Query.html.vue"]]);export{k as default};
