import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as i,c as u,a as e,b as s,d as a,e as o,w as r}from"./app-yjsEyAxH.js";const d={},k={href:"https://github.com/dotnetcore/FreeSql/discussions/1235",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const p=t("ExternalLinkIcon"),c=t("RouterLink");return i(),u("div",null,[n[5]||(n[5]=e(`<h1 id="aggregate-root" tabindex="-1"><a class="header-anchor" href="#aggregate-root" aria-hidden="true">#</a> Aggregate Root</h1><p><code>FreeSql.DbContext</code> defines the <code>IBaseRepository&lt;T&gt;</code> repository interface, which, while supporting cascading save and delete functions, requires manual determination of when to enable and use these features.</p><p>Although this may look like EF, there are key differences, primarily in how cascading boundaries are set. For example, we allow <code>OneToMany</code> to cascade recursively from the lower layer up, but only for queries, not for insert, update, or delete operations. The goal is to eliminate pain points from a mechanism perspective and make operations more controllable.</p><p><strong><code>AggregateRootRepository</code> is a new implementation of <code>IBaseRepository&lt;T&gt;</code></strong> that leverages the characteristics of aggregate roots to implement controllable cascading additions, updates, deletions, and queries (automatic <code>Include/IncludeMany</code> during queries).</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repository <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAggregateRootRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>dotnet add package FreeSql.Extensions.AggregateRoot</p></blockquote>`,6)),s("p",null,[n[1]||(n[1]=a("For feedback and discussion, visit: ")),s("a",k,[n[0]||(n[0]=a("https://github.com/dotnetcore/FreeSql/discussions/1235")),o(p)])]),s("p",null,[n[3]||(n[3]=a("The following content heavily relies on the correct configuration of ")),o(c,{to:"/en/guide/navigate-attribute.html"},{default:r(()=>n[2]||(n[2]=[s("strong",null,"Navigation Properties",-1)])),_:1}),n[4]||(n[4]=a(". Please learn about it before proceeding!"))]),n[6]||(n[6]=e(`<h2 id="setting-boundaries" tabindex="-1"><a class="header-anchor" href="#setting-boundaries" aria-hidden="true">#</a> Setting Boundaries</h2><p>Define a primary entity class as the aggregate root and establish a safe jurisdictional boundary. During CRUD operations, everything within the boundary is treated as a whole.</p><p>Navigation properties outside the boundary will be ignored during recursive <code>insert, update, delete</code> operations:</p><ul><li>ManyToOne</li><li>ManyToMany (external tables)</li><li>PgArrayToMany</li></ul><p>Navigation properties within the boundary will be cascaded during recursive <code>insert, update, delete</code> operations:</p><ul><li>OneToOne</li><li>OneToMany</li><li>ManyToMany (intermediate tables)</li></ul><p>Example 1: Recursively handling all <code>OneToOne/OneToMany</code> navigation properties within the aggregate root</p><ul><li>OneToOne: Order &lt;-&gt; OrderExt</li><li>OneToMany: Order &lt;== OrderDetail</li><li>OneToOne: OrderDetail &lt;-&gt; OrderDetailExt</li><li>Jurisdictional boundary of aggregate root Order: Extdata, Details, Details[?].Extdata</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">OrderExt</span> Extdata <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderDetail<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderDetail<span class="token punctuation">&gt;</span></span> Details <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderExt</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field3 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Order</span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderDetail</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field4 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">OrderDetailExt</span> Extdata <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderDetailExt</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderDetailId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field5 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">OrderDetail</span> OrderDetail <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example 2: Recursively handling all <code>ManyToMany</code> navigation properties corresponding to intermediate tables within the aggregate root</p><ul><li>ManyToMany: Order &lt;=&gt; Tag</li><li>The aggregate root Order will manage intermediate table data for <code>OrderTag</code> based on <code>Tags</code>.</li><li>The aggregate root Order will not manage the <code>Tag</code> entity class or navigation properties extending from Tag (external tables are outside the jurisdiction).</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ..</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ManyToMany <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">OrderTag</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Tag<span class="token punctuation">&gt;</span></span> Tags <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderTag</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> TagId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Order</span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>TagId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Tag</span> Tag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Tag</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ManyToMany <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">OrderTag</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> Orders <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inserting-data" tabindex="-1"><a class="header-anchor" href="#inserting-data" aria-hidden="true">#</a> Inserting Data</h2><p>According to the defined boundaries, cascading insertions will automatically occur within the boundary.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
<span class="token punctuation">{</span>
    Field2 <span class="token operator">=</span> <span class="token string">&quot;field2&quot;</span><span class="token punctuation">,</span>
    Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderExt</span> <span class="token punctuation">{</span> Field3 <span class="token operator">=</span> <span class="token string">&quot;field3&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>OrderDetail<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetail</span> <span class="token punctuation">{</span> Field4 <span class="token operator">=</span> <span class="token string">&quot;field4_01&quot;</span><span class="token punctuation">,</span> Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetailExt</span> <span class="token punctuation">{</span> Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_01&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetail</span> <span class="token punctuation">{</span> Field4 <span class="token operator">=</span> <span class="token string">&quot;field4_02&quot;</span><span class="token punctuation">,</span> Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetailExt</span> <span class="token punctuation">{</span> Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_02&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetail</span> <span class="token punctuation">{</span> Field4 <span class="token operator">=</span> <span class="token string">&quot;field4_03&quot;</span><span class="token punctuation">,</span> Extdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderDetailExt</span> <span class="token punctuation">{</span> Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_03&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Tags <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Tag<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
repository<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cascading insert</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Inserts records into the Order table;</li><li>Inserts records into the OrderExt table;</li><li>Inserts records into the OrderDetail table;</li><li>Inserts records into the OrderDetailExt table;</li><li>Inserts records into the OrderTag table (will not insert records into the Tag table).</li></ul><blockquote><p>Note: Even if <code>order.Tags</code> do not exist in the database, no records will be inserted into the Tag table.</p></blockquote><h2 id="querying-data" tabindex="-1"><a class="header-anchor" href="#querying-data" aria-hidden="true">#</a> Querying Data</h2><p>According to the defined boundaries, queries will automatically <code>Include/IncludeMany</code> content within the boundaries.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span>Select
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is equivalent to:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Details<span class="token punctuation">,</span> 
        then <span class="token operator">=&gt;</span> then<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Tags<span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Extending query boundaries:</p><blockquote><p>Hint: <code>[AggregateRootBoundary(&quot;name&quot;, Break = true)]</code> sets the boundary range; see below for more details.</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">OrderRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AggregateRootRepository<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">OrderRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">,</span> <span class="token class-name">UnitOfWorkManager</span> uowManager<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>uowManager<span class="token punctuation">?.</span>Orm <span class="token operator">??</span> fsql<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>AggregateRootUtils<span class="token punctuation">.</span><span class="token function">GetAutoIncludeQueryStaicCode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fsql<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Console output will include Include/IncludeMany strings, equivalent to the SelectDiy code block below</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ISelect<span class="token punctuation">&lt;</span>IFreeSql<span class="token punctuation">&gt;</span></span> Select <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>SelectDiy
        <span class="token comment">//.TrackToList(this.SelectAggregateRootTracking) State tracking</span>
        <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Details<span class="token punctuation">,</span> 
            then <span class="token operator">=&gt;</span> then<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Extdata<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Tags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Overriding <code>Select</code> can allow querying data outside the boundary (e.g., ManyToOne navigation properties), but <code>add/update/delete</code> will still follow the default boundary rules.</p><p>Manually using <code>SelectDiy</code> <code>Include/IncludeMany</code> to include content, if it is less than the default boundary rules, it is recommended not to enable <code>state tracking</code> (saving data may cause inconsistencies); otherwise, it should be enabled (details can be seen in <code>Updating Data</code>).</p><h2 id="deleting-data" tabindex="-1"><a class="header-anchor" href="#deleting-data" aria-hidden="true">#</a> Deleting Data</h2><p>According to the defined boundaries, cascading deletions will automatically occur within the boundary.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>repository<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Deletes records in the OrderExt table;</li><li>Deletes records in the OrderDetailExt table;</li><li>Deletes records in the OrderDetail table;</li><li>Deletes records in the OrderTag table (will not delete records in the Tag table);</li><li>Deletes records in the Order table;</li></ul><p>Data deletion is done recursively in memory for the <code>order</code> instance, so you need to query the repository in advance, which may have performance drawbacks with large amounts of data.</p><p>If cascading delete functionality is set in the database table&#39;s foreign key, you only need to delete records in the Order table and do not need to query in advance.</p><h2 id="updating-data" tabindex="-1"><a class="header-anchor" href="#updating-data" aria-hidden="true">#</a> Updating Data</h2><p>According to the defined boundaries, cascading saves will automatically occur within the boundary during updates.</p><p><code>repository.Attach</code> stores a snapshot of the data before the update (queries automatically create snapshots), which is called a copy. During <code>repository.Update</code>, the current state is compared with the copy to save changes.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> repository<span class="token punctuation">.</span>Select<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Automatically attached</span>
order<span class="token punctuation">.</span>Tags<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tag</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Details<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Extdata<span class="token punctuation">.</span>Field5 <span class="token operator">=</span> <span class="token string">&quot;field5_01_01&quot;</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Field2 <span class="token operator">=</span> <span class="token string">&quot;field2_02&quot;</span><span class="token punctuation">;</span>
repository<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Adds records to the OrderTag table (will not manage Tag table records);</li><li>Deletes records from the OrderDetail table;</li><li>Deletes records from the OrderDetailExt table;</li><li>Updates records in the OrderDetailExt table;</li><li>Updates records in the Order table;</li></ul><p><code>Complete Save</code> first queries and then updates, which is easier to understand and ensures data consistency. However, if the content under the aggregate root is large, performance issues may arise.</p><p>Here is the translation of the document into English, keeping the Markdown format unchanged:</p><hr><p>For example, the comment data under <code>Order</code> has about 1000 records, and new records are continuously added every day. Loading all records into memory and then saving them each time is too costly.</p><p>By leveraging the characteristics of comparison saving, we can indirectly implement <code>record appending</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ..</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderComment<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderComment<span class="token punctuation">&gt;</span></span> Comments <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">OrderComment</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field6 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Single table data</span>
repository<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// At snapshot time Comments is NULL/EMPTY</span>
order<span class="token punctuation">.</span>Comments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>OrderComment<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Comments<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderComment</span> <span class="token punctuation">{</span> Field6 <span class="token operator">=</span> <span class="token string">&quot;field6_01&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
order<span class="token punctuation">.</span>Comments<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderComment</span> <span class="token punctuation">{</span> Field6 <span class="token operator">=</span> <span class="token string">&quot;field6_02&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repository<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Using fsql only queries the single table data;</li><li>The <code>order</code> itself has not changed, so no update is made to the <code>Order</code> table record;</li><li>Two <code>OrderComment</code> table records are added;</li></ul><blockquote><p>Why not directly perform single-table operations on <code>OrderComment</code>???</p></blockquote><blockquote><p>The answer is for you to figure out!!!</p></blockquote><p><code>Comparison Saving</code> Rule Explanation:</p><table><thead><tr><th>Navigation Property</th><th>Snapshot</th><th>Latest</th><th>Result</th></tr></thead><tbody><tr><td>OneToOne</td><td>NULL</td><td>Object</td><td><code>Add</code> latest record</td></tr><tr><td>OneToOne</td><td>Object</td><td>NULL</td><td><code>Delete</code> snapshot record</td></tr><tr><td>OneToOne</td><td>Object</td><td>Object</td><td>If content changes, <code>Update</code> latest record; otherwise, <code>Ignore</code></td></tr><tr><td>OneToMany</td><td>NULL/Empty</td><td>List</td><td><code>Add</code> latest list records</td></tr><tr><td>OneToMany</td><td>List</td><td>NULL</td><td><code>Ignore</code></td></tr><tr><td>OneToMany</td><td>List</td><td>Empty</td><td><code>Delete</code> snapshot list records</td></tr><tr><td>OneToMany</td><td>List</td><td>List</td><td><code>Comparison Saving</code> calculates <code>Add</code>, <code>Update</code>, and <code>Delete</code> behaviors</td></tr></tbody></table><blockquote><p>ManyToMany only operates on the <code>intermediate table</code> (external table is out of scope), with the comparison saving mechanism being the same as OneToMany</p></blockquote><h2 id="inserting-or-updating-data" tabindex="-1"><a class="header-anchor" href="#inserting-or-updating-data" aria-hidden="true">#</a> Inserting or Updating Data</h2><p><code>InsertOrUpdate</code> execution logic relies on the <code>primary key</code> and <code>state management</code> of the aggregate root object, where state management stores the snapshot.</p><ol><li>If the primary key is <code>auto-increment</code>:</li></ol><ul><li>If no value, <code>Insert data</code>;</li><li>If there is a value, determine state management; <ul><li>If exists, compare with the snapshot to <code>Update data</code>;</li><li>If not exists, query the database; (performance issues with large content) <ul><li>If exists, compare with the queried content to <code>Update data</code>;</li><li>If not exists, <code>Insert data</code>;</li></ul></li></ul></li></ul><ol start="2"><li>If the primary key is not auto-increment:</li></ol><ul><li>If no value, <code>Throw exception</code>;</li><li>If there is a value, same logic as above;</li></ul><h2 id="extending-boundaries" tabindex="-1"><a class="header-anchor" href="#extending-boundaries" aria-hidden="true">#</a> Extending Boundaries</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ..</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AggregateRootBoundary</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;solution_1&quot;</span><span class="token punctuation">,</span> Break <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> BreakThen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AggregateRootBoundary</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;solution_2&quot;</span><span class="token punctuation">,</span> Break <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>OrderDetail<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderDetail<span class="token punctuation">&gt;</span></span> Details <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

repository<span class="token punctuation">.</span><span class="token function">ChangeBoundary</span><span class="token punctuation">(</span><span class="token string">&quot;solution_1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Break: When recursing, terminate the current navigation property</li><li>BreakThen: When recursing, terminate further exploration</li></ul><p><code>AggregateRootBoundary</code> can set navigation properties within the boundary to narrow the range.</p><p>It can also set non-boundary navigation properties ManyToOne/ManyToMany/PgArrayToMany, which are only valid for queries, but will still be ignored during <code>Add</code>, <code>Delete</code>, and <code>Update</code>.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><ol><li><strong>Understand Boundaries</strong>: Understand the boundary rules presented in this document.</li></ol><ul><li>ManyToOne navigation properties are <code>outside the boundary</code>;</li><li>ManyToMany navigation properties, <code>intermediate table</code> (OrderTag) is within the boundary, <code>external table</code> (Tag) is <code>outside the boundary</code>;</li><li>OneToOne navigation properties are within the boundary;</li><li>OneToMany navigation properties are within the boundary;</li></ul><p><code>AggregateRootRepository</code> only performs recursive CRUD operations on data within the boundary, treating the aggregate root as a whole.</p><p>Special cases can inherit and override the <code>Select</code> property to expand or narrow the query content:</p><ul><li>Insert/Delete/Update will not perform operations on data <code>outside</code> the expanded boundary;</li><li>Update with narrowed query content will not delete unqueried content due to navigation property values being NULL;</li></ul><ol start="2"><li><strong>Use Transactions Wisely</strong>: Use transactions to solve consistency issues in operations.</li></ol>`,68))])}const y=l(d,[["render",m],["__file","aggregateroot.html.vue"]]);export{y as default};
