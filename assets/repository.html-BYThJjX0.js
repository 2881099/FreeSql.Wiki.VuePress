import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as l,d as u,w as a,a as n,b as s,e as d}from"./app-Bj4-WiZl.js";const r={},k=n("p",null,[n("code",null,"FreeSql.DbContext"),s(" references the abp vnext interface specification and implements a generic repository layer functionality (CURD), which can be understood as an enhanced version of traditional Data Access Layer (DAL).")],-1),m=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s(" dotnet "),n("span",{class:"token function"},"add"),s(` package FreeSql.DbContext
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`Install-Package FreeSql.DbContext
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),v=d(`<ul><li>Select/Attach snapshot objects, Update only changes modified fields;</li><li>Insert data, optimized execution with ExecuteAffrows/ExecuteIdentity/ExecuteInserted across various databases;</li><li>Cascade save and cascade delete (one-to-one, one-to-many, many-to-many);</li><li>Repository + Unit of Work design pattern, simple and unified style;</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Song</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Note: Repository objects are not thread-safe, so they should not be used concurrently across multiple threads.</p></blockquote><h2 id="temporary-usage" tabindex="-1"><a class="header-anchor" href="#temporary-usage" aria-hidden="true">#</a> Temporary Usage</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> curd <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Suitable for creating repositories temporarily in local code and disposing of them when done.</p></blockquote><h2 id="generic-repository-dependency-injection" tabindex="-1"><a class="header-anchor" href="#generic-repository-dependency-injection" aria-hidden="true">#</a> Generic Repository (Dependency Injection)</h2><p>Method 2: Generic Repository + Dependency Injection (.NET Core);</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// First, refer to the entry documentation to inject IFreeSql</span>
services<span class="token punctuation">.</span><span class="token function">AddFreeRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use generic repository in the controller</span>
<span class="token keyword">public</span> <span class="token function">SongsController</span><span class="token punctuation">(</span><span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> songRepository<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inherited-repository-dependency-injection" tabindex="-1"><a class="header-anchor" href="#inherited-repository-dependency-injection" aria-hidden="true">#</a> Inherited Repository (Dependency Injection)</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// First, refer to the entry documentation to inject IFreeSql</span>
services<span class="token punctuation">.</span><span class="token function">AddFreeRepository</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SongRepository</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No need to pass the second parameter if no inherited repositories</span>

<span class="token comment">// Use inherited repositories</span>
<span class="token keyword">public</span> <span class="token function">SongsController</span><span class="token punctuation">(</span><span class="token class-name">SongRepository</span> repo1<span class="token punctuation">,</span> <span class="token class-name">TopicRepository</span> repo2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SongRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">SongRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// Add additional methods beyond CURD here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update-comparison" tabindex="-1"><a class="header-anchor" href="#update-comparison" aria-hidden="true">#</a> Update Comparison</h2><p>Only update changed properties:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Snapshot item at this point</span>
item<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;newtitle&quot;</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Compare changes from snapshot</span>
<span class="token comment">// UPDATE \`tb_topic\` SET \`Title\` = ?p_0</span>
<span class="token comment">// WHERE (\`Id\` = 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Does it seem cumbersome to query first and then update?</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Topic</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Snapshot item at this point</span>
item<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">&quot;newtitle&quot;</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Compare changes from snapshot</span>
<span class="token comment">// UPDATE \`tb_topic\` SET \`Title\` = ?p_0</span>
<span class="token comment">// WHERE (\`Id\` = 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>repo.CompareState(item)</code> can retrieve the status change information of <code>item</code>.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// Compare entities and calculate properties that have changed values, as well as the old and new values of these properties.</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newdata<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>The latest entity object, which will be compared with the attached entity&#39;s state.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>key: property name, value: [old value, new value]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">CompareState</span><span class="token punctuation">(</span><span class="token class-name">TEntity</span> newdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="login-information-dependency-injection" tabindex="-1"><a class="header-anchor" href="#login-information-dependency-injection" aria-hidden="true">#</a> Login Information (Dependency Injection)</h2><p><code>repo.DbContextOptions.AuditValue</code> is suitable for integration with AddScoped (Dependency Injection) to uniformly set login information.</p><p>Example: Automatically use login information when inserting/updating with repository</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyRepository<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyRepositoryOptions</span>
<span class="token punctuation">{</span>
    AuditValue <span class="token operator">=</span> e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>AuditValueType <span class="token operator">==</span> AuditValueType<span class="token punctuation">.</span>Insert <span class="token operator">&amp;&amp;</span>
            e<span class="token punctuation">.</span>Object <span class="token keyword">is</span> <span class="token class-name">IEntityCreated</span> obj1 <span class="token operator">&amp;&amp;</span> obj1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj1<span class="token punctuation">.</span>CreatedUserId <span class="token operator">=</span> user<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
            obj1<span class="token punctuation">.</span>CreatedUserName <span class="token operator">=</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>AuditValueType <span class="token operator">==</span> AuditValueType<span class="token punctuation">.</span>Update <span class="token operator">&amp;&amp;</span>
            e<span class="token punctuation">.</span>Object <span class="token keyword">is</span> <span class="token class-name">IEntityModified</span> obj2 <span class="token operator">&amp;&amp;</span> obj2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj2<span class="token punctuation">.</span>ModifiedUserId <span class="token operator">=</span> user<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
            obj2<span class="token punctuation">.</span>ModifiedUserName <span class="token operator">=</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span> <span class="token keyword">where</span> <span class="token class-name">TEntity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">,</span> <span class="token class-name">MyRepositoryOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>fsql<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">?.</span>AuditValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> DbContextOptions<span class="token punctuation">.</span>AuditValue <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> options<span class="token punctuation">.</span><span class="token function">AuditValue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MyRepository<span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">&gt;</span></span></span> <span class="token keyword">where</span> <span class="token class-name">TEntity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyRepository</span><span class="token punctuation">(</span><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">,</span> <span class="token class-name">MyRepositoryOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>fsql<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyRepositoryOptions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>DbContextAuditValueEventArgs<span class="token punctuation">&gt;</span></span> AuditValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="compatibility-issues" tabindex="-1"><a class="header-anchor" href="#compatibility-issues" aria-hidden="true">#</a> Compatibility Issues</h2><p>The <code>output inserted</code> feature provided by SqlServer allows quick retrieval of inserted data when tables use auto-increment or default values defined in the database. PostgreSQL also has similar functionality, which is convenient but not supported by every database.</p><p>When using databases that do not support this feature (Sqlite/MySql/Oracle/Dameng/Nandasoft/MsAccess), and entities use auto-increment properties, batch inserts in the repository will be executed one by one. Consider the following improvements:</p><ul><li>Use UUID as the primary key (i.e., Guid);</li><li>Avoid using default value functionality in the database;</li></ul><h2 id="cascade-save" tabindex="-1"><a class="header-anchor" href="#cascade-save" aria-hidden="true">#</a> Cascade Save</h2><p>Please refer to the document <a href="cascade-saving">《Cascade Save》</a></p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><table><thead><tr><th>Property</th><th>Return Value</th><th>Description</th></tr></thead><tbody><tr><td>EntityType</td><td>Type</td><td>The entity type the repository is currently operating on, note that it may not be TEntity</td></tr><tr><td>UnitOfWork</td><td>IUnitOfWork</td><td>The unit of work currently in use</td></tr><tr><td>Orm</td><td>IFreeSql</td><td>The ORM currently in use</td></tr><tr><td>DbContextOptions</td><td>DbContextOptions</td><td>The DbContext settings currently in use, changes to these settings do not affect others</td></tr><tr><td>UpdateDiy</td><td>IUpdate&lt;TEntity&gt;</td><td>Preparing to update data, in the same transaction as the repository</td></tr><tr><td>Select</td><td>ISelect&lt;TEntity&gt;</td><td>Preparing to query data</td></tr></tbody></table><table><thead><tr><th>Method</th><th>Return Value</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td>AsType</td><td>void</td><td>Type</td><td>Change the entity type the repository is currently operating on</td></tr><tr><td>Get</td><td>TEntity</td><td>TKey</td><td>Query data by primary key</td></tr><tr><td>Find</td><td>TEntity</td><td>TKey</td><td>Query data by primary key</td></tr><tr><td>Delete</td><td>int</td><td>TKey</td><td>Delete data by primary key</td></tr><tr><td>Delete</td><td>int</td><td>Lambda</td><td>Delete data based on lambda conditions</td></tr><tr><td>Delete</td><td>int</td><td>TEntity</td><td>Delete data</td></tr><tr><td>Delete</td><td>int</td><td>IEnumerable&lt;TEntity&gt;</td><td>Batch delete data</td></tr><tr><td><a href="cascade-delete">DeleteCascadeByDatabase</a></td><td>List&lt;object&gt;</td><td>Lambda</td><td>Recursively delete data by navigation properties</td></tr><tr><td>Insert</td><td>-</td><td>TEntity</td><td>Insert data, if the entity has auto-increment columns, the auto-increment value will be filled into the entity after insertion</td></tr><tr><td>Insert</td><td>-</td><td>IEnumerable&lt;TEntity&gt;</td><td>Batch insert data</td></tr><tr><td>Update</td><td>-</td><td>TEntity</td><td>Update data</td></tr><tr><td>Update</td><td>-</td><td>IEnumerable&lt;TEntity&gt;</td><td>Batch update data</td></tr><tr><td>InsertOrUpdate</td><td>-</td><td>TEntity</td><td>Insert or update data</td></tr><tr><td>FlushState</td><td>-</td><td>None</td><td>Clear state management data</td></tr><tr><td>Attach</td><td>-</td><td>TEntity</td><td>Attach entity to state management, used for updating or deleting without querying</td></tr><tr><td>Attach</td><td>-</td><td>IEnumerable&lt;TEntity&gt;</td><td>Batch attach entities to state management</td></tr><tr><td>AttachOnlyPrimary</td><td>-</td><td>TEntity</td><td>Attach only primary key data of entity to state management</td></tr><tr><td><a href="insert-or-update#_4-table-beginedit">BeginEdit</a></td><td>-</td><td>List&lt;TEntity&gt;</td><td>Prepare to edit a list of entities</td></tr><tr><td>EndEdit</td><td>int</td><td>None</td><td>Complete editing data and perform save actions</td></tr></tbody></table><blockquote><p>State management allows Update to only update changed fields (not all fields), and using Attach and Update is very comfortable.</p></blockquote>`,32);function b(h,g){const p=c("CodeTabs");return i(),l("div",null,[k,u(p,{id:"3",data:[{id:".NET CLI"},{id:".NET Framework"}],active:0},{title0:a(({value:t,isActive:e})=>[s(".NET CLI")]),title1:a(({value:t,isActive:e})=>[s(".NET Framework")]),tab0:a(({value:t,isActive:e})=>[m]),tab1:a(({value:t,isActive:e})=>[y]),_:1}),v])}const T=o(r,[["render",b],["__file","repository.html.vue"]]);export{T as default};
