import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,a as p}from"./app-CTlmw5vp.js";const e={};function o(c,n){return a(),t("div",null,n[0]||(n[0]=[p(`<h1 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> Performance</h1><p>FreeSql, while implementing powerful features, does not compromise on performance. Operations involving reflection or time-consuming tasks are handled with caching. Data reading uses ExpressionTree, making FreeSql&#39;s entity data parsing speed very close to that of Dapper.</p><h1 id="insert-test" tabindex="-1"><a class="header-anchor" href="#insert-test" aria-hidden="true">#</a> Insert Test</h1><h3 id="test-results-52-fields" tabindex="-1"><a class="header-anchor" href="#test-results-52-fields" aria-hidden="true">#</a> Test Results (52 Fields)</h3><table><thead><tr><th></th><th>180K</th><th>10K</th><th>5K</th><th>2K</th><th>1K</th><th>500</th><th>100</th><th>50</th></tr></thead><tbody><tr><td>MySql 5.5 ExecuteAffrows</td><td>38,481</td><td>2,234</td><td>1,136</td><td>284</td><td>239</td><td>167</td><td>66</td><td>30</td></tr><tr><td>MySql 5.5 ExecuteMySqlBulkCopy</td><td>28,405</td><td>1,142</td><td>657</td><td>451</td><td>435</td><td>592</td><td>47</td><td>22</td></tr><tr><td>SqlServer Express ExecuteAffrows</td><td>402,355</td><td>24,847</td><td>11,465</td><td>4,971</td><td>2,437</td><td>915</td><td>138</td><td>88</td></tr><tr><td>SqlServer Express ExecuteSqlBulkCopy</td><td>21,065</td><td>578</td><td>326</td><td>139</td><td>105</td><td>79</td><td>60</td><td>48</td></tr><tr><td>PostgreSQL 10 ExecuteAffrows</td><td>46,756</td><td>3,294</td><td>2,269</td><td>1,019</td><td>374</td><td>209</td><td>51</td><td>37</td></tr><tr><td>PostgreSQL 10 ExecutePgCopy</td><td>10,090</td><td>583</td><td>337</td><td>136</td><td>88</td><td>61</td><td>30</td><td>25</td></tr><tr><td>Oracle XE ExecuteAffrows</td><td>-</td><td>-</td><td>-</td><td>-</td><td>24,528</td><td>10,648</td><td>571</td><td>200</td></tr><tr><td>Sqlite ExecuteAffrows</td><td>28,554</td><td>1,149</td><td>701</td><td>327</td><td>155</td><td>91</td><td>44</td><td>35</td></tr></tbody></table><blockquote><p>180K Explanation: Insert 180,000 records; the numbers in the table represent execution time (in ms).</p></blockquote><blockquote><p>Oracle&#39;s insertion performance is undeniable, but the student edition might have significant limitations.</p></blockquote><p>Note: The results for open-source databases are quite meaningful, but there may be significant performance differences between commercial database versions.</p><h3 id="test-results-10-fields" tabindex="-1"><a class="header-anchor" href="#test-results-10-fields" aria-hidden="true">#</a> Test Results (10 Fields)</h3><table><thead><tr><th></th><th>180K</th><th>10K</th><th>5K</th><th>2K</th><th>1K</th><th>500</th><th>100</th><th>50</th></tr></thead><tbody><tr><td>MySql 5.5 ExecuteAffrows</td><td>11,171</td><td>866</td><td>366</td><td>80</td><td>83</td><td>50</td><td>24</td><td>34</td></tr><tr><td>MySql 5.5 ExecuteMySqlBulkCopy</td><td>6,504</td><td>399</td><td>257</td><td>116</td><td>87</td><td>100</td><td>16</td><td>16</td></tr><tr><td>SqlServer Express ExecuteAffrows</td><td>47,204</td><td>2,275</td><td>1,108</td><td>488</td><td>279</td><td>123</td><td>35</td><td>16</td></tr><tr><td>SqlServer Express ExecuteSqlBulkCopy</td><td>4,248</td><td>127</td><td>71</td><td>30</td><td>48</td><td>14</td><td>11</td><td>10</td></tr><tr><td>PostgreSQL 10 ExecuteAffrows</td><td>9,786</td><td>568</td><td>336</td><td>157</td><td>102</td><td>34</td><td>9</td><td>6</td></tr><tr><td>PostgreSQL 10 ExecutePgCopy</td><td>4,081</td><td>167</td><td>93</td><td>39</td><td>21</td><td>12</td><td>4</td><td>2</td></tr><tr><td>Oracle XE ExecuteAffrows</td><td>-</td><td>-</td><td>-</td><td>-</td><td>2,394</td><td>731</td><td>67</td><td>33</td></tr><tr><td>Sqlite ExecuteAffrows</td><td>4,524</td><td>246</td><td>137</td><td>94</td><td>35</td><td>19</td><td>14</td><td>11</td></tr></tbody></table><blockquote><p>The test results were conducted on the same operating system and with warm-up.</p></blockquote><blockquote><p>The ExecuteMySqlBulkCopy method is implemented in FreeSql.Provider.MySqlConnector.</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Test entity class</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInsert10c</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName0 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PassWord0 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime0 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PassWord1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PassWord2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Generate test data</span>
<span class="token class-name">IFreeSql</span> orm <span class="token operator">=</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> testCount <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> t10cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>TestInsert10c<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> testCount<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestInsert10c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        orm<span class="token punctuation">.</span><span class="token function">SetEntityValueWithPropertyName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TestInsert10c</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token string">&quot;UserName&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">,</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orm<span class="token punctuation">.</span><span class="token function">SetEntityValueWithPropertyName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TestInsert10c</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token string">&quot;PassWord&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">,</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orm<span class="token punctuation">.</span><span class="token function">SetEntityValueWithPropertyName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TestInsert10c</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token string">&quot;CreateTime&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t10cs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="query-test" tabindex="-1"><a class="header-anchor" href="#query-test" aria-hidden="true">#</a> Query Test</h1><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> mysql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FreeSql<span class="token punctuation">.</span>FreeSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseConnectionString</span><span class="token punctuation">(</span>FreeSql<span class="token punctuation">.</span>DataType<span class="token punctuation">.</span>MySql<span class="token punctuation">,</span> <span class="token string">&quot;Data Source=127.0.0.1;Port=3306;User ID=root;Password=root;Initial Catalog=cccddd;Charset=utf8;SslMode=none;Max pool size=100&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// Null defaults to logging to the console, affecting test results. Here, an empty log output object is provided.</span>
    <span class="token punctuation">.</span><span class="token function">UseAutoSyncStructure</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// Disable automatic migration</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Please ensure it is defined as a Singleton</span>

<span class="token keyword">class</span> <span class="token class-name">Song</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> Create_time <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Is_deleted <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test Method: Run twice and use the performance report from the second run to avoid unfair results from the first run.</p><h3 id="test-results" tabindex="-1"><a class="header-anchor" href="#test-results" aria-hidden="true">#</a> Test Results</h3><table><thead><tr><th></th><th>Quantity</th><th>Query&lt;Class&gt;</th><th>Query&lt;Tuple&gt;</th><th>Query&lt;dynamic&gt;</th></tr></thead><tbody><tr><td>Dapper.Query(sql)</td><td>131072</td><td>623.4959ms</td><td>424.2411ms</td><td>644.8897ms</td></tr><tr><td>FreeSql.Query(sql)</td><td>131072</td><td>647.0552ms</td><td>577.3532ms</td><td>944.7454ms</td></tr><tr><td>FreeSql.ToList</td><td>131072</td><td>622.8980ms</td><td>435.3532ms</td><td>-</td></tr></tbody></table><p>FreeSql showed a slight performance difference, as it supports more types, which may require parsing, recursion, or looping.</p><blockquote><p>Dapper lacks batch insert/update/delete functionalities and executes a single SQL command, making its test results less meaningful.</p></blockquote><blockquote><p>FreeSql batch insert command used: INSERT INTO Song (...) VALUES(...),VALUES(...),VALUES(...)...</p></blockquote><h3 id="list-dapper-query-class-vs-freesql-query-class" tabindex="-1"><a class="header-anchor" href="#list-dapper-query-class-vs-freesql-query-class" aria-hidden="true">#</a> List Dapper.Query&lt;Class&gt; VS FreeSql.Query&lt;Class&gt;</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QueryEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> dplist1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>MasterPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dplist1 <span class="token operator">=</span> Dapper<span class="token punctuation">.</span>SqlMapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token string">&quot;select * from song&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; Query Entity Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dplist1<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: Dapper&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> t3 <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;select * from song&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; Query Entity Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t3<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: FreeSql*&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dapper-query-tuple-vs-freesql-query-tuple" tabindex="-1"><a class="header-anchor" href="#dapper-query-tuple-vs-freesql-query-tuple" aria-hidden="true">#</a> Dapper.Query&lt;Tuple&gt; VS FreeSql.Query&lt;Tuple&gt;</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QueryTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> dplist2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>MasterPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dplist2 <span class="token operator">=</span> Dapper<span class="token punctuation">.</span>SqlMapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token string">&quot;select * from song&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; Query Tuple Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dplist2<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: Dapper&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> t4 <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;select * from song&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; Query Tuple Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t4<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: FreeSql*&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dapper-query-dynamic-vs-freesql-query-dynamic" tabindex="-1"><a class="header-anchor" href="#dapper-query-dynamic-vs-freesql-query-dynamic" aria-hidden="true">#</a> Dapper.Query&lt;dynamic&gt; VS FreeSql.Query&lt;dynamic&gt;</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QueryDynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> dplist3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>MasterPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dplist3 <span class="token operator">=</span> Dapper<span class="token punctuation">.</span>SqlMapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token string">&quot;select * from song&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; Query Dynamic Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dplist3<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: Dapper&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> t5 <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;select * from song&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; Query Dynamic Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t3<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: FreeSql*&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dapper-query-vs-freesql-tolist" tabindex="-1"><a class="header-anchor" href="#dapper-query-vs-freesql-tolist" aria-hidden="true">#</a> Dapper.Query VS FreeSql.ToList</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QueryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> t3 <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; ToList Entity Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t3<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: FreeSql*&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    time<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> dplist1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> g<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span>MasterPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dplist1 <span class="token operator">=</span> Dapper<span class="token punctuation">.</span>SqlMapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token string">&quot;select * from song&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    time<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">; Query Entity Counts: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dplist1<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">; ORM: Dapper&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)]))}const i=s(e,[["render",o],["__file","performance.html.vue"]]);export{i as default};
