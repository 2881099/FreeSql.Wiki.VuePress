import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as u,a as p,b as a,d as s,e,w as o}from"./app-CsSqBnn9.js";const k={};function r(d,n){const t=l("RouterLink");return i(),u("div",null,[n[6]||(n[6]=p(`<h1 id="unitofwork-manager-✨" tabindex="-1"><a class="header-anchor" href="#unitofwork-manager-✨" aria-hidden="true">#</a> UnitOfWork Manager ✨</h1><p>This article guides how to manage transactions using attributes (annotations) in an ASP.NET Core project.</p><blockquote><p>UnitOfWorkManager can only manage transactions for Repository objects.</p></blockquote><p>It supports six propagation modes, making cross-method transactions very convenient, supporting both synchronous and asynchronous operations:</p><ul><li><strong>Required</strong>: Creates a new transaction if none exists; if a transaction exists, it joins that transaction. This is the default choice.</li><li><strong>Supports</strong>: Supports the current transaction; if no transaction exists, it executes as a non-transactional method.</li><li><strong>Mandatory</strong>: Uses the current transaction; throws an exception if no current transaction exists.</li><li><strong>NotSupported</strong>: Executes as a non-transactional operation; if a transaction exists, it suspends the current transaction.</li><li><strong>Never</strong>: Executes as a non-transactional operation; throws an exception if a transaction exists.</li><li><strong>Nested</strong>: Executes in a nested transaction mode.</li></ul><p>The final transaction code looks like this:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SongService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> _songRepository<span class="token punctuation">;</span>
    <span class="token keyword">readonly</span> <span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Detail<span class="token punctuation">&gt;</span></span> _detailRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SongService</span><span class="token punctuation">(</span><span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> songRepository<span class="token punctuation">,</span> <span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Detail<span class="token punctuation">&gt;</span></span> detailRepository<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _songRepository <span class="token operator">=</span> songRepository<span class="token punctuation">;</span>
        _detailRepository <span class="token operator">=</span> detailRepository<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Transactional</span></span><span class="token punctuation">]</span>
    <span class="token keyword">async</span> <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// All injected repository objects are within the same transaction</span>
        <span class="token keyword">await</span> _songRepository<span class="token punctuation">.</span><span class="token function">InsertAsync</span><span class="token punctuation">(</span>xxx1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> _detailRepository<span class="token punctuation">.</span><span class="token function">DeleteAsync</span><span class="token punctuation">(</span>xxx2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-1-dependency-injection-and-middleware" tabindex="-1"><a class="header-anchor" href="#step-1-dependency-injection-and-middleware" aria-hidden="true">#</a> Step 1: Dependency Injection and Middleware</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Dependency Injection</span>
services<span class="token punctuation">.</span><span class="token function">AddFreeRepository</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Startup</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UnitOfWorkManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Middleware</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        TransactionalAttribute<span class="token punctuation">.</span><span class="token function">SetServiceProvider</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>RequestServices<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-2-introduce-dynamic-proxy-library" tabindex="-1"><a class="header-anchor" href="#step-2-introduce-dynamic-proxy-library" aria-hidden="true">#</a> Step 2: Introduce Dynamic Proxy Library</h2><blockquote><p>Rougamo: https://github.com/inversionhourglass/Rougamo</p></blockquote><blockquote><p>dotnet add package Rougamo.Fody</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Method<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionalAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Rougamo<span class="token punctuation">.</span>MoAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Propagation</span> Propagation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>Required<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IsolationLevel</span> IsolationLevel <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token operator">=&gt;</span> m_IsolationLevel<span class="token punctuation">.</span>Value<span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token operator">=&gt;</span> m_IsolationLevel <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">IsolationLevel<span class="token punctuation">?</span></span> m_IsolationLevel<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span>IServiceProvider<span class="token punctuation">&gt;</span></span> m_ServiceProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span>IServiceProvider<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetServiceProvider</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m_ServiceProvider<span class="token punctuation">.</span>Value <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span>

    <span class="token class-name">IUnitOfWork</span> _uow<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEntry</span><span class="token punctuation">(</span><span class="token class-name">MethodContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> uowManager <span class="token operator">=</span> m_ServiceProvider<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UnitOfWorkManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _uow <span class="token operator">=</span> uowManager<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Propagation<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_IsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnExit</span><span class="token punctuation">(</span><span class="token class-name">MethodContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Task</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>RealReturnType<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>Task<span class="token punctuation">)</span>context<span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token function">_OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">_OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _uow<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> _uow<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">finally</span>
            <span class="token punctuation">{</span>
                _uow<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>UnitOfWorkManager Members</th><th>Description</th></tr></thead><tbody><tr><td>IUnitOfWork Current</td><td>Returns the current unit of work</td></tr><tr><td>void Binding(repository)</td><td>Manages the transaction of the repository</td></tr><tr><td>IUnitOfWork Begin(propagation, isolationLevel)</td><td>Creates a unit of work</td></tr></tbody></table><h2 id="extension-custom-repository" tabindex="-1"><a class="header-anchor" href="#extension-custom-repository" aria-hidden="true">#</a> Extension: Custom Repository</h2><p>The above example uses generic repositories. If you need to override a repository, how to ensure it shares the same transaction with <code>UnitOfWorkManager</code>?</p><p>Inherit from the existing <code>DefaultRepository&lt;,&gt;</code> to implement a custom repository <code>SongRepository.cs</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SongRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DefaultRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">ISongRepository</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">SongRepository</span><span class="token punctuation">(</span><span class="token class-name">UnitOfWorkManager</span> uowm<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>uowm<span class="token punctuation">?.</span>Orm<span class="token punctuation">,</span> uowm<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> <span class="token function">GetSongs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Select<span class="token punctuation">.</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Interface: <code>ISongRepository.cs</code></p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISongRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>Song<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span> <span class="token function">GetSongs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Register this service in <code>startup.cs</code></p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ISongRepository<span class="token punctuation">,</span> SongRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="extension-multi-database" tabindex="-1"><a class="header-anchor" href="#extension-multi-database" aria-hidden="true">#</a> Extension: Multi-Database</h2>`,24)),a("p",null,[n[1]||(n[1]=s("FreeSql.Cloud provides ")),e(t,{to:"/en/guide/sharding.html#db-sharding-freesql-cloud"},{default:o(()=>n[0]||(n[0]=[s("cross-database access")])),_:1}),n[2]||(n[2]=s(". This section explains how to integrate FreeSql.Cloud with UowManager for multi-database scenarios."))]),a("blockquote",null,[a("p",null,[n[4]||(n[4]=s("Note: ")),e(t,{to:"/en/guide/multi-tenancy.html#approach-3-tenant-specific-databases"},{default:o(()=>n[3]||(n[3]=[s("Multi-tenant Database")])),_:1}),n[5]||(n[5]=s(" should be skipped as multi-tenant requests usually only operate on one database. Just switch tenants in the middleware."))])]),n[7]||(n[7]=p(`<hr><p>Define FreeSqlCloud object using <code>DbEnum</code> as follows:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DbEnum</span> <span class="token punctuation">{</span> db1<span class="token punctuation">,</span> db2 <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreeSqlCloud</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">FreeSqlCloud<span class="token punctuation">&lt;</span>DbEnum<span class="token punctuation">&gt;</span></span></span> <span class="token comment">// Change DbEnum to string for multi-tenant management</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">FreeSqlCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">FreeSqlCloud</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> distributeKey<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>distributeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The final transaction code looks like this:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">RepositoryCloud<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">UserRepository</span><span class="token punctuation">(</span><span class="token class-name">UnitOfWorkManagerCloud</span> uowm<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db3<span class="token punctuation">,</span> uowm<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// db3</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> m_repo1<span class="token punctuation">;</span>
    <span class="token keyword">readonly</span> <span class="token class-name">BaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> m_repo2<span class="token punctuation">;</span>
    <span class="token keyword">readonly</span> <span class="token class-name">UserRepository</span> m_repo3<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span><span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> repo1<span class="token punctuation">,</span> <span class="token class-name">BaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> repo2<span class="token punctuation">,</span> <span class="token class-name">UserRepository</span> repo3<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_repo1 <span class="token operator">=</span> repo1<span class="token punctuation">;</span> <span class="token comment">// db1</span>
        m_repo2 <span class="token operator">=</span> repo2<span class="token punctuation">;</span> <span class="token comment">// db1</span>
        m_repo3 <span class="token operator">=</span> repo3<span class="token punctuation">;</span> <span class="token comment">// db3</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Transactional</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db1<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Transactional</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db3<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assume that <code>IBaseRepository&lt;T&gt;</code> defaults to <code>db1</code> for repository implementation, dependency injection is as follows:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FreeSqlCloud<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FreeSqlCloud<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Inject IFreeSql</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UnitOfWorkManagerCloud<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">RepositoryCloud<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default: db1</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> repositoryType <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>IsAbstract <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IBaseRepository</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span>repositoryType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UnitOfWorkManagerCloud</code>, <code>RepositoryCloud</code>, and <code>TransactionalAttribute</code> are the components we need to implement:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">UnitOfWorkManagerCloud</span>
<span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> UnitOfWorkManager<span class="token punctuation">&gt;</span></span> m_managers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> UnitOfWorkManager<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">readonly</span> <span class="token class-name">FreeSqlCloud</span> m_cloud<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">UnitOfWorkManagerCloud</span><span class="token punctuation">(</span><span class="token class-name">FreeSqlCloud</span> cloud<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_cloud <span class="token operator">=</span> cloud<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name">UnitOfWorkManager</span> <span class="token function">GetUnitOfWorkManager</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> db<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_managers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> uowm<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
            m_managers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> uowm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UnitOfWorkManager</span><span class="token punctuation">(</span>m_cloud<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> uowm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> uowm <span class="token keyword">in</span> m_managers<span class="token punctuation">.</span>Values<span class="token punctuation">)</span> uowm<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_managers<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IUnitOfWork</span> <span class="token function">Begin</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> db<span class="token punctuation">,</span> <span class="token class-name">Propagation</span> propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>Required<span class="token punctuation">,</span> <span class="token class-name">IsolationLevel<span class="token punctuation">?</span></span> isolationLevel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">GetUnitOfWorkManager</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span>propagation<span class="token punctuation">,</span> isolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RepositoryCloud<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DefaultRepository<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">RepositoryCloud</span><span class="token punctuation">(</span><span class="token class-name">UnitOfWorkManagerCloud</span> uomw<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>DbEnum<span class="token punctuation">.</span>db1<span class="token punctuation">,</span> uomw<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">//DI</span>
    <span class="token keyword">public</span> <span class="token function">RepositoryCloud</span><span class="token punctuation">(</span><span class="token class-name">DbEnum</span> db<span class="token punctuation">,</span> <span class="token class-name">UnitOfWorkManagerCloud</span> uomw<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>uomw<span class="token punctuation">.</span><span class="token function">GetUnitOfWorkManager</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">RepositoryCloud</span><span class="token punctuation">(</span><span class="token class-name">UnitOfWorkManager</span> uomw<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>uomw<span class="token punctuation">.</span>Orm<span class="token punctuation">,</span> uomw<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        uomw<span class="token punctuation">.</span><span class="token function">Binding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionalAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Rougamo<span class="token punctuation">.</span>MoAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Propagation</span> Propagation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>Required<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IsolationLevel</span> IsolationLevel <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token operator">=&gt;</span> m_IsolationLevel<span class="token punctuation">.</span>Value<span class="token punctuation">;</span> <span class="token keyword">set</span> <span class="token operator">=&gt;</span> m_IsolationLevel <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">IsolationLevel<span class="token punctuation">?</span></span> m_IsolationLevel<span class="token punctuation">;</span>
    <span class="token keyword">readonly</span> <span class="token class-name">DbEnum</span> m_db<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TransactionalAttribute</span><span class="token punctuation">(</span><span class="token class-name">DbEnum</span> db<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_db <span class="token operator">=</span> db<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span>IServiceProvider<span class="token punctuation">&gt;</span></span> m_ServiceProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span>IServiceProvider<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetServiceProvider</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m_ServiceProvider<span class="token punctuation">.</span>Value <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span>

    <span class="token class-name">IUnitOfWork</span> _uow<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEntry</span><span class="token punctuation">(</span><span class="token class-name">MethodContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> uowManager <span class="token operator">=</span> m_ServiceProvider<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UnitOfWorkManagerCloud<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _uow <span class="token operator">=</span> uowManager<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span>m_db<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Propagation<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m_IsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnExit</span><span class="token punctuation">(</span><span class="token class-name">MethodContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Task</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>RealReturnType<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>Task<span class="token punctuation">)</span>context<span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token function">_OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">_OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">_OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _uow<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> _uow<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">finally</span>
            <span class="token punctuation">{</span>
                _uow<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9))])}const b=c(k,[["render",r],["__file","unitofwork-manager.html.vue"]]);export{b as default};
