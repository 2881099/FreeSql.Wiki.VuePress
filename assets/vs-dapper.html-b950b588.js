import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as i,a as n,d as t,w as e,e as c,b as s}from"./app-ce6bd33d.js";const u={},r=c(`<h1 id="与-dapper-比较" tabindex="-1"><a class="header-anchor" href="#与-dapper-比较" aria-hidden="true">#</a> 与 Dapper 比较</h1><p>众所周知 Dapper 是 .NET 下最轻最快的 ORM，它是喜欢写 SQL 码农的福音，相对于 SqlHelper 它更加方便，据统计 10 个 .NETer 有 9 个 用过 Dapper。</p><p>这篇文章为准备使用 FreeSql 的朋友解惑，对比 Dapper 有何优势，为什么要使用 FreeSql？希望本文内容对大家有所帮助。</p><h2 id="关于性能-输了" tabindex="-1"><a class="header-anchor" href="#关于性能-输了" aria-hidden="true">#</a> 关于性能（输了）</h2><p>Dapper + SQL 是大家一般所用的方式，性能对比主要体现在两个阶段：</p><p>1、执行前，表达式树解析，拼接 SQL 的消耗：</p><ul><li>Dapper 几乎没有消耗；</li><li>FreeSql 会存在递归解析、对象拆箱等操作；</li></ul><p>从项目工程可维护性角度看，这一点性能损失是能被容忍的，请看下面的测试结果。</p><p>2、执行后，返回数据转换为 List：</p><ul><li>Dapper 采用 Emit 构造委托并缓存，性能接近原生代码；</li><li>FreeSql 采用 ExpressionTree 构造委托并缓存，为了映射类型更加易用使用了一点装箱操作，性能比 Dapper 略低；</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">BenchmarkDotNet</span><span class="token operator">=</span>v0.12.1, <span class="token assign-left variable">OS</span><span class="token operator">=</span>Windows <span class="token number">10.0</span>.19044
Intel Core i7-8700K CPU <span class="token number">3</span>.70GHz <span class="token punctuation">(</span>Coffee Lake<span class="token punctuation">)</span>, <span class="token number">1</span> CPU, <span class="token number">12</span> logical and <span class="token number">6</span> physical cores
.NET Core <span class="token assign-left variable">SDK</span><span class="token operator">=</span><span class="token number">6.0</span>.100
  <span class="token punctuation">[</span>Host<span class="token punctuation">]</span>     <span class="token builtin class-name">:</span> .NET Core <span class="token number">5.0</span>.11 <span class="token punctuation">(</span>CoreCLR <span class="token number">5.0</span>.1121.47308, CoreFX <span class="token number">5.0</span>.1121.47308<span class="token punctuation">)</span>, X64 RyuJIT DEBUG
  Job-LEQVAV <span class="token builtin class-name">:</span> .NET Core <span class="token number">5.0</span>.11 <span class="token punctuation">(</span>CoreCLR <span class="token number">5.0</span>.1121.47308, CoreFX <span class="token number">5.0</span>.1121.47308<span class="token punctuation">)</span>, X64 RyuJIT DEBUG

<span class="token assign-left variable">BuildConfiguration</span><span class="token operator">=</span>Debug  <span class="token assign-left variable">InvocationCount</span><span class="token operator">=</span><span class="token number">1</span>  <span class="token assign-left variable">UnrollFactor</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Method</th><th>size</th><th style="text-align:right;">Mean</th><th style="text-align:right;">Error</th><th style="text-align:right;">StdDev</th><th style="text-align:right;">Median</th><th style="text-align:right;">Rank</th></tr></thead><tbody><tr><td>FreeSqlSelect</td><td>1</td><td style="text-align:right;">271.6 us</td><td style="text-align:right;">14.03 us</td><td style="text-align:right;">41.16 us</td><td style="text-align:right;">272.6 us</td><td style="text-align:right;">2</td></tr><tr><td>SqlSugarSelect</td><td>1</td><td style="text-align:right;">323.5 us</td><td style="text-align:right;">15.75 us</td><td style="text-align:right;">45.18 us</td><td style="text-align:right;">314.9 us</td><td style="text-align:right;">3</td></tr><tr><td>EfCoreSelect</td><td>1</td><td style="text-align:right;">392.8 us</td><td style="text-align:right;">17.61 us</td><td style="text-align:right;">49.39 us</td><td style="text-align:right;">376.2 us</td><td style="text-align:right;">4</td></tr><tr><td>DapperSelete</td><td>1</td><td style="text-align:right;">215.9 us</td><td style="text-align:right;">11.88 us</td><td style="text-align:right;">33.52 us</td><td style="text-align:right;">213.8 us</td><td style="text-align:right;">1</td></tr><tr><td>FreeSqlSelect</td><td>500</td><td style="text-align:right;">811.8 us</td><td style="text-align:right;">18.86 us</td><td style="text-align:right;">55.02 us</td><td style="text-align:right;">798.5 us</td><td style="text-align:right;">5</td></tr><tr><td>SqlSugarSelect</td><td>500</td><td style="text-align:right;">1,148.6 us</td><td style="text-align:right;">53.94 us</td><td style="text-align:right;">157.34 us</td><td style="text-align:right;">1,116.3 us</td><td style="text-align:right;">7</td></tr><tr><td>EfCoreSelect</td><td>500</td><td style="text-align:right;">1,310.2 us</td><td style="text-align:right;">89.90 us</td><td style="text-align:right;">262.25 us</td><td style="text-align:right;">1,219.3 us</td><td style="text-align:right;">8</td></tr><tr><td>DapperSelete</td><td>500</td><td style="text-align:right;">942.1 us</td><td style="text-align:right;">18.46 us</td><td style="text-align:right;">42.05 us</td><td style="text-align:right;">931.1 us</td><td style="text-align:right;">6</td></tr></tbody></table><blockquote><p>如上测试 Top1、Top500 单表查询水平结果</p></blockquote><blockquote><p>测试注意 IFreeSql 是单例模式设计，请勿重复创建，测试前请预热</p></blockquote><p>测试结果是 us 级别的慢，能接受，因为数据库的上限并发瓶颈比较低（几万的水平），应用程序中的这一点消耗远不是问题。</p><p>最怕方法或设计错了导致的慢，那慢就是秒级以上的慢了，无力回天。</p><h2 id="关于功能-赢了" tabindex="-1"><a class="header-anchor" href="#关于功能-赢了" aria-hidden="true">#</a> 关于功能（赢了）</h2><p>Dapper 几乎只有执行 SQL 的功能，市面上有一些基于 Dapper 做的轻量级 ORM，可以对实体对象进行 CRUD 操作，支持的数据库有限。</p><p>Dapper 在功能方面几乎完败于 FreeSql，例如：</p><ul><li>CodeFirst：Dapper 不支持；</li><li>类型映射：Dapper 在不同数据库之间的类型映射容易报错。比如实体类属性是 string，但是数据库类型是 int，非常容易报错，这不是杠，真实项目中有很多非等映射类型存在；</li><li>表达式树：Dapper 不支持导航属性、自定义解析、以及特别的解析；</li><li>导航属性：Dapper 不支持；</li><li>批量插入：Dapper 需要自己写 SQL 或者引入第三方包，FreeSql 自带集成；</li><li>批量更新：Dapper 需要自己写 SQL，FreeSql 自带集成；</li><li>工作单元：Dapper 需要引入第三方包，FreeSql 自带集成；</li><li>读写分离：？？</li><li>全局过滤：？？</li></ul><p>等等。。。</p><p>FreeSql 赢在功能丰富，给使用者提供最大便利，你准备好入坑了吗？</p><h2 id="如何接入-老项目" tabindex="-1"><a class="header-anchor" href="#如何接入-老项目" aria-hidden="true">#</a> 如何接入（老项目）</h2><p>如果你的项目正在使用 Dapper，请看以下成本最低的接入方法。</p><p>FreeSql 支持调用 SQL/存储过程，同时也为 IDbConnection/IDbTransaction 提供扩展方法 Select/Delete/Insert/Update/InsertOrUpdate。</p><p>第一步：以数据库 SqlServer 访问为例，只需要安装已经划分好的小包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet <span class="token function">add</span> package FreeSql.Provider.SqlServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Install-Package FreeSql.Provider.SqlServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步：建立实体类</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">TestConnectionExt</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> createTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步：开始 CRUD</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestConnectionExt<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>id <span class="token operator">==</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestConnectionExt</span> <span class="token punctuation">{</span> title <span class="token operator">=</span> <span class="token string">&quot;testinsert&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Update</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestConnectionExt<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> xxx<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">&quot;testupdated&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestConnectionExt<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> xxx<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加或更新：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> affrows <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">InsertOrUpdate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestConnectionExt<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">SetSource</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上添加、删除、修改、查询，已经支持实体类操作，并且支持批量插入、批量更新、批量删除、多表查询、导航属性查询。</p><p>可以享用 FreeSql 几乎所有功能。</p><p>思考：使用这种 API 貌似可以很轻松的接入到 abp vnext 中？</p><h2 id="学习指南" tabindex="-1"><a class="header-anchor" href="#学习指南" aria-hidden="true">#</a> 学习指南</h2><p>FreeSql 是一款功能强大的对象关系映射（O/RM）组件，支持 .NET Core 2.1+、.NET Framework 4.0+ 以及 Xamarin。</p><ul><li>🛠 支持 CodeFirst 模式，即便使用 Access 数据库也支持数据迁移；</li><li>💻 支持 DbFirst 模式，支持从数据库导入实体类，或使用实体类生成工具生成实体类；</li><li>⛳ 支持 深入的类型映射，比如 PgSql 的数组类型等；</li><li>✒ 支持 丰富的表达式函数，以及灵活的自定义解析；</li><li>🏁 支持 导航属性一对多、多对多贪婪加载，以及延时加载；</li><li>📃 支持 读写分离、分表分库、过滤器、乐观锁、悲观锁；</li><li>🌳 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite/Firebird/达梦/人大金仓/神舟通用/南大通用/虚谷/翰高/Access/ClickHouse/QuestDB 等数据库；</li></ul><h4 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h4>`,42),d=n("h4",{id:"进阶",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#进阶","aria-hidden":"true"},"#"),s(" 进阶")],-1),k=n("h4",{id:"高级",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#高级","aria-hidden":"true"},"#"),s(" 高级")],-1);function g(h,m){const a=l("RouterLink");return o(),i("div",null,[r,n("ul",null,[n("li",null,[t(a,{to:"/guide/insert.html"},{default:e(()=>[s("《学习 FreeSql 之一：添加数据》")]),_:1})]),n("li",null,[t(a,{to:"/guide/delete.html"},{default:e(()=>[s("《学习 FreeSql 之二：删除数据》")]),_:1})]),n("li",null,[t(a,{to:"/guide/update.html"},{default:e(()=>[s("《学习 FreeSql 之三：修改数据》")]),_:1})]),n("li",null,[t(a,{to:"/guide/select.html"},{default:e(()=>[s("《学习 FreeSql 之四：查询数据》")]),_:1})]),n("li",null,[t(a,{to:"/guide/repository.html"},{default:e(()=>[s("《仓储层 Repository》")]),_:1})])]),d,n("ul",null,[n("li",null,[t(a,{to:"/guide/code-first.html"},{default:e(()=>[s("《CodeFirst 模式开发介绍》")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"/guide/entity-attribute.html"},{default:e(()=>[s("《CodeFirst 模式之一：实体特性》")]),_:1})]),n("li",null,[t(a,{to:"/guide/fluent-api.html"},{default:e(()=>[s("《CodeFirst 模式之二：FluentApi》")]),_:1})]),n("li",null,[t(a,{to:"/guide/custom-attribute.html"},{default:e(()=>[s("《CodeFirst 模式之三：自定义特性》")]),_:1})]),n("li",null,[t(a,{to:"/guide/type-mapping.html"},{default:e(()=>[s("《CodeFirst 模式之四：类型映射》")]),_:1})]),n("li",null,[t(a,{to:"/guide/code-first.html#%E8%BF%81%E7%A7%BB%E7%BB%93%E6%9E%84"},{default:e(()=>[s("《CodeFirst 模式之五：迁移结构》")]),_:1})])])])]),n("ul",null,[n("li",null,[t(a,{to:"/guide/db-first.html"},{default:e(()=>[s("《DbFirst 模式开发介绍》")]),_:1})])]),k,n("ul",null,[n("li",null,[t(a,{to:"/guide/transaction.html"},{default:e(()=>[s("《数据库事务》")]),_:1})]),n("li",null,[t(a,{to:"/guide/read-write-splitting.html"},{default:e(()=>[s("《使用读写分离》")]),_:1})]),n("li",null,[t(a,{to:"/guide/sharding.html"},{default:e(()=>[s("《分表分库》")]),_:1})]),n("li",null,[t(a,{to:"/guide/multi-tenancy.html"},{default:e(()=>[s("《多租户》")]),_:1})]),n("li",null,[t(a,{to:"/guide/select-return-data.html"},{default:e(()=>[s("《返回数据》")]),_:1})]),n("li",null,[t(a,{to:"/guide/select-lazy-loading.html"},{default:e(()=>[s("《优化之：延时加载》")]),_:1})]),n("li",null,[t(a,{to:"/guide/select-include.html"},{default:e(()=>[s("《优化之：贪婪加载》")]),_:1})]),n("li",null,[t(a,{to:"/guide/expression-function.html"},{default:e(()=>[s("《Expression 表达式函数》")]),_:1})]),n("li",null,[t(a,{to:"/guide/aop.html"},{default:e(()=>[s("《AOP》")]),_:1})])])])}const y=p(u,[["render",g],["__file","vs-dapper.html.vue"]]);export{y as default};
