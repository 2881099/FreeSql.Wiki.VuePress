{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "FreeSql 官方文档",
  "home_page_url": "https://freesql.net/",
  "feed_url": "https://freesql.net/feed.json",
  "description": "FreeSql Documents",
  "items": [
    {
      "title": "",
      "url": "https://freesql.net/guide/AdminBlazor.html",
      "id": "https://freesql.net/guide/AdminBlazor.html",
      "summary": "项目介绍 AdminBlazor 是一款 Blazor Server SaaS 后台管理项目，支持 RABC 权限菜单/按钮，支持一对一、一对多、多对多代码生成 .razor 界面。 集成功能：菜单、角色、用户、定时任务、数据字典、租户 依赖组件：BootstrapBlazor、FreeSql、FreeScheduler、Rougamo github:...",
      "content_html": "<h2> 项目介绍</h2>\n<p>AdminBlazor 是一款 Blazor Server SaaS 后台管理项目，支持 RABC 权限菜单/按钮，支持一对一、一对多、多对多代码生成 .razor 界面。</p>\n<p>集成功能：菜单、角色、用户、定时任务、数据字典、租户</p>\n<p>依赖组件：BootstrapBlazor、FreeSql、FreeScheduler、Rougamo</p>\n<ul>\n<li>github: https://github.com/2881099/AdminBlazor</li>\n<li>gitee: https://gitee.com/FreeSql/AdminBlazor</li>\n</ul>\n<p>正常更新一行记录</p>\n<ul>\n<li>vue -&gt; webapi orm 查询数据 -&gt; 转成 dto 返回 -&gt; 绑定 js 对象 -&gt; 前端提交时把 js 对象转成 http post DTO -&gt; webapi 获取 dto 转成实体对象 -&gt; orm.Update() -&gt; 更新成功</li>\n<li>blazor server -&gt; orm 查询数据 item -&gt; item 与 html 控件双向绑定 -&gt; 前端提交时 orm.Update(item) -&gt; 更新成功</li>\n</ul>\n<p>自己体会一下。。~~</p>\n<h2> 快速开始</h2>\n<ol>\n<li>安装模板</li>\n</ol>\n<blockquote>\n<p>dotnet new install AdminBlazor.Template</p>\n</blockquote>\n<ol start=\"2\">\n<li>新建项目</li>\n</ol>\n<blockquote>\n<p>dotnet new admin</p>\n</blockquote>\n<ol start=\"3\">\n<li>运行访问</li>\n</ol>\n<blockquote>\n<p>http://localhost:5231/Admin</p>\n</blockquote>\n<p>用户名：admin 密码：freesql</p>\n<ol start=\"4\">\n<li>新建菜单，类型选择增删改查</li>\n</ol>\n<figure><img src=\"/adminblazor/01.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<ol start=\"5\">\n<li>生成代码，在实体类型维护注释、导航属性</li>\n</ol>\n<ul>\n<li>实体上的注释，会生成 HTML Label</li>\n<li>实体上的导航属性，会生成丰富的 UI</li>\n<li>创建实体类型，建议继承 Entity/EntityCreated/EntityModifed</li>\n</ul>\n<figure><img src=\"/adminblazor/02.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<h2> 权限</h2>\n<ul>\n<li>UserEntity 多对多 RoleEntity</li>\n<li>RoleEntity 多对多 MenuEntity</li>\n</ul>\n<p>提示：AdminContext 类型已注入为 Scoped</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>按钮权限，在 razor 中设置特性：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>之后菜单管理，会出现对应的按钮项，勾选设置角色是否有按钮的权限。</p>\n<figure><img src=\"/adminblazor/03.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<h2> 租户</h2>\n<p>提示：AdminContext 类型已注入为 Scoped</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>每个租户独立数据库，注入方式：</p>\n<ul>\n<li>访问租户：IFreeSql/IAggregateRootRepository&lt;T&gt;</li>\n<li>访问主库：FreeSqlCloud</li>\n</ul>\n<blockquote>\n<p>FreeSqlCloud API 访问方式与 IFreeSql 一样\nIAggregateRootRepository 是级联操作友好的仓储模式</p>\n</blockquote>\n<figure><img src=\"/adminblazor/04.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<h2> 定时任务</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 组件</h2>\n<p>以下几个是 AdminBlazor 封装的组件，更多丰富的 UI 组件可以看：BootstrapBlazor</p>\n<h3> 1. 增删改查 AdminTable2&lt;TItem&gt;</h3>\n<blockquote>\n<p>使用 FreeSql 对实体类型 TItem 增删改查</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool IsDebug</td>\n<td>打开UI调试</td>\n</tr>\n<tr>\n<td>string Title</td>\n<td>标题，弹框时</td>\n</tr>\n<tr>\n<td>int PageSize</td>\n<td>分页，值 -1 时不分开</td>\n</tr>\n<tr>\n<td>bool IsQueryString</td>\n<td>查询条件与 URL QueryString 同步</td>\n</tr>\n<tr>\n<td>bool IsRemove</td>\n<td>开启删除</td>\n</tr>\n<tr>\n<td>bool IsRowRemove</td>\n<td>开启删除（表格每行）</td>\n</tr>\n<tr>\n<td>bool IsAdd</td>\n<td>开启添加</td>\n</tr>\n<tr>\n<td>bool IsEdit</td>\n<td>开启编辑</td>\n</tr>\n<tr>\n<td>bool IsRefersh</td>\n<td>开启刷新</td>\n</tr>\n<tr>\n<td>bool IsSearchText</td>\n<td>开启文本搜索</td>\n</tr>\n<tr>\n<td>bool IsSingleSelect</td>\n<td>开启单选</td>\n</tr>\n<tr>\n<td>bool IsMultiSelect</td>\n<td>开启多选</td>\n</tr>\n<tr>\n<td>bool IsConfirmEdit</td>\n<td>开启编辑保存时，弹框确认</td>\n</tr>\n<tr>\n<td>bool IsConfirmRemove</td>\n<td>开启删除时，弹框确认</td>\n</tr>\n<tr>\n<td>int Colspan</td>\n<td>表格一行显示几条记录</td>\n</tr>\n<tr>\n<td>int BodyHeight</td>\n<td>表格高度</td>\n</tr>\n<tr>\n<td>string DialogClassName</td>\n<td>弹框样式</td>\n</tr>\n<tr>\n<td>Func&lt;AdminQueryInfo, Task&gt; InitQuery</td>\n<td>初始化查询</td>\n</tr>\n<tr>\n<td>EventCallback&lt;AdminQueryEventArgs&lt;TItem&gt;&gt; OnQuery</td>\n<td>正在查询，设置条件</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TItem&gt; OnEdit</td>\n<td>正在编辑，设置编辑对象</td>\n</tr>\n<tr>\n<td>EventCallback&lt;List&lt;TItem&gt;&gt; OnRemove</td>\n<td>正在删除</td>\n</tr>\n<tr>\n<td>EventCallback&lt;List&lt;AdminItem&lt;TItem&gt;&gt;&gt; OnSelectChanged</td>\n<td>选择内容发生变化</td>\n</tr>\n<tr>\n<td>EventCallback&lt;AdminItem&lt;TItem&gt;&gt; OnRowClick</td>\n<td>单击表格行时</td>\n</tr>\n<tr>\n<td>RenderFragment TableHeader</td>\n<td>表格 TR 模板</td>\n</tr>\n<tr>\n<td>RenderFragment&lt;TItem&gt; TableRow</td>\n<td>表格 TD 模板</td>\n</tr>\n<tr>\n<td>RenderFragment&lt;TItem&gt; EditTemplate</td>\n<td>添加/编辑 模板</td>\n</tr>\n<tr>\n<td>RenderFragment CardHeader</td>\n<td>卡片 Header 模板</td>\n</tr>\n<tr>\n<td>RenderFragment CardFooter</td>\n<td>卡片 Fotter 模板</td>\n</tr>\n</tbody>\n</table>\n<h3> 2. 弹框分配 AllocTable2&lt;TItem, TChild&gt;</h3>\n<blockquote>\n<p>弹框分配实体类型 TItem 【多对多】导航属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TItem Item</td>\n<td>被分配的对象</td>\n</tr>\n<tr>\n<td>string ChildProperty</td>\n<td>被分配的对象的 List&lt;TChild&gt; 属性</td>\n</tr>\n<tr>\n<td>string Title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TItem&gt; ItemChanged</td>\n<td>分配变化时</td>\n</tr>\n<tr>\n<td>int PageSize</td>\n<td>TChild 分页，值 -1 时不分页</td>\n</tr>\n<tr>\n<td>bool IsSearchText</td>\n<td>TChild 开启文本搜索</td>\n</tr>\n<tr>\n<td>EventCallback&lt;AdminQueryEventArgs&lt;TChild&gt;&gt; OnQuery</td>\n<td>TChild 正在查询，设置条件</td>\n</tr>\n<tr>\n<td>RenderFragment TableHeader</td>\n<td>TChild 表格 TR 模板</td>\n</tr>\n<tr>\n<td>RenderFragment&lt;TItem&gt; TableRow</td>\n<td>TChild 表格 TD 模板</td>\n</tr>\n</tbody>\n</table>\n<h3> 3. 文本框 InputTable2&lt;TItem, TKey&gt;</h3>\n<blockquote>\n<p>文本框 + 按钮弹框绑定 【多对一】、【多对多】导航属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TKey Value</td>\n<td>值</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TKey&gt; OnValueChanged</td>\n<td>值变化时</td>\n</tr>\n<tr>\n<td>TItem Item</td>\n<td>【多对一】导航属性</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TItem&gt; OnItemChanged</td>\n<td>【多对一】导航属性变化时</td>\n</tr>\n<tr>\n<td>TItem Items</td>\n<td>【多对多】导航属性</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TItem&gt; OnItemsChanged</td>\n<td>【多对多】导航属性变化时</td>\n</tr>\n<tr>\n<td>Func&lt;TItem, string&gt; DisplayText</td>\n<td>文本框显示内容</td>\n</tr>\n<tr>\n<td>string ModalTitle</td>\n<td>弹框标题</td>\n</tr>\n<tr>\n<td>int PageSize</td>\n<td>弹框 分页，值 -1 时不分页</td>\n</tr>\n<tr>\n<td>bool IsSearchText</td>\n<td>弹框 开启文本搜索</td>\n</tr>\n<tr>\n<td>RenderFragment TableHeader</td>\n<td>弹框 表格 TR 模板</td>\n</tr>\n<tr>\n<td>RenderFragment&lt;TItem&gt; TableRow</td>\n<td>弹框 表格 TD 模板</td>\n</tr>\n</tbody>\n</table>\n<h3> 4. 单选/多选 SelectTable2&lt;TItem, TKey&gt;</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TKey Value</td>\n<td>值</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TKey&gt; OnValueChanged</td>\n<td>值变化时</td>\n</tr>\n<tr>\n<td>TItem Items</td>\n<td>【多对多】导航属性</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TItem&gt; OnItemsChanged</td>\n<td>【多对多】导航属性变化时</td>\n</tr>\n<tr>\n<td>int PageSize</td>\n<td>分页，值 -1 时不分页</td>\n</tr>\n<tr>\n<td>bool IsSearchText</td>\n<td>开启文本搜索</td>\n</tr>\n<tr>\n<td>RenderFragment&lt;TItem&gt; ChildContent</td>\n<td>内容模板</td>\n</tr>\n</tbody>\n</table>\n<h3> 5. 弹框 AdminModal</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string Title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>bool Visible</td>\n<td>是否显示</td>\n</tr>\n<tr>\n<td>bool IsBackdropStatic</td>\n<td>是否静态模式</td>\n</tr>\n<tr>\n<td>bool IsKeyboard</td>\n<td>是否接受 ESC 关闭</td>\n</tr>\n<tr>\n<td>string DialogClassName</td>\n<td>弹框样式，如：modal-sm、modal-lg、modal-xl、modal-xxl、modal-fullscreen</td>\n</tr>\n<tr>\n<td>string YesButton</td>\n<td>确认按钮</td>\n</tr>\n<tr>\n<td>string CloseButton</td>\n<td>关闭按钮</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TItem&gt; OnYes</td>\n<td>确认时</td>\n</tr>\n<tr>\n<td>EventCallback&lt;TItem&gt; OnClose</td>\n<td>关闭时</td>\n</tr>\n<tr>\n<td>RenderFragment ChildContent</td>\n<td>内容模板</td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://freesql.net/adminblazor/01.png",
      "date_published": "2024-02-01T00:01:34.000Z",
      "date_modified": "2024-02-18T11:17:11.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "低代码",
      "url": "https://freesql.net/guide/lowcode.html",
      "id": "https://freesql.net/guide/lowcode.html",
      "summary": "本篇是继《动态操作》 (dynamic.md)文档之后的大功能，专门为低代码设计。 FreeSql 默认依赖实体类型，虽然运行时可以动态创建 Type，但不断的动态编译导致会内存无法释放，对 Type 的版本也难以管理。 本功能是独立的，使用纯字典（无实体类型）进行 CRUD，支持导航属性，级联操作等功能。 注意：本功能是独立的，请勿与其他文档的级联机...",
      "content_html": "<h1> 低代码</h1>\n<p>本篇是继<a href=\"/guide/dynamic.html\" target=\"blank\">《动态操作》</a>文档之后的大功能，专门为低代码设计。</p>\n<p>FreeSql 默认依赖实体类型，虽然运行时可以动态创建 Type，但不断的动态编译导致会内存无法释放，对 Type 的版本也难以管理。</p>\n<p>本功能是独立的，使用纯字典（无实体类型）进行 CRUD，支持导航属性，级联操作等功能。</p>\n<p>注意：本功能是独立的，请勿与其他文档的级联机制搞混。</p>\n<h2> 字典 CUD（单表）</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>InsertDict/UpdateDict/DeleteDict/InsertOrUpdateDict 都支持批量操作，对应类型 List&lt;Dictionary&lt;string, object&gt;&gt;</p>\n<h2> 无类型 CRUD（更高级）</h2>\n<p>不依赖实体类型，不需要动态编译，纯字典操作，支持导航属性，级联保存，AOT 编译福音。</p>\n<p>nuget 安装：</p>\n<blockquote>\n<p>dotnet add package FreeSql.Extensions.ZeroEntity</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查询，返回结果是字典 Dictionary&lt;string, object&gt;：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述 ctx 对象依赖 json 配置如下：</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 级联机制</h2>\n<p>理解本机制之前，请先忘记 Repository/DbContext 等之前的级联机制，他们没有关联。</p>\n<p>schemas[] 是一组表映射信息定义，包含表名、列名、导航属性、索引等信息</p>\n<ul>\n<li>导航属性：OneToOne/OneToMany/ManyToOne/ManyToMany</li>\n<li>聚合根：OneToOne/OneToMany/多对多中间表，作为一个整体看待</li>\n<li>外部根：ManyToOne/ManyToMany外部表，作为外部看待，它有自己的聚合根整体</li>\n</ul>\n<p>举例：</p>\n<ul>\n<li>User 为聚合根</li>\n<li>UserExt/UserClaim/UserRole 这三个表是子成员，一起存储/删除</li>\n<li>Role 为外部根（相对 User 而言，它自己是独立的聚合根）</li>\n</ul>\n<p>CURD 都是基于 schemas[0] 聚合根进行操作</p>\n<ul>\n<li>查询：贪婪加载所有子成员，以及外部根，以及外部根的外部根（递归）</li>\n<li>状态管理：快照聚合根副本（由于外部根也是聚合根，即外部根与聚合根是并行存储关系）</li>\n</ul>\n<p>对比保存：</p>\n<p>将当前操作的聚合根与状态管理的副本进行对比，计算出发生变化的列</p>\n<table>\n<thead>\n<tr>\n<th>导航属性</th>\n<th>副本</th>\n<th>最新</th>\n<th>动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OneToOne</td>\n<td>NULL</td>\n<td>Object</td>\n<td>添加新记录</td>\n</tr>\n<tr>\n<td>OneToOne</td>\n<td>Object</td>\n<td>NULL</td>\n<td>删除副本记录</td>\n</tr>\n<tr>\n<td>OneToOne</td>\n<td>Object</td>\n<td>Object</td>\n<td>发生变化则更新，否则忽略</td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>NULL/Empty</td>\n<td>List</td>\n<td>添加最新List记录</td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>List</td>\n<td>NULL</td>\n<td>忽略</td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>List</td>\n<td>Empty</td>\n<td>删除副本List记录</td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>List</td>\n<td>List</td>\n<td>对比保存，计算出添加/更新/删除三种行为</td>\n</tr>\n<tr>\n<td>多对多中间表</td>\n<td></td>\n<td></td>\n<td>与 OneToMany 一致</td>\n</tr>\n</tbody>\n</table>\n<p>插入：</p>\n<ul>\n<li>OneToOne 级联插入</li>\n<li>OneToMany 级联插入</li>\n<li>ManyToOne 先对比保存外部根，关联外部根ID，再插入聚合根</li>\n<li>ManyToMany 先对比保存外部根，插入聚合根，再插入中间表</li>\n</ul>\n<p>更新：</p>\n<ul>\n<li>OneToOne 级联对比保存</li>\n<li>OneToMany 级联对比保存</li>\n<li>ManyToOne 先对比保存外部根，再关联外部根ID，再更新聚合根</li>\n<li>ManyToMany 先对比保存外部根，再更新聚合根，再对比保存中间表</li>\n</ul>\n<p>删除：</p>\n<ul>\n<li>OneToOne 级联删除</li>\n<li>OneToMany 级联删除</li>\n<li>ManyToOne 忽略</li>\n<li>ManyToMany 级联删除中间表（注意不删除外部根）</li>\n</ul>\n",
      "date_published": "2023-12-07T05:53:21.000Z",
      "date_modified": "2023-12-21T08:38:59.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "BaseEntity",
      "url": "https://freesql.net/guide/freesql-extensions-baseentity.html",
      "id": "https://freesql.net/guide/freesql-extensions-baseentity.html",
      "summary": "前言 尝试过 ado.net、dapper、ef，以及Repository仓储，甚至自己还写过生成器工具，以便做常规CRUD操作。 它们日常操作不方便之处： 每次使用前需要声明，再操作；; 很多人一个实体类，对应一个操作类（或DAL、DbContext、Repository）；; BaseEntity 是一种极简单的 CodeFirst 开发方式，特别...",
      "content_html": "<h2> 前言</h2>\n<p>尝试过 ado.net、dapper、ef，以及Repository仓储，甚至自己还写过生成器工具，以便做常规CRUD操作。</p>\n<p>它们日常操作不方便之处：</p>\n<ul>\n<li>\n<p>每次使用前需要声明，再操作；</p>\n</li>\n<li>\n<p>很多人一个实体类，对应一个操作类（或DAL、DbContext、Repository）；</p>\n</li>\n</ul>\n<p>BaseEntity 是一种极简单的 CodeFirst 开发方式，特别对单表或多表CRUD，利用继承节省了每个实体类的重复属性（创建时间、ID等字段），软删除等功能，进行 crud 操作时不必时常考虑仓储的使用；</p>\n<p>本文介绍 BaseEntity 一种极简约的 CRUD 操作方法。</p>\n<h2> 功能特点</h2>\n<ul>\n<li>\n<p>自动迁移实体结构（CodeFirst），到数据库；</p>\n</li>\n<li>\n<p>直接操作实体的方法，进行 CRUD 操作；</p>\n</li>\n<li>\n<p>简化用户定义实体类型，省去主键、常用字段的配置（如CreateTime、UpdateTime）；</p>\n</li>\n<li>\n<p>实现单表、多表查询的软删除逻辑；</p>\n</li>\n</ul>\n<h2> 声明</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>1、定义一个主键 int 并且自增的实体类型，BaseEntity TKey 指定为 int/long 时，会认为主键是自增；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果不想主键是自增键，可以重写属性：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>有关更多实体的特性配置，请参考资料：<a href=\"/guide/entity-attribute.html\" target=\"blank\">实体特性</a></p>\n</blockquote>\n<p>2、定义一个主键 Guid 的实体类型，保存数据时会自动产生有序不重复的 Guid 值（不用自己指定 Guid.NewGuid()）；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> CRUD 使用</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实体类型.Select 是一个查询对象，使用方法和 FreeSql.ISelect 一样；</p>\n<p>支持多表查询时，软删除条件会附加在每个表中；</p>\n<blockquote>\n<p>有关更多查询方法，请参考资料：<a href=\"/guide/select.html\" target=\"blank\">查询</a></p>\n</blockquote>\n<h2> 事务建议</h2>\n<p>1、同线程事务，不支持异步：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、如果你是异步控</p>\n<p>由于 AsyncLocal 平台兼容不好，所以交给外部管理事务。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在 Scoped 开始时：_asyncUow.Value = fsql.CreateUnitOfWork(); (也可以使用 UnitOfWorkManager 对象获取 uow)</p>\n<p>在 Scoped 结束时：_asyncUow.Value = null;</p>\n<p>如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-11-28T09:50:50.000Z",
      "date_modified": "2023-11-28T09:50:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql.Provider.QuestDb",
      "url": "https://freesql.net/guide/freesql-provider-questdb.html",
      "id": "https://freesql.net/guide/freesql-provider-questdb.html",
      "summary": "介绍 QuestDB 是一款针对时序数据实时处理优化的关系型列存数据库， 支持 Rest API 方式访问，同时兼容 PostgreSQL 访问协议，以及 InfluxDB 写入的访问协议。自带 Web Console，方便数据库的基本访问 QuestDB | 官网 (https://questdb.io/) 安装包 FreeSql.Provider....",
      "content_html": "<h1> FreeSql.Provider.QuestDb</h1>\n<h2> 介绍</h2>\n<p><code>QuestDB </code>是一款针对时序数据实时处理优化的关系型列存数据库， 支持 Rest API 方式访问，同时兼容 PostgreSQL 访问协议，以及 InfluxDB 写入的访问协议。自带 Web Console，方便数据库的基本访问</p>\n<p><a href=\"https://questdb.io/\" target=\"_blank\" rel=\"noopener noreferrer\">QuestDB | 官网 </a></p>\n<h2> 安装包</h2>\n<p>FreeSql.Provider.QuestDb</p>\n<p>.NET CLI</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Package Manager</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 声明</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 特有功能</h2>\n<h4> QuestFunc</h4>\n<ul>\n<li>QuestFunc 实现了 QuestDB 官方文档的函数</li>\n<li>SelectLongSequence 对应 long_sequence</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> Sample By</h4>\n<blockquote>\n<p>SAMPLE BY用于时间序列数据，将大型数据集汇总为同质时间块的聚合，作为SELECT语句的一部分</p>\n</blockquote>\n<p><a href=\"https://questdb.io/docs/reference/sql/sample-by/\" target=\"_blank\" rel=\"noopener noreferrer\">SAMPLE BY keyword | QuestDB</a></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>生成SQL</p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> GroupBy</h4>\n<blockquote>\n<p>需要注意的是 QuestDB 的 GroupBy 与其他关系型 数据库不同</p>\n</blockquote>\n<p><a href=\"https://questdb.io/docs/concept/sql-extensions/#group-by-is-optional\" target=\"_blank\" rel=\"noopener noreferrer\">官网说明：SQL extensions | QuestDB</a></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>生成SQL</p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> Latest On</h4>\n<blockquote>\n<p>对于多个时间序列存储在同一个表中的场景，根据时间戳检索给定键或键组合的最新项</p>\n</blockquote>\n<p><a href=\"https://questdb.io/docs/reference/sql/latest-on/\" target=\"_blank\" rel=\"noopener noreferrer\">LATEST ON keyword | QuestDB</a></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>生成SQL</p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> BulkCopy</h4>\n<blockquote>\n<p>实测七列10W数据预热后只需1.5秒，100W数据14秒左右</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：RestAPI 不经过 ado.net，因为不触发 UseMonitorCommand/Aop.CommandBefore/After 等事件</p>\n<h4> 自动分表、索引</h4>\n<blockquote>\n<p>QuestDB 支持自动分表</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 常见问题</h2>\n<h4> table busy</h4>\n<p><strong>多线程并发查询时会出现 table busy [reason=insert] 异常</strong></p>\n<p><a href=\"https://questdb.io/docs/troubleshooting/faq/#why-do-i-get-table-busy-error-messages-when-inserting-data-over-postgresql-wire-protocol\" target=\"_blank\" rel=\"noopener noreferrer\">官网说明 | table busy  </a></p>\n<blockquote>\n<p>解决方案，启用RestAPI后 Insert/Update就会默认使用HTTP方式</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：RestAPI 不经过 ado.net，因为不触发 UseMonitorCommand/Aop.CommandBefore/After 等事件</p>\n<h4> RestAPI设置账号密码</h4>\n<p>QuestDb WebConsole并不支持设置账号密码，但是官网给出解决方案 使用Nginx代理</p>\n<p><a href=\"https://questdb.io/blog/2022/08/05/setting-basic-auth-nginx/#introduction\" target=\"_blank\" rel=\"noopener noreferrer\">Setting up Basic Authentication for QuestDB open source using Nginx | QuestDB</a></p>\n<h4> QuestDb不支持删除？</h4>\n<p><a href=\"https://questdb.io/docs/troubleshooting/faq/#how-do-i-delete-a-row\" target=\"_blank\" rel=\"noopener noreferrer\">FAQ | How do I delete a row?</a></p>\n<h2> 在线测试</h2>\n<p><a href=\"https://demo.questdb.io/\" target=\"_blank\" rel=\"noopener noreferrer\">QuestDB | 在线测试 </a> 提供了最新的QuestDB发行版和示例数据集:</p>\n<ul>\n<li>Trips: 10 years of NYC taxi trips with 1.6 billion rows</li>\n<li>Trades: live crytocurrency market data with 30M+ rows per month</li>\n<li>Pos: geolocations of 250k unique ships over time</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Query</th>\n<th>Execution time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SELECT sum(double) FROM trips</td>\n<td>[0.15 secs](https://demo.questdb.io/?query=SELECT sum(trip_distance) FROM trips;&amp;executeQuery=true)</td>\n</tr>\n<tr>\n<td>SELECT sum(double), avg(double) FROM trips</td>\n<td>[0.5 secs](https://demo.questdb.io/?query=SELECT sum(fare_amount), avg(fare_amount) FROM trips;&amp;executeQuery=true)</td>\n</tr>\n<tr>\n<td>SELECT avg(double) FROM trips WHERE time in '2019'</td>\n<td>[0.02 secs](https://demo.questdb.io/?query=SELECT avg(trip_distance) FROM trips WHERE pickup_datetime IN '2019';&amp;executeQuery=true)</td>\n</tr>\n<tr>\n<td>SELECT time, avg(double) FROM trips WHERE time in '2019-01-01' SAMPLE BY 1h</td>\n<td>[0.01 secs](https://demo.questdb.io/?query=SELECT pickup_datetime, avg(trip_distance) FROM trips WHERE pickup_datetime IN '2019-01-01' SAMPLE BY 1h;&amp;executeQuery=true)</td>\n</tr>\n<tr>\n<td>SELECT * FROM trades LATEST ON time PARTITION BY symbol</td>\n<td>[0.00025 secs](https://demo.questdb.io/?query=SELECT * FROM trades LATEST ON timestamp PARTITION BY symbol;&amp;executeQuery=true)</td>\n</tr>\n</tbody>\n</table>\n<p>Our demo is running on <code>c5.metal</code> instance and using 24 cores out of</p>\n",
      "date_published": "2023-02-22T05:25:18.000Z",
      "date_modified": "2023-06-29T03:34:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "聚合根（实验室）",
      "url": "https://freesql.net/guide/aggregateroot.html",
      "id": "https://freesql.net/guide/aggregateroot.html",
      "summary": "FreeSql.Repository 定义了 IBaseRepository\\ 仓储接口，实现了单表的通用仓储对象，支持了级联保存、级联删除功能，（但是）使用时需要人工自己判断何时开启、何时使用。 本文看上去像 EF，实则有区别，主要区别在级联边界的规则设定，例如我们允许 OneToMany 从下层向上递归级联，但是仅限查询，不能增删改。研究目的希望从...",
      "content_html": "<h1> 聚合根（实验室）</h1>\n<p>FreeSql.Repository 定义了 IBaseRepository&lt;T&gt; 仓储接口，实现了单表的通用仓储对象，支持了级联保存、级联删除功能，（但是）使用时需要人工自己判断何时开启、何时使用。</p>\n<p>本文看上去像 EF，实则有区别，主要区别在级联边界的规则设定，例如我们允许 OneToMany 从下层向上递归级联，但是仅限查询，不能增删改。研究目的希望从机制上杜绝痛点，让操作变得更可控。</p>\n<p><strong>AggregateRootRepository 是 IBaseRepository&lt;T&gt; 一种新的尝试实现</strong>，根据聚合根特点，实现可控的级联添加、级联更新、级联删除、级联查询（查询时自动 Include/IncludeMany）操作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>dotnet add package FreeSql.Extensions.AggregateRoot</p>\n</blockquote>\n<p>意见征集、讨论区：<a href=\"https://github.com/dotnetcore/FreeSql/discussions/1235\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/discussions/1235</a></p>\n<h2> 设定边界</h2>\n<p>将一个主要的实体类认定为聚合根，设定好安全的管辖范围（边界），CRUD 时会把边界之内的所有内容看作一个整体。</p>\n<p>边界之外的导航属性，<code>增删改</code> 递归时会忽略：</p>\n<ul>\n<li>ManyToOne</li>\n<li>ManyToMany(外部表)</li>\n<li>PgArrayToMany</li>\n</ul>\n<p>边界之内的导航属性，<code>增删改</code> 递归时会级联操作：</p>\n<ul>\n<li>OneToOne</li>\n<li>OneToMany</li>\n<li>ManyToMany(中间表)</li>\n</ul>\n<p>示例1：在聚合根内递归所有 OneToOne/OneToMany 导航属性</p>\n<ul>\n<li>OneToOne: Order &lt;-&gt; OrderExt</li>\n<li>OneToMany: Order &lt;== OrderDetail</li>\n<li>OneToOne: OrderDetail &lt;-&gt; OrderDetailExt</li>\n<li>聚合根 Order 的管辖范围：Extdata、Details、Details[?].Extdata</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>示例2：在聚合根内递归所有 ManyToMany 导航属性对应的中间表</p>\n<ul>\n<li>ManyToMany: Order &lt;=&gt; Tag</li>\n<li>聚合根 Order 会根据 Tags 生成 OrderTag 中间表数据，进行管理</li>\n<li>聚合根 Order 不会管理 Tag 实体类，以及 Tag 向下延申的导航属性（外部表不属于管辖范围）</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 插入数据</h2>\n<p>根据上面设定的边界，插入时会自动 <code>级联插入</code> 边界以内的内容。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>插入 Order 表记录；</li>\n<li>插入 OrderExt 表记录；</li>\n<li>插入 OrderDetail 表记录；</li>\n<li>插入 OrderDetailExt 表记录；</li>\n<li>插入 OrderTag 表记录；（不会插入 Tag 表记录）</li>\n</ul>\n<blockquote>\n<p>注意：即使 order.Tags 在数据库不存在，也不会插入 Tag 表记录</p>\n</blockquote>\n<h2> 查询数据</h2>\n<p>根据上面设定的边界，查询时会自动 <code>Include/IncludeMany</code> 边界以内的内容。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果等同于：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>扩展查询边界：</p>\n<blockquote>\n<p>提示：[AggregateRootBoundary(\"name\", Break = true)] 设置边界范围，请往后面看。。</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>重写 Select 可以把边界以外的数据一起查询出来（例如 ManyToOne 导航属性），但是 <code>添加/修改/删除</code> 仍然采用默认边界规则</p>\n<p>手工使用 SelectDiy Include/IncludeMany 包含内容，如果小于默认边界规则，则建议不要开启 <code>状态跟踪</code> （保存数据可能造成不一致），反之则应该开启。（详细请往后看 <code>更新数据</code>）</p>\n<h2> 删除数据</h2>\n<p>根据上面设定的边界，删除时会自动 <code>级联删除</code> 边界以内的内容。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>删除 OrderExt 表对应的记录；</li>\n<li>删除 OrderDetailExt 表对应的记录；</li>\n<li>删除 OrderDetail 表对应的记录；</li>\n<li>删除 OrderTag 表对应的记录；（不会删除 Tag 表记录）</li>\n<li>删除 Order 表对应的记录；</li>\n</ul>\n<p>删除数据是在内存递归 order 实例进行的，因此需要使用 repository 提前查询，内容庞大时有性能缺陷。</p>\n<p>如果设置了数据库表外键的级联删除功能，则只需删除 Order 表对应的记录，并且不需要提前查询。</p>\n<h2> 更新数据</h2>\n<p>根据上面设定的边界，更新时会自动 <code>级联保存</code> 边界以内的内容。</p>\n<p>repository.Attach 存储更新前的数据快照（查询会自动快照），称为副本，repository.Update 的时候和副本进行级联对比保存。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>添加 OrderTag 表记录；（不会管理 Tag 表记录）</li>\n<li>删除 OrderDetail 表记录；</li>\n<li>删除 OrderDetailExt 表记录；</li>\n<li>更新 OrderDetailExt 表记录；</li>\n<li>更新 Order 表记录；</li>\n</ul>\n<p><code>完整保存</code> 先查询再更新，机制容易理解，数据一致性也更有保障。但是如果聚合根下内容较庞大，将会造成性能问题。</p>\n<p>例如 Order 下面的评论数据大约有 1000 条，每天还不断有新的记录，每次 Load 内存再保存代价就太大了。</p>\n<p>利用对比保存的特点，可以变向实现 <code>追加记录</code>：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>使用 fsql 只查询了单表数据；</li>\n<li>order 本身没发生变化，所以不更新 Order 表记录；</li>\n<li>添加 OrderComment 表记录2条；</li>\n</ul>\n<blockquote>\n<p>我为什么不直接对 OrderComment 进行单表操作啊？？？</p>\n</blockquote>\n<blockquote>\n<p>答案你们回答！！！</p>\n</blockquote>\n<p><code>对比保存</code> 规则说明：</p>\n<table>\n<thead>\n<tr>\n<th>导航属性</th>\n<th>副本</th>\n<th>最新</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OneToOne</td>\n<td>NULL</td>\n<td>Object</td>\n<td><code>添加</code> 最新 记录</td>\n</tr>\n<tr>\n<td>OneToOne</td>\n<td>Object</td>\n<td>NULL</td>\n<td><code>删除</code> 副本 记录</td>\n</tr>\n<tr>\n<td>OneToOne</td>\n<td>Object</td>\n<td>Object</td>\n<td>内容发生变化则 <code>更新</code> 最新 记录，否则 <code>忽略</code></td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>NULL/Empty</td>\n<td>List</td>\n<td><code>添加</code> 最新 List 记录</td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>List</td>\n<td>NULL</td>\n<td><code>忽略</code></td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>List</td>\n<td>Empty</td>\n<td><code>删除</code> 副本 List 记录</td>\n</tr>\n<tr>\n<td>OneToMany</td>\n<td>List</td>\n<td>List</td>\n<td><code>对比保存</code> 计算出 <code>添加</code>、<code>更新</code>、<code>删除</code> 三种行为</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>ManyToMany 只会操作 <code>中间表</code>（外部表不属于管辖范围），对比保存的机制与 OneToMany 一致</p>\n</blockquote>\n<h2> 插入或更新数据</h2>\n<p>InsertOrUpdate 执行逻辑依托聚合根对象的 <code>主键</code> 和 <code>状态管理</code>，状态管理存储的是副本。</p>\n<p>1、如果主键是 <code>自增</code>：</p>\n<ul>\n<li>无值，则 <code>插入数据</code>；</li>\n<li>有值，则判断 状态管理;\n<ul>\n<li>存在，则与副本对比 <code>更新数据</code>；</li>\n<li>不存在，则查询 数据库；（内容庞大时有性能问题）\n<ul>\n<li>存在，则与查询的内容对比 <code>更新数据</code>；</li>\n<li>不存在，则 <code>插入数据</code>；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>2、如果主键不是 自增：</p>\n<ul>\n<li>无值，则 <code>抛出异常</code>；</li>\n<li>有值，逻辑同上；</li>\n</ul>\n<h2> 扩展边界</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Break 递归时，终止当前导航属性</li>\n<li>BreakThen 递归时，终止下探</li>\n</ul>\n<p>AggregateRootBoundary 可以设置边界之内的导航属性，缩小边界范围。</p>\n<p>也可以设置非边界之内的导航属性 ManyToOne/ManyToMany/PgArrayToMany，仅查询有效，<code>增删改</code> 时依然会忽略它们。</p>\n<h2> 总结</h2>\n<p>1、<strong>理解边界</strong>，理解本文提出的边界规则。</p>\n<ul>\n<li>ManyToOne 导航属性，是 <code>边界之外</code>；</li>\n<li>ManyToMany 导航属性，<code>中间表</code>（OrderTag） 是边界之内，<code>外部表</code>（Tag） 是 <code>边界之外</code>；</li>\n<li>OneToOne 导航属性，是边界之内；</li>\n<li>OneToMany 导航属性，是边界之内；</li>\n</ul>\n<p>AggregateRootRepository 只对边界之内的数据进行递归 CRUD 操作，把聚合根看成一个整体。</p>\n<p>特殊情况可以继承后重写 Select 属性扩大、或缩小查询内容：</p>\n<ul>\n<li>Insert/Delete/Update 不会对 <code>扩大</code> 边界之外的数据进行增删改；</li>\n<li>Update <code>缩小</code> 后的查询内容，由于导航属性值为 NULL，不会删除未查询的内容；</li>\n</ul>\n<p>2、<strong>善用事务</strong>，使用事务解决一致操作问题。</p>\n",
      "date_published": "2022-09-04T08:40:48.000Z",
      "date_modified": "2022-10-11T16:40:14.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql+CAP事务",
      "url": "https://freesql.net/extra/freesql-cap.html",
      "id": "https://freesql.net/extra/freesql-cap.html",
      "summary": "背景描述 在CAP中，事务对象需要交给CAP进行提交从而在事务实现提交后对缓存消息到 Broker 的 Flush 动作，而目前的Orm大部分都有自己的事务管理对象进行事务的提交。CAP官方直接原生支持使用 ADO.NET 和 EntityFrameworkCore 进行事务集成，而对于第三方ORM本文提供了一种扩展用以集成的示例。 接入有二种方式 安...",
      "content_html": "<h1> FreeSql+CAP事务</h1>\n<h2> 背景描述</h2>\n<p>在CAP中，事务对象需要交给CAP进行提交从而在事务实现提交后对缓存消息到 Broker 的 Flush 动作，而目前的Orm大部分都有自己的事务管理对象进行事务的提交。CAP官方直接原生支持使用 ADO.NET 和 EntityFrameworkCore 进行事务集成，而对于第三方ORM本文提供了一种扩展用以集成的示例。</p>\n<p>接入有二种方式</p>\n<ul>\n<li>安装<code>FreeSql</code>包</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>安装<code>CAP</code>相关包</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 服务</h2>\n<ul>\n<li>appsetttings.json</li>\n</ul>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>配置相关服务</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>CAP相关服务\n<a href=\"https://cap.dotnetcore.xyz/user-guide/zh/storage/mysql/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cap.dotnetcore.xyz/user-guide/zh/storage/mysql/</a></li>\n</ul>\n<p>至少你要配置一个消息队列和一个事件存储（UseMySql）</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>默认情况下，你可以访问 <a href=\"http://localhost:xxx/cap\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:xxx/cap</a> 这个地址打开Dashboard。</p>\n<h2> 方式一</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>使用方式</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 方式二</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用方式：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>二者区别在于后者，<code>trans.Commit()</code>不需要传递``IUnitOfWork`参数</p>\n<h2> 原文参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/igeekfan/p/cap_freesql_flush.html\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql 接入 CAP 的实践</a></li>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/discussions/1202\" target=\"_blank\" rel=\"noopener noreferrer\">如何使 FreeSql 和 CAP 进行集成</a></li>\n</ul>\n",
      "date_published": "2022-08-31T14:37:49.000Z",
      "date_modified": "2022-08-31T14:37:49.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql.AdminLTE",
      "url": "https://freesql.net/guide/freesqladminlte.html",
      "id": "https://freesql.net/guide/freesqladminlte.html",
      "summary": "它是 FreeSql 衍生出来的 .NETCore MVC 中间件扩展包 FreeSql.AdminLTE.Preview.dll，基于 AdminLTE 前端框架动态产生实体的增删查改界面。 dotnet add packages FreeSql.AdminLTE.Preview 输入：实体1、实体2、实体3 输出：后台管理的功能 只需要传入实体，就...",
      "content_html": "<h1> FreeSql.AdminLTE</h1>\n<p>它是 FreeSql 衍生出来的 .NETCore MVC 中间件扩展包 FreeSql.AdminLTE.Preview.dll，基于 AdminLTE 前端框架动态产生实体的增删查改界面。</p>\n<blockquote>\n<p>dotnet add packages FreeSql.AdminLTE.Preview</p>\n</blockquote>\n<p>输入：实体1、实体2、实体3</p>\n<p>输出：后台管理的功能</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>只需要传入实体，就可以生产 curd 的管理功能，是不是有些骚啊~~~</p>\n<figure><img src=\"https://user-images.githubusercontent.com/16286519/187557633-351e3fbe-ae87-461f-9e45-f1c31c6a2b92.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<figure><img src=\"https://user-images.githubusercontent.com/16286519/187557677-5333484e-92d3-42a4-8543-6baf89814540.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<p>对于通用后台管理系统的生成，除了单纯的对单表 crud 操作外，我还喜欢利用导航属性的操作，比如：</p>\n<p>1、Song、Tag 多对多场景，添加/更新 Song 时可以把 Tag 一起保存；</p>\n<p>2、列表页，希望外键、多对多出现在过滤筛选条件；</p>\n<p>3、列表页，希望枚举出现在过滤筛选条件；</p>\n<p>4、删除时，级联删除所有相关数据；</p>\n<p>等等诸如此类的繁琐操作，之所以说繁琐，是因为这些工作技术不难，属于严重的重复劳动。</p>\n<h2> 机制设定</h2>\n<p>1、添加、修改数据</p>\n<p>中件间产生的界面包括添加、修改数据的功能，普通实体的根据属性的类型与 Html5 UI 一一映射；</p>\n<p>比较特殊的映射规则：</p>\n<table>\n<thead>\n<tr>\n<th>c# 类型</th>\n<th>Html5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>布尔</td>\n<td>复选框</td>\n</tr>\n<tr>\n<td>枚举</td>\n<td>下拉选择</td>\n</tr>\n<tr>\n<td>日期</td>\n<td>日期控件</td>\n</tr>\n<tr>\n<td>ManyToOne 导航属性</td>\n<td>下拉选择</td>\n</tr>\n<tr>\n<td>ManyToMany 导航属性</td>\n<td>多选器</td>\n</tr>\n</tbody>\n</table>\n<p>等等。。。</p>\n<p>什么情况会产生【上传文件】控件？\n有兴趣的可以了解源码，目前没有开放在外部配置。</p>\n<hr>\n<p>2、列表查询、过滤筛选</p>\n<p>中件间为每个实体提供了分页列表查询，每页为20条数据；</p>\n<p>除此外，还提供了过滤条件的支持，规则是根据导航属性（ManyToOne、ManyToMany）。比如【岗位】，内含有【部门 Department】、【员工 Employee】、【角色 Role】，则【岗位】列表页会出现按【分类】筛选的UI，详见上面的 demo 示意图，或者下载 demo 运行；</p>\n<hr>\n<p>3、删除数据</p>\n<p>中件间为每个实体提供了批量删除的功能；</p>\n<p>并且支持了复杂导航属性关系的级联删除功能，而这个功能不依赖数据库外键；</p>\n<h2> 下载 Demo</h2>\n<p>我们一直习惯用 sqlite 做测试库，测试完毕直接删除目录，不留垃圾数据，所以下面的 demo 不需要修改任何地方，运行时自动建库、建表；</p>\n<p>运行环境：.net6.0</p>\n<p><a href=\"https://files.cnblogs.com/files/FreeSql/freesql.adminlte.preview.zip\" target=\"_blank\" rel=\"noopener noreferrer\">https://files.cnblogs.com/files/FreeSql/freesql.adminlte.preview.zip</a></p>\n<p>第一步：</p>\n<blockquote>\n<p>dotnet restore</p>\n</blockquote>\n<p>第二步：</p>\n<blockquote>\n<p>dotnet run</p>\n</blockquote>\n",
      "image": "https://user-images.githubusercontent.com/16286519/187557633-351e3fbe-ae87-461f-9e45-f1c31c6a2b92.png",
      "date_published": "2022-08-30T23:01:53.000Z",
      "date_modified": "2022-08-30T23:01:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeIM",
      "url": "https://freesql.net/guide/freeim.html",
      "id": "https://freesql.net/guide/freeim.html",
      "summary": "FreeIM 使用 websocket 协议实现简易、高性能（单机支持5万+连接）、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。 使用场景：好友聊天、群聊天、直播间、实时评论区、游戏。 接受定制项目开发，详细请联系作者 开源地址：https://github.com/2881099/FreeIM (https://gi...",
      "content_html": "<h1> FreeIM</h1>\n<p>FreeIM 使用 websocket 协议实现简易、高性能（单机支持5万+连接）、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。</p>\n<p>使用场景：好友聊天、群聊天、直播间、实时评论区、游戏。</p>\n<p><em>接受定制项目开发，详细请联系作者</em></p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeIM\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeIM</a></p>\n<p>扩展资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16632727.html\" target=\"_blank\" rel=\"noopener noreferrer\">《C#.NET im 聊天通讯架构设计 -- FreeIM 支持集群、职责分明、高性能》</a></p>\n<blockquote>\n<p>dotnet add package FreeIM</p>\n</blockquote>\n<h2> ImServer 服务端</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>一套永远不需要迭代更新的 <code>ImServer</code> 服务端，支持 .NET6.0、.NETCore2.1+、NETStandard2.0</p>\n</blockquote>\n<h2> WebApi 业务端</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>ImHelper方法</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PrevConnectServer</td>\n<td>(clientId, string)</td>\n<td>在终端准备连接 websocket 前调用</td>\n</tr>\n<tr>\n<td>SendMessage</td>\n<td>(发送者, 接收者, 消息内容, 是否回执)</td>\n<td>发送消息</td>\n</tr>\n<tr>\n<td>GetClientListByOnline</td>\n<td>-</td>\n<td>返回所有在线clientId</td>\n</tr>\n<tr>\n<td>HasOnline</td>\n<td>clientId</td>\n<td>判断客户端是否在线</td>\n</tr>\n<tr>\n<td>EventBus</td>\n<td>(上线委托, 离线委托)</td>\n<td>socket上线与下线事件</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>频道</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JoinChan</td>\n<td>(clientId, 频道名)</td>\n<td>加入</td>\n</tr>\n<tr>\n<td>LeaveChan</td>\n<td>(clientId, 频道名)</td>\n<td>离开</td>\n</tr>\n<tr>\n<td>GetChanClientList</td>\n<td>(频道名)</td>\n<td>获取频道所有clientId</td>\n</tr>\n<tr>\n<td>GetChanList</td>\n<td>-</td>\n<td>获取所有频道和在线人数</td>\n</tr>\n<tr>\n<td>GetChanListByClientId</td>\n<td>(clientId)</td>\n<td>获取用户参与的所有频道</td>\n</tr>\n<tr>\n<td>GetChanOnline</td>\n<td>(频道名)</td>\n<td>获取频道的在线人数</td>\n</tr>\n<tr>\n<td>SendChanMessage</td>\n<td>(clientId, 频道名, 消息内容)</td>\n<td>发送消息，所有在线的用户将收到消息</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>clientId 应该与用户id相同，或者关联；</li>\n<li>频道适用临时的群聊需求，如聊天室、讨论区；</li>\n</ul>\n<blockquote>\n<p>ImHelper 支持 .NetFramework 4.5+、.NetStandard 2.0</p>\n</blockquote>\n<h2> Html5 终端</h2>\n<p>终端连接 websocket 前，应该先请求 <code>WebApi</code> 获得授权过的地址(ImHelper.PrevConnectServer)，伪代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-08-30T05:43:50.000Z",
      "date_modified": "2024-04-02T10:14:45.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeScheduler",
      "url": "https://freesql.net/guide/freescheduler.html",
      "id": "https://freesql.net/guide/freescheduler.html",
      "summary": "FreeScheduler 是利用 IdleBus 实现的轻量化定时任务调度，支持集群、临时的延时任务和重复循环任务(可持久化)，可按秒，每天/每周/每月固定时间，自定义间隔执行，支持 .NET Core 2.1+、.NET Framework 4.0+ 运行环境。 开源地址：https://github.com/2881099/FreeSchedul...",
      "content_html": "<h1> FreeScheduler</h1>\n<p>FreeScheduler 是利用 IdleBus 实现的轻量化定时任务调度，支持集群、临时的延时任务和重复循环任务(可持久化)，可按秒，每天/每周/每月固定时间，自定义间隔执行，支持 .NET Core 2.1+、.NET Framework 4.0+ 运行环境。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeScheduler\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeScheduler</a></p>\n<p>扩展资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16623030.html\" target=\"_blank\" rel=\"noopener noreferrer\">《.NET 定时任务 -- FreeScheduler 支持 cron、持久化、可变定时设置》</a></p>\n<h2> 快速开始</h2>\n<blockquote>\n<p>dotnet add package FreeScheduler</p>\n</blockquote>\n<blockquote>\n<p>Install-Package FreeScheduler</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>Method</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OnExecuting(Action&lt;TaskInfo&gt; executing)</td>\n<td>任务触发</td>\n</tr>\n<tr>\n<td>UseTimeZone()</td>\n<td>设置时区</td>\n</tr>\n<tr>\n<td>UseStorage()</td>\n<td>基于 数据库或者 Redis 持久化</td>\n</tr>\n<tr>\n<td>UseCluster()</td>\n<td>开启集群（依赖 Redis），支持跨进程互通</td>\n</tr>\n<tr>\n<td>UseCustomInterval()</td>\n<td>自定义间隔（可实现 cron）</td>\n</tr>\n<tr>\n<td>UseScanInterval()</td>\n<td>扫描间隔（默认200ms），值越小触发精准</td>\n</tr>\n<tr>\n<td>Build()</td>\n<td>创建 Scheduler 对象</td>\n</tr>\n</tbody>\n</table>\n<p>使用 ASP.NET Core 项目，一行代码解决如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><img src=\"/281375469-a5d5f4bb-6af9-4695-9570-8777c39d7329.png\" alt=\"Admin Dashboard\" tabindex=\"0\" loading=\"lazy\"><figcaption>Admin Dashboard</figcaption></figure>\n<h2> 集群特性</h2>\n<ul>\n<li>支持 单项目，多站点部署</li>\n<li>支持 多进程，不重复执行</li>\n<li>支持 进程退出后，由其他进程重新加载任务（约30秒后）</li>\n<li>支持 进程互通，任意进程都可以执行（RemoveTask/ExistsTask/PauseTask/RunNowTask/RemoveTempTask/ExistsTempTask）</li>\n<li>支持 进程意外离线后，卸载进程内的任务，重新安排上线</li>\n</ul>\n<h2> 临时任务(不可持久化)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>Method</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string AddTempTask(TimeSpan, Action)</td>\n<td>创建临时的延时任务，返回 id</td>\n</tr>\n<tr>\n<td>bool RemoveTempTask(string id)</td>\n<td>删除任务(临时任务)</td>\n</tr>\n<tr>\n<td>bool ExistsTempTask(string id)</td>\n<td>判断任务是否存在(临时任务)</td>\n</tr>\n<tr>\n<td>int QuantityTempTask</td>\n<td>任务数量(临时任务)</td>\n</tr>\n</tbody>\n</table>\n<h2> 循环任务/可持久化</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>Method</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void ctor(ITaskHandler)</td>\n<td>指定任务调度器（单例）</td>\n</tr>\n<tr>\n<td>string AddTask(string topic, string body, int round, int seconds)</td>\n<td>创建循环定时任务，返回 id</td>\n</tr>\n<tr>\n<td>string AddTask(string topic, string body, int[] seconds)</td>\n<td>创建每轮间隔不同的定时任务，返回 id</td>\n</tr>\n<tr>\n<td>string AddTaskRunOnDay(..)</td>\n<td>创建每日循环任务，指定utc时间，返回 id</td>\n</tr>\n<tr>\n<td>string AddTaskRunOnWeek(..)</td>\n<td>创建每周循环任务，指定utc时间，返回 id</td>\n</tr>\n<tr>\n<td>string AddTaskRunOnMonth(..)</td>\n<td>创建每月循环任务，指定utc时间，返回 id</td>\n</tr>\n<tr>\n<td>string AddTaskCustom(string topic, string body, string expression)</td>\n<td>创建自定义任务，返回 id</td>\n</tr>\n<tr>\n<td>bool RemoveTask(string id)</td>\n<td>删除任务</td>\n</tr>\n<tr>\n<td>bool ExistsTask(string id)</td>\n<td>判断任务是否存在</td>\n</tr>\n<tr>\n<td>bool ResumeTask(string id)</td>\n<td>恢复已暂停的任务</td>\n</tr>\n<tr>\n<td>bool PauseTask(string id)</td>\n<td>暂停正在运行的任务</td>\n</tr>\n<tr>\n<td>bool RunNowTask(string id)</td>\n<td>立刻运行任务（人工触发）</td>\n</tr>\n<tr>\n<td>TaskInfo[] FindTask(lambda)</td>\n<td>查询正在运行中的任务</td>\n</tr>\n<tr>\n<td>int QuantityTask</td>\n<td>任务数量</td>\n</tr>\n</tbody>\n</table>\n<h2> 系统预留任务</h2>\n<blockquote>\n<p>[系统预留]清理任务数据</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 管理任务</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果正在使用 ASP.NET Core 项目，一行代码解决如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>https://github.com/2881099/FreeScheduler/tree/master/Examples/Examples_FreeScheduler_Net60\n<img src=\"/281375469-a5d5f4bb-6af9-4695-9570-8777c39d7329.png\" alt=\"Admin Dashboard\" loading=\"lazy\"></p>\n",
      "image": "https://freesql.net/281375469-a5d5f4bb-6af9-4695-9570-8777c39d7329.png",
      "date_published": "2022-08-30T05:41:38.000Z",
      "date_modified": "2024-01-20T12:21:10.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeRedis",
      "url": "https://freesql.net/guide/freeredis.html",
      "id": "https://freesql.net/guide/freeredis.html",
      "summary": "CSRedisCore 是 .NETFramework 4.0 及以上 访问 redis-server 的客户端组件，也是 FreeSql 作者早年发布的 nuget 版本。 后来重构了更简易的 FreeRedis，目前推荐大家使用 FreeRedis，支持几乎所有 .NET 平台和 AOT。 开源地址：https://github.com/28810...",
      "content_html": "<h1> FreeRedis</h1>\n<p><code>CSRedisCore</code> 是 .NETFramework 4.0 及以上 访问 redis-server 的客户端组件，也是 FreeSql 作者早年发布的 nuget 版本。</p>\n<p>后来重构了更简易的 <code>FreeRedis</code>，目前推荐大家使用 <code>FreeRedis</code>，支持几乎所有 .NET 平台和 AOT。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeRedis\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeRedis</a></p>\n<ul>\n<li>🌈 所有方法名与 redis-cli 保持一致</li>\n<li>🌌 支持 Redis 集群（服务端要求 3.2 及以上版本）</li>\n<li>⛳ 支持 Redis 哨兵模式</li>\n<li>🎣 支持主从分离（Master-Slave）</li>\n<li>📡 支持发布订阅（Pub-Sub）</li>\n<li>📃 支持 Redis Lua 脚本</li>\n<li>💻 支持管道（Pipeline）</li>\n<li>📰 支持事务</li>\n<li>🌴 支持 GEO 命令（服务端要求 3.2 及以上版本）</li>\n<li>🌲 支持 STREAM 类型命令（服务端要求 5.0 及以上版本）</li>\n<li>⚡ 支持本地缓存（Client-side-cahing，服务端要求 6.0 及以上版本）</li>\n<li>🌳 支持 Redis 6 的 RESP3 协议</li>\n</ul>\n<h2> 🚀 快速入门</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>支持 STRING、HASH、LIST、SET、ZSET、BITMAP、HyperLogLog、GEO、Stream 以及布隆过滤器等。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:right\">默认值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">protocol</td>\n<td style=\"text-align:right\">RESP2</td>\n<td style=\"text-align:left\">若使用 RESP3 协议，你需要 Redis 6.0 环境</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">user</td>\n<td style=\"text-align:right\">&lt;empty&gt;</td>\n<td style=\"text-align:left\">Redis 服务端用户名，要求 Redis 6.0 环境</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">password</td>\n<td style=\"text-align:right\">&lt;empty&gt;</td>\n<td style=\"text-align:left\">Redis 服务端密码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">defaultDatabase</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:left\">Redis 服务端数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">max poolsize</td>\n<td style=\"text-align:right\">100</td>\n<td style=\"text-align:left\">连接池最大连接数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">min poolsize</td>\n<td style=\"text-align:right\">5</td>\n<td style=\"text-align:left\">连接池最小连接数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">idleTimeout</td>\n<td style=\"text-align:right\">20000</td>\n<td style=\"text-align:left\">连接池中元素的空闲时间（单位为毫秒 ms），适用于连接到远程服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">connectTimeout</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:left\">连接超时，单位为毫秒（ms）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">receiveTimeout</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:left\">接收超时，单位为毫秒（ms）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sendTimeout</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:left\">发送超时，单位为毫秒（ms）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">encoding</td>\n<td style=\"text-align:right\">utf-8</td>\n<td style=\"text-align:left\">字符串字符集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">retry</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:left\">协议发生错误时，重试执行的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ssl</td>\n<td style=\"text-align:right\">false</td>\n<td style=\"text-align:left\">启用加密传输</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:right\">&lt;empty&gt;</td>\n<td style=\"text-align:left\">连接名，使用 CLIENT LIST 命令查看</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">prefix</td>\n<td style=\"text-align:right\">&lt;empty&gt;</td>\n<td style=\"text-align:left\"><code>key</code> 前辍，所有方法都会附带此前辍，cli.Set(prefix + \"key\", 111);</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>IPv6: [fe80::b164:55b3:4b4f:7ce6%15]:6379</p>\n</blockquote>\n<h2> 🎣 Master-Slave (读写分离)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>写入时连接 127.0.0.1:6379，读取时随机连接 6380 6381</p>\n</blockquote>\n<h2> ⛳ Redis Sentinel (哨兵高可用)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 🌌 Redis Cluster (集群)</h2>\n<p>假如你有一个 Redis Cluster 集群，其中有三个主节点(7001-7003)、三个从节点(7004-7006)，则连接此集群的代码：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> ⚡ Client-side-cahing (本地缓存)</h2>\n<blockquote>\n<p>服务端要求 6.0 及以上版本</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 📡 Subscribe (订阅)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 📃 Scripting (脚本)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 💻 Pipeline (管道)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 📰 Transaction (事务)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 📯 GetDatabase (切库)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 🔍 Scan (扫描)</h2>\n<blockquote>\n<p>支持集群模式</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-08-30T05:39:40.000Z",
      "date_modified": "2023-11-15T20:17:51.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "其他作品",
      "url": "https://freesql.net/guide/otherworks.html",
      "id": "https://freesql.net/guide/otherworks.html",
      "summary": "FreeSql 作者是一个入行 18年的老批，他目前写的开源项目还有： 开源项目 描述 开源地址 开源协议 --- --- --- --- AdminBlazor (AdminBlazor.md) Blazor 后台权限管理 https://gitee.com/FreeSql/AdminBlazor Apache2.0 FreeIM (freeim.m...",
      "content_html": "<h1> 其他作品</h1>\n<p>FreeSql 作者是一个入行 18年的老批，他目前写的开源项目还有：</p>\n<table>\n<thead>\n<tr>\n<th>开源项目</th>\n<th>描述</th>\n<th>开源地址</th>\n<th>开源协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"/guide/AdminBlazor.html\" target=\"blank\">AdminBlazor</a></td>\n<td>Blazor 后台权限管理</td>\n<td>https://gitee.com/FreeSql/AdminBlazor</td>\n<td>Apache2.0</td>\n</tr>\n<tr>\n<td><a href=\"/guide/freeim.html\" target=\"blank\">FreeIM</a></td>\n<td>聊天系统架构</td>\n<td>https://github.com/2881099/FreeIM</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td><a href=\"/guide/freeredis.html\" target=\"blank\">FreeRedis</a></td>\n<td>Redis SDK</td>\n<td>https://github.com/2881099/FreeRedis</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td><a href=\"/guide/freescheduler.html\" target=\"blank\">FreeScheduler</a></td>\n<td>定时任务</td>\n<td>https://github.com/2881099/FreeScheduler</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td>csredis</td>\n<td></td>\n<td>https://github.com/2881099/csredis</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td>FightLandlord</td>\n<td>斗DI主网络版</td>\n<td>https://github.com/2881099/FightLandlord</td>\n<td>学习用途</td>\n</tr>\n<tr>\n<td>IdleBus</td>\n<td>空闲容器</td>\n<td>https://github.com/2881099/IdleBus</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td>FreeSql</td>\n<td>ORM</td>\n<td>https://github.com/dotnetcore/FreeSql</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td>FreeSql.Cloud</td>\n<td>分布式tcc/saga</td>\n<td>https://github.com/2881099/FreeSql.Cloud</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td>FreeSql.AdminLTE</td>\n<td>低代码后台生成</td>\n<td>https://github.com/2881099/FreeSql.AdminLTE</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td>FreeSql.DynamicProxy</td>\n<td>动态代理</td>\n<td>https://github.com/2881099/FreeSql.DynamicProxy</td>\n<td>学习用途</td>\n</tr>\n</tbody>\n</table>\n<p>更早的作品可以直接访问 https://github.com/2881099 查看。</p>\n<h2> csredis</h2>\n<p>.NET Core or .NET Framework 4.0+ client for Redis and Redis Sentinel (2.8) and Cluster. Includes both synchronous and asynchronous clients.</p>\n<p><code>CSRedisCore</code> 是 .NETFramework 4.0 及以上 访问 redis-server 的客户端组件，也是 FreeSql 作者早年发布的 nuget 版本。</p>\n<p>后来重构了更简易的 <code>FreeRedis</code>，目前推荐大家使用 <code>FreeRedis</code>。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/csredis</a></p>\n<h2> FreeRedis</h2>\n<p>基于 .NET 的 Redis 客户端，支持 .NET Core 2.1+、.NET Framework 4.0+ 以及 Xamarin。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeRedis\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeRedis</a></p>\n<p>扩展资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16455983.html\" target=\"_blank\" rel=\"noopener noreferrer\">《.NET Redis Client 又多了一个选择，还在被 StackExchange.Redis Timeout 问题困扰吗？》</a></p>\n<h2> FreeScheduler</h2>\n<p>FreeScheduler 是利用 IdleBus 实现的轻量化定时任务调度，支持临时的延时任务和重复循环任务(可持久化)，可按秒，每天/每周/每月固定时间，自定义间隔执行，支持 .NET Core 2.1+、.NET Framework 4.0+ 运行环境。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeScheduler\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeScheduler</a></p>\n<p>扩展资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16623030.html\" target=\"_blank\" rel=\"noopener noreferrer\">《.NET 定时任务 -- FreeScheduler 支持 cron、持久化、可变定时设置》</a></p>\n<h2> FreeIM</h2>\n<p>FreeIM 使用 websocket 协议实现简易、高性能（单机支持5万+连接）、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。</p>\n<p>使用场景：好友聊天、群聊天、直播间、实时评论区、游戏。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeIM\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeIM</a></p>\n<p>扩展资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16632727.html\" target=\"_blank\" rel=\"noopener noreferrer\">《C#.NET im 聊天通讯架构设计 -- FreeIM 支持集群、职责分明、高性能》</a></p>\n<h2> AdminBlazor</h2>\n<p>AdminBlazor 是一款 Blazor SSR 后台管理项目，支持 RABC 权限菜单/按钮，支持一对一、一对多、多对多代码生成 .razor 界面。</p>\n<p>集成功能：菜单管理、角色管理、用户管理、定时任务、字典管理</p>\n<p>依赖组件：BootstrapBlazor、FreeSql、FreeScheduler、Rougamo</p>\n<p>开源地址：<a href=\"https://github.com/2881099/AdminBlazor\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/AdminBlazor</a></p>\n<h2> FightLandlord</h2>\n<p>.NETCore斗地主服务端 + HTML5前端，使用了 FreeIM 网络通讯</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FightLandlord\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FightLandlord</a></p>\n<h2> IdleBus</h2>\n<p>IdleBus 空闲对象管理容器，有效组织对象重复利用，自动创建、销毁，解决【实例】过多且长时间占用的问题。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/IdleBus\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/IdleBus</a></p>\n<h2> FreeSql</h2>\n<p>FreeSql 是一款功能强大的对象关系映射（O/RM）组件，支持 .NET Core 2.1+、.NET Framework 4.0+ 以及 Xamarin。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeSql</a></p>\n<h2> FreeSql.Cloud</h2>\n<p>为 FreeSql 提供跨数据库访问，分布式事务TCC、SAGA解决方案，支持 .NET Core 2.1+, .NET Framework 4.0+.</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeSql.Cloud\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeSql.Cloud</a></p>\n<p>扩展资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16556303.html\" target=\"_blank\" rel=\"noopener noreferrer\">《FreeSql 将 Saas 租户方案精简到极致[.NET ORM SAAS]》</a>、<a href=\"https://www.cnblogs.com/FreeSql/p/16594837.html\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql 分布式事务 TCC/Saga 编排重要性</a></p>\n<h2> FreeSql.AdminLTE</h2>\n<p>.NETCore MVC 中间件，基于 AdminLTE 前端框架动态产生指定 FreeSql 实体的增删查改的【预览管理功能】。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeSql.AdminLTE\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeSql.AdminLTE</a></p>\n<p>扩展资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16287701.html\" target=\"_blank\" rel=\"noopener noreferrer\">《【低码】asp.net core 实体类可生产 CRUD 后台管理界面》</a></p>\n<h2> FreeSql.DynamicProxy</h2>\n<p>轻量级 AOP 动态代理，支持 .NetCore 或 .NetFramework4.0+ 平台，使用动态编译技术一般用于学习用途。</p>\n<p>开源地址：<a href=\"https://github.com/2881099/FreeSql.DynamicProxy\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeSql.DynamicProxy</a></p>\n",
      "date_published": "2022-08-30T05:35:49.000Z",
      "date_modified": "2024-02-02T15:33:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "联合查询",
      "url": "https://freesql.net/guide/unionall.html",
      "id": "https://freesql.net/guide/unionall.html",
      "summary": "在之前都是推荐使用 ToSql + WithSql 完成联合查询操作，v3.2.666 新增功能直接使用 UnionAll 方法。 GroupBy + WithTempQuery(嵌套查询) + FromQuery + UnionAll 组合使用，会让查询功能更加强大、灵活。 单表 UNION ALL 多表 UNION ALL 注意：如上 SQL 会执...",
      "content_html": "<h1> 联合查询</h1>\n<p>在之前都是推荐使用 ToSql + WithSql 完成联合查询操作，v3.2.666 新增功能直接使用 UnionAll 方法。</p>\n<p>GroupBy + WithTempQuery(嵌套查询) + FromQuery + UnionAll 组合使用，会让查询功能更加强大、灵活。</p>\n<h2> 单表 UNION ALL</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 多表 UNION ALL</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：如上 SQL 会执行报错，因为 User、UserGroup 都存在相同的 Id 字段名称，暂时的解决办法需要指定字段</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> WithParameters 参数化共享</h2>\n<p>开启参数化查询功能后，使用 WithParameters 共享参数化，避免产生相同的参数名称：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-08-26T09:40:43.000Z",
      "date_modified": "2023-12-28T07:17:11.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "动态操作",
      "url": "https://freesql.net/guide/dynamic.html",
      "id": "https://freesql.net/guide/dynamic.html",
      "summary": "弱类型 CRUD v3.2.695 emit 动态创建实体类型 字典 CUD InsertDict/UpdateDict/DeleteDict/InsertOrUpdateDict 都支持批量操作，对应类型 List\\ 无类型 CRUD（更高级） 不依赖实体类型，不需要动态编译，纯字典操作，支持导航属性，级联保存，AOT 编译福音。 内容较长，请移步《...",
      "content_html": "<h1> 动态操作</h1>\n<h2> 弱类型 CRUD</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>v3.2.695 emit 动态创建实体类型</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 字典 CUD</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>InsertDict/UpdateDict/DeleteDict/InsertOrUpdateDict 都支持批量操作，对应类型 List&lt;Dictionary&lt;string, object&gt;&gt;</p>\n<h2> 无类型 CRUD（更高级）</h2>\n<p>不依赖实体类型，不需要动态编译，纯字典操作，支持导航属性，级联保存，AOT 编译福音。</p>\n<p>内容较长，请移步<a href=\"/guide/lowcode.html\" target=\"blank\">《低代码》</a></p>\n<h2> 动态表名</h2>\n<p>1、仓储 Repository</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、原生 IFreeSql</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 动态条件</h2>\n<p>1、ISelect.Where(string sql) 使用原生条件：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>2、动态 Lambda 表达式</p>\n<ul>\n<li><code>And</code>、<code>Or</code>扩展方法 <a href=\"https://github.com/dotnetcore/FreeSql/blob/master/FreeSql/Extensions/LambadaExpressionExtensions.cs\" target=\"_blank\" rel=\"noopener noreferrer\">LambadaExpressionExtensions.cs</a></li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>3、ISelect.WhereDynamicFilter 方法实现动态过滤条件（与前端交互），支持的操作符：</p>\n<ul>\n<li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith：包含/不包含，like '%xx%'，或者 like 'xx%'，或者 like '%xx'</li>\n<li>Equal/NotEqual：等于/不等于</li>\n<li>GreaterThan/GreaterThanOrEqual：大于/大于等于</li>\n<li>LessThan/LessThanOrEqual：小于/小于等于</li>\n<li>Range：范围查询</li>\n<li>DateRange：日期范围，有特殊处理 value[1] + 1</li>\n<li>Any/NotAny：是否符合 value 中任何一项（直白的说是 SQL IN）</li>\n<li>Custom：自定义解析</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://www.cnblogs.com/FreeSql/p/16485310.html\" target=\"_blank\" rel=\"noopener noreferrer\">《高效理解 FreeSql WhereDynamicFilter，深入了解设计初衷》</a></p>\n<p>实现 Custom 的例子：</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 动态排序</h2>\n<p>1、ISelect.OrderBy(string sql) 使用原生排序：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>2、ISelect.OrderByPropertyName 使用属性名排序：</p>\n<ul>\n<li>支持导航属性，比如 OrderByPropertyName(\"Parent.Code\")</li>\n<li>支持多表查询，比如 OrderByPropertyName(\"b.Code\")</li>\n</ul>\n<h2> 动态贪婪加载</h2>\n<p>1、ISelect.IncludeByPropertyName 方法实现动态贪婪加载，对应 Include/IncludeMany：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、List&lt;TDto&gt;.IncludeByPropertyName 扩展方法也实现了 OneToMany 动态贪婪加载：</p>\n<blockquote>\n<p>非实体类型，也可以级联加载，他们不需要配置导航属性关系。</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 动态返回数据</h2>\n<p>1、ISelect.ToList 使用原生SQL返回数据：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、ISelect.ToDataTableByPropertyName 使用属性名返回数据：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 动态片段</h2>\n<p>FreeSql 提供 Where(sql)、GroupBy(sql)、OrderBy(sql)、ToList(sql) 等直接使用 SQL 片段的 API。</p>\n<p><strong>使用这些 API 时请务必注意SQL注入安全问题。</strong></p>\n<p>不建议前端直接 POST SQL 到后端使用它们，而应该在后端做一层映射，例如：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-08-15T16:01:12.000Z",
      "date_modified": "2023-12-14T11:24:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "JsonMap",
      "url": "https://freesql.net/guide/freesql-extensions-jsonmap.html",
      "id": "https://freesql.net/guide/freesql-extensions-jsonmap.html",
      "summary": "推荐使用 v3.2.701+ 版本新增加的自定义类型转换器 (type-mapping.md) FreeSql 扩展包，将值对象映射成 typeof(string)，安装扩展包： 注意事项 [JsonMap]不能标记在 T 为string类型的实体上，否则会在特定情况下导致系统内所有标记了[Column(MapType=typeof(string)]的...",
      "content_html": "<h1> JsonMap</h1>\n<blockquote>\n<p>推荐使用 v3.2.701+ 版本新增加的<a href=\"/guide/type-mapping.html\" target=\"blank\">自定义类型转换器</a></p>\n</blockquote>\n<p>FreeSql 扩展包，将值对象映射成 <code>typeof(string)</code>，安装扩展包：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 注意事项</h2>\n<p>[JsonMap]不能标记在 <b>T</b> 为string类型的实体上，否则会在特定情况下导致系统内所有标记了[Column(MapType=typeof(string)]的字段引发类型转换错误</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> [推荐]自定义类型转换</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-08-11T15:34:05.000Z",
      "date_modified": "2023-11-29T00:36:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "级联删除",
      "url": "https://freesql.net/guide/cascade-delete.html",
      "id": "https://freesql.net/guide/cascade-delete.html",
      "summary": "基于【对象】级联删除 比如 Include/IncludeMany 查询的对象，可以使用此方法级联删除它们。 基于【数据库】级联删除 根据设置的导航属性，递归删除 OneToOne/OneToMany/ManyToMany 对应数据，并返回已删除的数据。此功能不依赖数据库外键",
      "content_html": "<h1> 级联删除</h1>\n<h2> 基于【对象】级联删除</h2>\n<blockquote>\n<p>比如 Include/IncludeMany 查询的对象，可以使用此方法级联删除它们。</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 基于【数据库】级联删除</h2>\n<blockquote>\n<p>根据设置的导航属性，递归删除 OneToOne/OneToMany/ManyToMany 对应数据，并返回已删除的数据。此功能不依赖数据库外键</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-07-30T09:07:52.000Z",
      "date_modified": "2023-02-09T04:09:47.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "嵌套查询 ✨",
      "url": "https://freesql.net/guide/withtempquery.html",
      "id": "https://freesql.net/guide/withtempquery.html",
      "summary": "WithTempQuery 意见往集： 需求版本：v3.2.666+ GroupBy + WithTempQuery(嵌套查询) + FromQuery + UnionAll 组合使用，会让查询功能更加强大、灵活。 场景1：查询分组第一条记录 提示：支持多表嵌套查询，fsql.Select\\() 如果数据库不支持开窗函数，可以使用分组嵌套查询解决： 场...",
      "content_html": "<h1> 嵌套查询 ✨</h1>\n<h2> WithTempQuery</h2>\n<p>意见往集：<a href=\"https://github.com/dotnetcore/FreeSql/discussions/1192\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/discussions/1192</a></p>\n<p>需求版本：v3.2.666+</p>\n<p>GroupBy + WithTempQuery(嵌套查询) + FromQuery + UnionAll 组合使用，会让查询功能更加强大、灵活。</p>\n<h2> 场景1：查询分组第一条记录</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：支持多表嵌套查询，fsql.Select&lt;User1, UserGroup1&gt;()</p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果数据库不支持开窗函数，可以使用分组嵌套查询解决：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 场景2：嵌套查询 + Join</h2>\n<p>WithTempQuery + From&lt;T2&gt; 或 FromQuery(ISelect&lt;T2&gt;) 可实现无限联表</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 场景3：分组查询嵌套</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 场景4：内存数据嵌套</h2>\n<p>假设跨数据库服务器，或者数据表被缓存过，WithMemory 便可以实现数据表与内存关联查询。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 场景5：自动分表后分页 分组聚合</h2>\n<p>自动分表后，如果有分页的需求 或者分组聚合的需求可以参考以下代码</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 场景6：FromQuery 多个查询，最后映射查询</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> WithParameters 参数化共享</h2>\n<p>开启参数化查询功能后，使用 WithParameters 共享参数化，避免产生相同的参数名称：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 子表Exists</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：由于子查询的实体类与上层相同，使用 As(\"b\") 指明别名，以便区分</p>\n</blockquote>\n<h2> 子表In</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 子表Join</h2>\n<p>v1.8.0+ string.Join + ToList 实现将子查询的多行结果，拼接为一个字符串，如：\"1,2,3,4\"</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 子表First/Count/Sum/Max/Min/Avg</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 子表ToList</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> ToSql + WithSql</h2>\n<p>这是早期提供的嵌套查询方法</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-07-23T05:30:46.000Z",
      "date_modified": "2023-12-28T06:58:45.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Castle AOP + FreeSql 跨方法异步事务",
      "url": "https://freesql.net/extra/aop-freesql-autofac.html",
      "id": "https://freesql.net/extra/aop-freesql-autofac.html",
      "summary": "使用Autofac基于特性标签，实现跨方法的异步事务处理 Autofac.Extensions.DependencyInjection; Autofac.Extras.DynamicProxy; Castle.Core.AsyncInterceptor(异步方法AOP拦截); FreeSql基础服务 安装FreeSql包 手动创建一个MySql/Mar...",
      "content_html": "<h1> Castle AOP + FreeSql 跨方法异步事务</h1>\n<p>使用Autofac基于特性标签，实现跨方法的异步事务处理</p>\n<ul>\n<li>Autofac.Extensions.DependencyInjection</li>\n<li>Autofac.Extras.DynamicProxy</li>\n<li>Castle.Core.AsyncInterceptor(异步方法AOP拦截)</li>\n</ul>\n<h2> FreeSql基础服务</h2>\n<h3> 安装FreeSql包</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>手动创建一个MySql/MariaDB数据库,名为<code>ovov_freesql_repository</code></p>\n<h3> appsettings.json</h3>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 配置FreeSql服务</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Autofac+AOP实现异步事务</h2>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.FreeSql.AutoFac.DynamicProxy\" target=\"_blank\" rel=\"noopener noreferrer\">OvOv.FreeSql.AutoFac.DynamicProxy</a></li>\n</ul>\n<p>csproj</p>\n<div class=\"language-csproj line-numbers-mode\" data-ext=\"csproj\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>或</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>创建一个标识事务的特性标签</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Autofac集成</h2>\n<p>Program.CS  替换默认的DI CreateHostBuilder方法</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Startup.cs配置服务</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>.NET6 这样注册</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里给BlogService方法注入UnitOfWorkInterceptor拦截处理。直接注入类。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> AOP</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当Service层没有接口，则必须使用virtual虚方法。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/4f4c908dc40e4c0b96ad92ad5437d071a43162cb/ORM/FreeSql/OvOv.FreeSql.AutoFac.DynamicProxy/Services/BlogService.cs#L65\" target=\"_blank\" rel=\"noopener noreferrer\">BlogService.cs#L65</a></li>\n</ul>\n<p>当传入的参数，title为abc时，会出现异常，<code>throw new Exception(\"test exception\");</code>,前面插入的数据并没有成功，会自动回滚。</p>\n<h2> Autofac批量注册</h2>\n<ul>\n<li>Autofac支持批量注入以Service后缀的接口。该方法在lin-cms-dotnetcore项目中有使用<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Startup/Configuration/ServiceModule.cs\" target=\"_blank\" rel=\"noopener noreferrer\">LinCms.Web/Startup/Configuration/ServiceModule.cs</a></li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当我们使用Autofac批量注册服务后，可以直接使用Service层的接口，不需要再使用注入。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>使用</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-07-18T15:41:00.000Z",
      "date_modified": "2023-02-24T07:41:07.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "国产数据库",
      "url": "https://freesql.net/guide/freesql-provider-custom.html",
      "id": "https://freesql.net/guide/freesql-provider-custom.html",
      "summary": "数据库名称 提供者 系列风格 --- --- --- 达梦 FreeSql.Provider.Dameng Oracle 神州通用 FreeSql.Provider.ShenTong PostgreSQL 人大金仓 FreeSql.Provider.KingbaseES PostgreSQL 南大通用 FreeSql.Provider.GBase In...",
      "content_html": "<h1> 国产数据库</h1>\n<table>\n<thead>\n<tr>\n<th>数据库名称</th>\n<th>提供者</th>\n<th>系列风格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>达梦</td>\n<td>FreeSql.Provider.Dameng</td>\n<td>Oracle</td>\n</tr>\n<tr>\n<td>神州通用</td>\n<td>FreeSql.Provider.ShenTong</td>\n<td>PostgreSQL</td>\n</tr>\n<tr>\n<td>人大金仓</td>\n<td>FreeSql.Provider.KingbaseES</td>\n<td>PostgreSQL</td>\n</tr>\n<tr>\n<td>南大通用</td>\n<td>FreeSql.Provider.GBase</td>\n<td>Informix</td>\n</tr>\n<tr>\n<td>虚谷</td>\n<td>FreeSql.Provider.Xugu</td>\n<td>Oracle</td>\n</tr>\n<tr>\n<td>翰高</td>\n<td>FreeSql.Provider.Custom、FreeSql.Provider.Odbc</td>\n<td>PostgreSQL</td>\n</tr>\n</tbody>\n</table>\n<p>由于太多，在此不一一列举，它们大多数语法兼容 MySql、Oracle、SqlServer、PostgreSQL 四种常用数据库之一。</p>\n<p>FreeSql.Provider.Custom 提供了这四种数据库适配，并且支持 CodeFirst/DbFirst 以及完整的 FreeSql 功能。</p>\n<p>FreeSql.Provider.Custom 不依赖具体 ado.net/odbc/oledb dll 驱动，使用者在外部自行引用 dll 驱动。</p>\n<p>访问 MySql 数据库为例：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>若某国产数据库兼容 MySql SQL，先引用对方提供的 DLL，然后：</p>\n<ul>\n<li>将上面 new MySqlConnection 替换成 new XxxConnection</li>\n<li>将上面 MySqlConnectorFactory.Instance 替换成对应的 DbProviderFactory</li>\n</ul>\n<p>提示：对方 DLL 一般都会提供这两个现实类</p>\n<h1> 自定义适配</h1>\n<p>除了上面，还提供了自定义适配更多的数据库，比如 mssql2000、db2，自定义适配将牺牲一些功能：</p>\n<ul>\n<li>不支持 CodeFirst 自动迁移</li>\n<li>不支持 DbFirst 接口方法的实现</li>\n<li>不支持 原来的分页方法，需要自行判断 id 进行分页</li>\n<li>只支持较少的基础类型：bool,sbyte,short,int,long,byte,ushort,uint,ulong,double,float,decimal,DateTime,byte[],string,Guid</li>\n</ul>\n<p>使用者只需求重写类 FreeSql.Custom.CustomAdapter 就可以自定义访问不同的数据库。</p>\n<p>我们默认做了一套 sqlserver 的语法和映射适配，代码在 <a href=\"https://github.com/2881099/FreeSql/blob/master/Providers/FreeSql.Provider.Custom/CustomAdapter.cs\" target=\"_blank\" rel=\"noopener noreferrer\">CustomAdapter.cs</a>，请查看代码了解。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>适配好新的 CustomAdapter 后，请在 FreeSqlBuilder.Build 之后调用 IFreeSql.SetCustomAdapter 方法生效。</p>\n",
      "date_published": "2022-07-09T09:12:12.000Z",
      "date_modified": "2024-01-05T04:10:01.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql.Provider.Odbc",
      "url": "https://freesql.net/guide/freesql-provider-odbc.html",
      "id": "https://freesql.net/guide/freesql-provider-odbc.html",
      "summary": "FreeSql.Provider.Odbc 实现 ODBC 访问数据库，ODBC 属于比较原始的技术，更新慢，各大数据库厂支持得标准不一，不到万不得已最好别用 odbc，坑比较多。 FreeSql.Provider.Odbc 做了多种数据库的专用实现：SqlServer、PostgreSQL、Oracle、MySql、达梦、人大金仓，和一种通用实现。 ...",
      "content_html": "<h1> FreeSql.Provider.Odbc</h1>\n<p>FreeSql.Provider.Odbc 实现 ODBC 访问数据库，ODBC 属于比较原始的技术，更新慢，各大数据库厂支持得标准不一，不到万不得已最好别用 odbc，坑比较多。</p>\n<p>FreeSql.Provider.Odbc 做了多种数据库的专用实现：SqlServer、PostgreSQL、Oracle、MySql、达梦、人大金仓，和一种通用实现。</p>\n<p>和原来的 FreeSql.Provider.SqlServer 等 ado.net 相比，只支持较少的基础类型，其他功能几乎都有，包括 CodeFirst 自动迁移。</p>\n<p>国产数据库大多数都兼容 SqlServer、PostgreSQL、Oracle、MySql 这四种数据库，所以它们也可以用来访问国产数据库。</p>\n<h1> 自定义适配</h1>\n<p>通用实现为了让用户自己适配更多的数据库，比如连接 mssql 2000、db2 等数据库，牺牲了一些功能：</p>\n<ul>\n<li>不支持 CodeFirst 自动迁移</li>\n<li>不支持 DbFirst 接口方法的实现</li>\n<li>不支持 原来的分页方法，需要自行判断 id 进行分页</li>\n<li>只支持较少的基础类型：bool,sbyte,short,int,long,byte,ushort,uint,ulong,double,float,decimal,DateTime,byte[],string,Guid</li>\n</ul>\n<p>使用者只需求重写类 FreeSql.Odbc.Default.OdbcAdapter 就可以自定义访问不同的数据库。</p>\n<p>我们默认做了一套 sqlserver 的语法和映射适配，代码在 <a href=\"https://github.com/2881099/FreeSql/blob/master/Providers/FreeSql.Provider.Odbc/Default/OdbcAdapter.cs\" target=\"_blank\" rel=\"noopener noreferrer\">Default/OdbcAdapter.cs</a>，请查看代码了解。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>适配好新的 OdbcAdapter 后，请在 FreeSqlBuilder.Build 之后调用 IFreeSql.SetOdbcAdapter 方法生效。</p>\n",
      "date_published": "2022-07-09T09:12:12.000Z",
      "date_modified": "2022-09-08T15:50:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql 实现审计日志",
      "url": "https://freesql.net/extra/freesql-auditlog.html",
      "id": "https://freesql.net/extra/freesql-auditlog.html",
      "summary": "有两种情况，如果都是针对实体操作，确实很好做这个功能。 IFreeSql 更新/删除，都可以不传实体进行操作，所以这个 oldvalues, newvalues 实现起来比较麻烦（可能需要查询一次？性能？）。另外还有批量操作。 1、fsql.Aop.CurdAfter 事件是 CRUD 之后触发，提供以下参数 2、FreeSql.DbContext 或...",
      "content_html": "<h1> FreeSql 实现审计日志</h1>\n<p>有两种情况，如果都是针对实体操作，确实很好做这个功能。</p>\n<p>IFreeSql 更新/删除，都可以不传实体进行操作，所以这个 old_values, new_values 实现起来比较麻烦（可能需要查询一次？性能？）。另外还有批量操作。</p>\n<h2> 1、fsql.Aop.CurdAfter 事件是 CRUD 之后触发，提供以下参数</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2、FreeSql.DbContext 或者 FreeSql.UnitOfWork 提供对象变化跟踪</h2>\n<p>全局设置：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>单独设置 DbContext 或者 UnitOfWork：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>参数 report 是一个 List 集合，集合元素的类型定义如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>变化类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Insert</td>\n<td>实体对象被插入</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>实体对象被更新</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>实体对象被删除</td>\n</tr>\n<tr>\n<td>SqlRaw</td>\n<td>执行了SQL语句</td>\n</tr>\n</tbody>\n</table>\n<p>SqlRaw 目前有两处地方比较特殊：</p>\n<ul>\n<li>多对多联级更新导航属性的时候，对中间表的全部删除操作；</li>\n<li>通用仓储类 BaseRepository 有一个 Delete 方法，参数为表达式，而并非实体；</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>DbContext.SaveChanges，或者 Repository 对实体的 Insert/Update/Delete，或者 UnitOfWork.Commit 操作都会最多触发一次该事件。</p>\n<ul>\n<li>可根据 EntityType 获取具体的表名，数据库信息</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2022-08-30T23:13:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker+ FreeSql",
      "url": "https://freesql.net/extra/freesql-docker.html",
      "id": "https://freesql.net/extra/freesql-docker.html",
      "summary": ".net5+Docker+ Encryption(ssl/tls) handshake failed .net5 网站使用Sqlserver数据库部署在docker容器内运行报主库链接失败 环境 数据库：Sqlserver2014 网站程序：.Net5 Docker版本：Docker version 19.03.13, .net5环境镜像源：mcr.m...",
      "content_html": "<h1> Docker+ FreeSql</h1>\n<h2> .net5+Docker+ Encryption(ssl/tls) handshake failed</h2>\n<p>.net5 网站使用Sqlserver数据库部署在docker容器内运行报主库链接失败</p>\n<h3> 环境</h3>\n<p>数据库：Sqlserver2014\n网站程序：.Net5\nDocker版本：Docker version 19.03.13,\n.net5环境镜像源：mcr.microsoft.com/dotnet/aspnet:5.0-buster-slim\nCentos版本：CentOS Linux release 7.9.2009 (Core)</p>\n<h3> 使用原生方式进行测试</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 报错</h3>\n<p>A connection was successfully established with the server, but then an error occurred during the pre-login handshake. (provider: SSL Provider, error: 31 - Encryption(ssl/tls) handshake failed)</p>\n<h3> 最终解决方案</h3>\n<p>在dockerfile里面加上这么两句</p>\n<div class=\"language-Dockerfile line-numbers-mode\" data-ext=\"Dockerfile\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>将TLSv1.2设为TLSv1，只能是设为TLSv1而不是设为TLSv1.0</strong></p>\n<h2> 原文链接</h2>\n<ul>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/issues/650\" target=\"_blank\" rel=\"noopener noreferrer\">.net5 网站使用Sqlserver数据库部署在docker容器内运行报主库链接失败 · Issue #650 · dotnetcore/FreeSql (github.com)</a></li>\n</ul>\n",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2022-06-24T16:45:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "ISelect 拷贝克隆(copy/clone)",
      "url": "https://freesql.net/extra/iselect-depcopy.html",
      "id": "https://freesql.net/extra/iselect-depcopy.html",
      "summary": "当一个 ISelect 构造到一定复杂程序之后，比如： 利用语法糖解决： 科普： csharp 7.0 支持本地函数，方法内再定义临时方法，这个特性向大家推荐，在很多时候都非常有效。 方法内还可以定义方法，那就称它：本地函数/嵌套方法。 原文链接 技巧：ISelect 如何拷贝(copy)复用，克隆(clone) · Issue #644 · dotn...",
      "content_html": "<h1> ISelect 拷贝克隆(copy/clone)</h1>\n<p>当一个 ISelect 构造到一定复杂程序之后，比如：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>利用语法糖解决：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>科普：</p>\n<p>csharp 7.0 支持本地函数，<strong>方法内再定义临时方法</strong>，这个特性向大家推荐，在很多时候都非常有效。</p>\n<p>方法内还可以定义方法，那就称它：本地函数/嵌套方法。</p>\n<h2> 原文链接</h2>\n<ul>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/issues/644\" target=\"_blank\" rel=\"noopener noreferrer\">技巧：ISelect 如何拷贝(copy)复用，克隆(clone) · Issue #644 · dotnetcore/FreeSql (github.com)</a></li>\n</ul>\n",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2022-08-30T23:16:37.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "动态聚合列 sum(case when ...)",
      "url": "https://freesql.net/extra/issues-expression-groupbysum.html",
      "id": "https://freesql.net/extra/issues-expression-groupbysum.html",
      "summary": "如上 v1,v2,v3 是动态聚合值，如果 where IN (1,2,3,4) 那就会产生 v1-v4 正常情况下，静态的 lambda 查询没办法处理这种动态列查询。 变通一下，这样查询： 如此便可以使用 FreeSql 实现： 自定义解析表达式树，实现如下：",
      "content_html": "<h1> 动态聚合列 sum(case when ...)</h1>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如上 v1,v2,v3 是动态聚合值，如果 where IN (1,2,3,4) 那就会产生 v1-v4</p>\n<p>正常情况下，静态的 lambda 查询没办法处理这种动态列查询。</p>\n<hr>\n<p>变通一下，这样查询：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如此便可以使用 FreeSql 实现：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>自定义解析表达式树，实现如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2022-08-30T23:17:10.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "In多列查询，表达式自定义实现",
      "url": "https://freesql.net/extra/issues-in-valuetype.html",
      "id": "https://freesql.net/extra/issues-in-valuetype.html",
      "summary": "FreeSql 基础库为了不依赖 System.ValueType.dll，所以将以下代码抽离了出来。 Oracle 产生如下SQL： 非 ORACLE 产生如下 SQL： v3.2.650 使用 .Where(a => list.Any(b => b.Item1 == a. Id && b.Item2 == a. ct1)) 代码实现：",
      "content_html": "<h1> In多列查询，表达式自定义实现</h1>\n<p>FreeSql 基础库为了不依赖 System.ValueType.dll，所以将以下代码抽离了出来。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Oracle 产生如下SQL：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>非 ORACLE 产生如下 SQL：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>v3.2.650 使用 .Where(a =&gt; list.Any(b =&gt; b.Item1 == a. Id &amp;&amp; b.Item2 == a. ct1))</p>\n</blockquote>\n<p>代码实现：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2023-08-01T10:59:43.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Mysql 5.5 兼容性",
      "url": "https://freesql.net/extra/issues-mysql5_5.html",
      "id": "https://freesql.net/extra/issues-mysql5_5.html",
      "summary": "Mysql 5.5 不支持 datetime(3)，导致 codefirst 报错 二种解决办法： 1、[Column(DbType = \"DATETIME\")] 2、统一处理的话写个AOP",
      "content_html": "<h1> Mysql 5.5 兼容性</h1>\n<h2> Mysql 5.5 不支持 datetime(3)，导致 codefirst 报错</h2>\n<p>二种解决办法：</p>\n<p>1、[Column(DbType = \"DATETIME\")]</p>\n<p>2、统一处理的话写个AOP</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2022-06-24T16:45:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "MySqlConnector",
      "url": "https://freesql.net/guide/freesql-provider-mysqlconnector.html",
      "id": "https://freesql.net/guide/freesql-provider-mysqlconnector.html",
      "summary": "FreeSql.Provider.MySqlConnector是`FreeSql基于社区提供的最新的MySqlConnector (https://github.com/mysql-net/MySqlConnector)驱动的实现，兼容性、性能都比FreeSql.Provider.MySql好，且支持多种数据库，如：MySQL Server, Mari...",
      "content_html": "<!-- # FreeSql.Provider.MySqlConnector -->\n<p><code>FreeSql.Provider.MySqlConnector</code>是<code>FreeSql</code>基于社区提供的最新的<a href=\"https://github.com/mysql-net/MySqlConnector\" target=\"_blank\" rel=\"noopener noreferrer\"><code>MySqlConnector</code></a>驱动的实现，兼容性、性能都比<code>FreeSql.Provider.MySql</code>好，且支持多种数据库，如：<code>MySQL Server, MariaDB, Percona Server, Amazon Aurora, Azure Database for MySQL, Google Cloud SQL for MySQL, OceanBase</code></p>\n<p>并且支持BulkCopy，<strong>推荐使用</strong></p>\n<p>如果你使用 <code>FreeSql.Provider.MySql</code> 发生了以下错误，请替换到 FreeSql.Provider.MySqlConnector：</p>\n<ul>\n<li>The given key '0' was not present in the dictionary.</li>\n<li>The given key '25653' was not present in the dictionary.</li>\n<li>The given key '26995' was not present in the dictionary.</li>\n<li>The given key '28261 was not present in the dictionary.</li>\n<li>The given key '65535' was not present in the dictionary.</li>\n<li>The type initializer for 'MySql.Data.MySqlClient.Replication.ReplicationManager' threw an exception.</li>\n<li>Parameter '@xxx' must be defined.</li>\n<li>Object cannot be cast from DBNull to other types.</li>\n</ul>\n<h2> ExecuteMySqlBulkCopy</h2>\n<ul>\n<li>主键无值</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Id主键有值时</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2023-03-28T11:28:42.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql.Provider.Oracle",
      "url": "https://freesql.net/guide/freesql-provider-oracle.html",
      "id": "https://freesql.net/guide/freesql-provider-oracle.html",
      "summary": "FreeSql 对 Oracle 支持非常友好，是 c#.net ORM 不二之选，提供了 Ado.net/Odbc/Oledb 三种实现包，他们都支持 .NETCore2.1+、.NET4.0+ 等最新或较低的 .NETFramework 版本。 若想以 Ado.net 驱动访问数据库，请安装： dotnet add package FreeSql....",
      "content_html": "<h1> FreeSql.Provider.Oracle</h1>\n<p>FreeSql 对 Oracle 支持非常友好，是 c#.net ORM 不二之选，提供了 Ado.net/Odbc/Oledb 三种实现包，他们都支持 .NETCore2.1+、.NET4.0+ 等最新或较低的 .NETFramework 版本。</p>\n<p>若想以 Ado.net 驱动访问数据库，请安装：</p>\n<blockquote>\n<p>dotnet add package FreeSql.Provider.Oracle</p>\n</blockquote>\n<p>若想以 ODBC 驱动访问数据库，请安装：</p>\n<blockquote>\n<p>dotnet add package FreeSql.Provider.Odbc</p>\n</blockquote>\n<p>若想以 Oledb 驱动访问数据库，请安装：</p>\n<blockquote>\n<p>dotnet add package FreeSql.Provider.OracleOledb</p>\n</blockquote>\n<hr>\n<p>关于 Oracle US7ASCII 中文乱码的问题，Ado.Net 和 Odbc 无法解决。包括最新的.Net Core、.NET6、.NET7 都无法解决这个问题。</p>\n<p>安装 FreeSql.Provider.OracleOledb 使用 Oledb 驱动解决读取使用 US7ASCII 的 Oracle 数据库中文显示乱码问题。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>定义 DB.cs 类之后就可以快乐的 CRUD 了。FreeSql 提供多种 CRUD 使用习惯，请根据实际情况选择团队合适的一种：</p>\n<ul>\n<li>要么 FreeSql，原始用法；</li>\n<li>要么 FreeSql.Repository，仓储+工作单元习惯；</li>\n<li>要么 FreeSql.DbContext，很像 EFCore 的使用习惯；</li>\n<li>要么 FreeSql.BaseEntity，充血模式；</li>\n<li>要么 直接像 dapper 那样使用 OracleConnection 扩展方法；</li>\n</ul>\n",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2022-08-26T09:51:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "PostgreSQL",
      "url": "https://freesql.net/guide/freesql-provider-postgresql.html",
      "id": "https://freesql.net/guide/freesql-provider-postgresql.html",
      "summary": "nuget 安装：FreeSql.Provider.PostgreSQL 数组、字典 PostgreSQL 数据类型丰富，支持 int[]、string[] 数组类型，Dictionary 字典类型。 参考资料：《PostgreSQL Array 数组类型与 FreeSql 打出一套【组合拳】》 (https://www.cnblogs.com/Fre...",
      "content_html": "<!-- # FreeSql.Provider.PostgreSQL -->\n<p>nuget 安装：FreeSql.Provider.PostgreSQL</p>\n<h2> 数组、字典</h2>\n<p>PostgreSQL 数据类型丰富，支持 int[]、string[] 数组类型，Dictionary&lt;string, string&gt; 字典类型。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>参考资料：<a href=\"https://www.cnblogs.com/FreeSql/p/16351417.html\" target=\"_blank\" rel=\"noopener noreferrer\">《PostgreSQL Array 数组类型与 FreeSql 打出一套【组合拳】》</a></p>\n<h2> JSONB</h2>\n<p>PostgreSQL JSON 类型的查询性能不输 mongodb，适合做动态结构的数据存储场景。</p>\n<p>FreeSql.Provider.PostgreSQL 默认使用 Newtonsoft.Json.Linq 映射 jsonb 类型，如下三种均可：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>lambda 表达式树函数</th>\n<th>PostgreSQL</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a.Count</td>\n<td>jsonb_array_length(coalesce(a, '[]))</td>\n<td>json数组类型的长度</td>\n</tr>\n<tr>\n<td>a.Any()</td>\n<td>jsonb_array_length(coalesce(a, '[])) &gt; 0</td>\n<td>json数组类型，是否为空</td>\n</tr>\n<tr>\n<td>a.Contains(b)</td>\n<td>coalesce(a, '{}') @&gt; b::jsonb</td>\n<td>json中是否包含b</td>\n</tr>\n<tr>\n<td>a.ContainsKey(b)</td>\n<td>coalesce(a, '{}') ? b</td>\n<td>json中是否包含键b</td>\n</tr>\n<tr>\n<td>a.Concat(b)</td>\n<td>coalesce(a, '{}')</td>\n<td></td>\n</tr>\n<tr>\n<td>JObject.Parse(a)</td>\n<td>a::jsonb</td>\n<td>转化字符串为json类型</td>\n</tr>\n<tr>\n<td>a[\"x\"][\"y\"]</td>\n<td>a-&gt;x-&gt;y</td>\n<td>json成员访问</td>\n</tr>\n</tbody>\n</table>\n<p>更多 lambda 表达式树函数，可以看下<a href=\"https://freesql.net/guide/expression-function.html\" target=\"_blank\" rel=\"noopener noreferrer\">《表达式函数》</a>文档，支持自定义解析。</p>\n<p>参考资料：<a href=\"https://github.com/dotnetcore/FreeSql/discussions/1071\" target=\"_blank\" rel=\"noopener noreferrer\">《PostgreSQL pgsql jsonb 类型 POCO 访问扩展现实方案 #1071》</a></p>\n<h2> 空间地理类型</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意 NpgsqlConnection.GlobalTypeMapper.UseLegacyPostgis(); 与 FreeSqlBuilder 的顺序</p>\n</blockquote>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/discussions/1422\" target=\"_blank\" rel=\"noopener noreferrer\">《PostgreSQL 空间地理类型，自定义解析方案 #1422》</a></li>\n<li><a href=\"https://freesql.net/guide/type-mapping.html#postgresql-%E7%89%B9%E5%88%AB%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84\" target=\"_blank\" rel=\"noopener noreferrer\">《PostgreSQL 特别类型映射》</a></li>\n</ul>\n<h2> 时序数据库</h2>\n<p>timescaledb 是 postgresql的一个插件，一个开源的时间序列数据库，为快速获取和复杂查询进行了优化。它执行的是“完整的SQL”，相应地很容易像传统的关系数据库那样使用。</p>\n",
      "date_published": "2022-06-24T16:45:08.000Z",
      "date_modified": "2023-11-22T11:45:18.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "基于FreeSql扩展文档",
      "url": "https://freesql.net/extra/",
      "id": "https://freesql.net/extra/",
      "summary": "更多文档 CentOS8 ARM 下连接 SQL Server 2008 R2（Hypervisor） (https://github.com/dotnetcore/FreeSql/issues/601); 一对多关系，分表只取关联的第一条记录，如何获取 (https://github.com/dotnetcore/FreeSql/issues/430);",
      "content_html": "<h1> 基于FreeSql扩展文档</h1>\n<h2> 更多文档</h2>\n<ul>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/issues/601\" target=\"_blank\" rel=\"noopener noreferrer\">CentOS8 ARM 下连接 SQL Server 2008 R2（Hypervisor）</a></li>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/issues/430\" target=\"_blank\" rel=\"noopener noreferrer\">一对多关系，分表只取关联的第一条记录，如何获取</a></li>\n</ul>\n",
      "date_published": "2022-06-23T16:16:24.000Z",
      "date_modified": "2022-08-31T14:37:49.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "多个 IFreeSql 注入使用",
      "url": "https://freesql.net/extra/idlebus-freesql.html",
      "id": "https://freesql.net/extra/idlebus-freesql.html",
      "summary": "多库切换，动态切库，动态注册数据库 一、定义多个 IFreeSql 该方法适用于固定数据库，固定配置项 1、定义两个标识类： 2、在 Startup.cs 中单例注入 3、在 Controller 中使用 二、使用 FreeSql.Cloud 为 FreeSql 提供跨数据库访问，分布式事务TCC、SAGA解决方案，支持 .NET Core 2.1+,...",
      "content_html": "<h1> 多个 IFreeSql 注入使用</h1>\n<p>多库切换，动态切库，动态注册数据库</p>\n<h2> 一、定义多个 IFreeSql</h2>\n<p>该方法适用于固定数据库，固定配置项</p>\n<p>1、定义两个标识类：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、在 Startup.cs 中单例注入</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>3、在 Controller 中使用</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 二、使用 FreeSql.Cloud</h2>\n<p>为 FreeSql 提供跨数据库访问，分布式事务TCC、SAGA解决方案，支持 .NET Core 2.1+, .NET Framework 4.0+.</p>\n<p>开源地址：https://github.com/2881099/FreeSql.Cloud</p>\n<blockquote>\n<p>dotnet add package FreeSql.Cloud</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>Install-Package FreeSql.Cloud</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>FreeSqlCloud 必须定义成单例模式</p>\n</blockquote>\n<blockquote>\n<p>new FreeSqlCloud&lt;DbEnum&gt;() 多连接管理</p>\n</blockquote>\n<blockquote>\n<p>new FreeSqlCloud&lt;DbEnum&gt;(\"myapp\") 开启 TCC/SAGA 事务生效</p>\n</blockquote>\n<p>FreeSqlCloud 的访问方式和 IFreeSql 一样：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>切换数据库：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>自动定向数据库配置：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 参考</h2>\n<p><a href=\"https://github.com/dotnetcore/FreeSql/issues/44\" target=\"_blank\" rel=\"noopener noreferrer\">多个 IFreeSql 实例，如何注入使用？ · Issue #44 · dotnetcore/FreeSql (github.com)</a></p>\n",
      "date_published": "2022-06-23T16:16:24.000Z",
      "date_modified": "2022-09-21T01:47:09.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "支持我们",
      "url": "https://freesql.net/reference/service-support.html",
      "id": "https://freesql.net/reference/service-support.html",
      "summary": "FreeSql 采用 MIT 最宽松的开源协议，永久免费开源。任何公司或个人，都可以使用在任何商业项目中。 QQ 技术群：561616019(在线)、4336577(满员)、8578575(满员)、52508226(满员) 反馈问题请前往 https://github.com/dotnetcore/FreeSql/issues (https://git...",
      "content_html": "<h1> 支持我们</h1>\n<p>FreeSql 采用 MIT 最宽松的开源协议，永久免费开源。任何公司或个人，都可以使用在任何商业项目中。</p>\n<p>QQ 技术群：561616019(在线)、4336577(满员)、8578575(满员)、52508226(满员)</p>\n<p>反馈问题请前往 <a href=\"https://github.com/dotnetcore/FreeSql/issues\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/issues</a></p>\n<h2> 💕 自愿捐赠</h2>\n<p>L*y 58 元、花花 88 元、麦兜很乖 50 元、网络来者 2000 元、John 99.99 元、alex 666 元、bacongao 36 元、无名 100 元、Eternity 188 元、无名 10 元、⌒.Helper~..oO 66 元、习惯与被习惯 100 元、无名 100 元、蔡易喋 88.88 元、中讯科技 1000 元、Good Good Work 24 元、炽焰 6.6 元、Nothing 100 元、兰州天擎赵 500 元、哈利路亚 300 元、\n无名 100 元、蛰伏 99.99 元、TCYM 66.66 元、MOTA 5 元、LDZXG 30 元、Near 30 元、建爽 66 元、无名 200 元、LambertWu 100 元、无名 18.88 元、乌龙 50 元、无名 100 元、陳怼怼 66.66 元、陳怼怼 66.66 元、丁淮 100 元、李伟坚-Excel 催化剂 100 元、白狐 6.66 元、她微笑的脸 y 30 元、Eternity²º²¹ 588 元、夜归柴门 88 元、蔡易喋 666.66 元、\n<em>礼 10 元、litrpa 88 元、Alax CHOW 200 元、Daily 66 元、k</em>t 66 元、蓝 100 元、*菜 10 元、生命如歌 1000 元、山鸡 88元、平凡 100元、大树 1000元、软软的毛毛虫 66.66元、问卷星 2000元、与你无关 5000元、看门大爷 1000元</p>\n<blockquote>\n<p>超级感谢你的打赏。</p>\n</blockquote>\n<ul>\n<li>\n<p><a href=\"https://www.cnblogs.com/FreeSql/gallery/image/338860.html\" target=\"_blank\" rel=\"noopener noreferrer\">Alipay</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cnblogs.com/FreeSql/gallery/image/338859.html\" target=\"_blank\" rel=\"noopener noreferrer\">WeChat</a></p>\n</li>\n</ul>\n<h2> 🌳 有偿服务</h2>\n<table>\n<thead>\n<tr>\n<th>服务项目</th>\n<th>描述</th>\n<th>价格(RMB)</th>\n<th>付款方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FreeSql 技术支持(企业)</td>\n<td>对企业遇到任何 FreeSql 问题，提供远程协助或紧急功能支持</td>\n<td>5000/年</td>\n<td>寄发票后付款</td>\n</tr>\n<tr>\n<td>.NET 外包项目</td>\n<td>价格不低于 5 万，走公司合同</td>\n<td>面议</td>\n<td>按合同付款</td>\n</tr>\n</tbody>\n</table>\n<p>联系方式</p>\n<p>QQ：2881099</p>\n<p>Weixin：q2881099</p>\n<blockquote>\n<p>开源不易，未来营造，感恩有你，伴我同行</p>\n</blockquote>\n",
      "date_published": "2022-05-25T15:18:32.000Z",
      "date_modified": "2023-11-22T08:15:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql.Provider.SqliteCore",
      "url": "https://freesql.net/guide/freesql-provider-sqlitecore.html",
      "id": "https://freesql.net/guide/freesql-provider-sqlitecore.html",
      "summary": "FreeSql.Provider.SqliteCore是FreeSql基于微软提供的最新的Microsoft.Data.Sqlite.Core (https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/?tabs=netcore-cli)驱动的实现。 需要另外安装对应的bundle_xx...",
      "content_html": "<h1> FreeSql.Provider.SqliteCore</h1>\n<p>FreeSql.Provider.SqliteCore是<code>FreeSql</code>基于微软提供的最新的<a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/?tabs=netcore-cli\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Microsoft.Data.Sqlite.Core</code></a>驱动的实现。\n<strong>需要另外安装对应的bundle_xxx</strong>实现加密。</p>\n<h2> 支持的版本</h2>\n<ul>\n<li>.NET Standard 2.0（支持.NET Framework4.6.1+/支持.NET Core 2.0+）</li>\n<li>net6.0</li>\n<li>SQLite（3.7 及以上版本）</li>\n<li>Linux ARM/X86/MAUI Android/MAUI iOS等</li>\n</ul>\n<p>安装<code>FreeSql.Provider.SqliteCore</code>包。</p>\n<div class=\"language-console line-numbers-mode\" data-ext=\"console\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>SQLitePCLRaw.bundle_e_sqlite3</code> 不支持加密，但此方式是官方实现的<code>SQlite</code>版本，以下二选一：</p>\n<table>\n<thead>\n<tr>\n<th>捆绑</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SQLitePCLRaw.bundle_e_sqlite3</td>\n<td>在所有平台上提供一致版本的 <code>SQLite</code>。 包括 FTS4、FTS5、JSON1 和 R* 树扩展。 建议使用</td>\n</tr>\n<tr>\n<td>SQLitePCLRaw.bundle_e_sqlcipher</td>\n<td>提供 <code>SQLCipher</code> 的非官方开放源代码内部版本，<strong>支持加密</strong>。</td>\n</tr>\n</tbody>\n</table>\n<h2> 只有 <strong>SQLitePCLRaw.bundle_e_sqlcipher</strong> 才支持加密</h2>\n<p>0.选择一个目录，创建一个控制台项目<code>OvOv.FreeSqlMicrosoftSqliteCore</code></p>\n<div class=\"language-console line-numbers-mode\" data-ext=\"console\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>1.安装包</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>连接串直接指定Password=xxx即可</li>\n</ol>\n<p>创建一个类<code>DB.cs</code>,可直接通过<code>DB.sqlite</code>访问到<code>IFreeSql</code>对象</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>测试加密,增加一些数据。<code>Program.cs</code>中测试</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>运行项目</p>\n<div class=\"language-console line-numbers-mode\" data-ext=\"console\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 验证是否登录是否加密？</h3>\n<p>重新运行时，删除 连接串中的Password,发现无法获取数据。或使用<code>Navicat Premium</code>工具发现无法连接。</p>\n<div class=\"language-diff line-numbers-mode\" data-ext=\"diff\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>提示如下内容，但使用密码时又能正常访问数据。</p>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>相比包 <code>FreeSql.Provider.Sqlite</code>来说，目前存在一些限制，</p>\n<h4> |DataDirectory| 默认不支持</h4>\n<p>需要使用前，指定具体的文件夹，此处相当于指定了当前<code>dll</code>所在目录，即<code>bin/Debug/net6.0</code>。参考</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>即</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>具体的链接串，请参考  <a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/connection-strings\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/connection-strings</a></p>\n<h4> 数学函数</h4>\n<p>如下函数不支持</p>\n<ul>\n<li>Floor</li>\n<li>Ceiling</li>\n<li>Log10</li>\n<li>Pow</li>\n<li>Sqrt</li>\n<li>Cos</li>\n</ul>\n<h4> TimeSpanTest</h4>\n<p>测试 类中 不通过、ulong最大值，最小值，超出范围。</p>\n<ul>\n<li>不支持</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不支持</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 完整代码</h4>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/Database-Drivers/OvOv.FreeSqlMicrosoftSqliteCore/Program.cs\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/blob/master/Database-Drivers/OvOv.FreeSqlMicrosoftSqliteCore/Program.cs</a></li>\n</ul>\n<h2> iOS</h2>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/xamarin#ios\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/xamarin#ios</a></p>\n<p><code>Microsoft.Data.Sqlite</code> 尝试自动初始化 <code>SQLitePCLRaw</code> 捆绑。 遗憾的是，由于针对 <code>Xamarin.iOS</code> 的预先 (AOT) 编译存在限制，因此尝试失败，并出现以下错误。</p>\n<blockquote>\n<p>需要调用 <code>SQLitePCL.raw.SetProvider()</code>。 如果使用的是捆绑包，可以通过调用 <code>SQLitePCL.Batteries.Init()</code> 来完成此操作。</p>\n</blockquote>\n<p>若要初始化该绑定，请在使用 <code>Microsoft.Data.Sqlite</code> 之前，将以下代码行添加到应用。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>即在上方定义<code>FreeSql</code>单例时，在<code>new Lazy</code>内，调用一次即可。</p>\n<h2> .NET Framework 支持</h2>\n<ul>\n<li>.NETStandard2.0（支持.NET Framework4.6.1+）</li>\n</ul>\n<p>有二种方法支持.NET Framework(选择其中一个即可)</p>\n<h3> 1.复制.NET Core中的dll</h3>\n<p>创建一个.NET Core的console项目，然后安装nuget包 <code>SQLitePCLRaw.bundle_e_sqlcipher</code>，编译后生成的<code>bin\\Debug\\net5.0\\runtimes\\win-x64\\native\\e_sqlcipher.dll</code>\n复制到 .net framework 4.8的项目中<code>bin/Debug/e_sqlcipher.dll</code>中</p>\n<h3> 2.转换项目 <strong>（建议）</strong></h3>\n<p>先安装好相关的包,然后右键<code>packages.config</code>,选择将<code>packages.config 迁移到PackageReference中</code>,弹出的框勾选所有包，确定即可。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption>./images/dotnetframwork-sqlitecore.png</figcaption></figure>\n",
      "date_published": "2022-03-25T06:41:57.000Z",
      "date_modified": "2022-08-10T01:25:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "UowManager 事务 ✨",
      "url": "https://freesql.net/guide/unitofwork-manager.html",
      "id": "https://freesql.net/guide/unitofwork-manager.html",
      "summary": "本篇文章内容引导，如何在 asp.net core 项目中使用特性(注解) 的方式管理事务。 UnitOfWorkManager 只可以管理 Repository 仓储对象的事务，直接 fsql.Insert\\() 是不行的！！但是可以用 repository.Orm.Insert\\！！repository.Orm 是特殊实现的 IFreeSql，与 ...",
      "content_html": "<h1> UowManager 事务 ✨</h1>\n<p>本篇文章内容引导，如何在 asp.net core 项目中使用特性(注解) 的方式管理事务。</p>\n<blockquote>\n<p>UnitOfWorkManager 只可以管理 Repository 仓储对象的事务，直接 fsql.Insert&lt;T&gt;() 是不行的！！但是可以用 repository.Orm.Insert&lt;T&gt;！！repository.Orm 是特殊实现的 IFreeSql，与 当前事务保持一致。</p>\n</blockquote>\n<p>支持六种传播方式(propagation)，意味着跨方法的事务非常方便，并且支持同步异步：</p>\n<ul>\n<li>Requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，默认的选择。</li>\n<li>Supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li>\n<li>Mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li>\n<li>NotSupported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>\n<li>Never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li>\n<li>Nested：以嵌套事务方式执行。</li>\n</ul>\n<h2> 第一步：引入动态代理库</h2>\n<blockquote>\n<p>肉夹馍：https://github.com/inversionhourglass/Rougamo</p>\n</blockquote>\n<blockquote>\n<p>dotnet add package Rougamo.Fody</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>UnitOfWorkManager 成员</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IUnitOfWork Current</td>\n<td>返回当前的工作单元</td>\n</tr>\n<tr>\n<td>void Binding(repository)</td>\n<td>将仓储的事务交给它管理</td>\n</tr>\n<tr>\n<td>IUnitOfWork Begin(propagation, isolationLevel)</td>\n<td>创建工作单元</td>\n</tr>\n</tbody>\n</table>\n<h2> 第二步：配置 Startup.cs 注入、中间件</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 第三步：在 Controller 或者 Service 或者 Repository 中使用事务特性</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>是不是进方法就开事务呢？</p>\n<p>不一定是真实事务，有可能是虚的，就是一个假的 unitofwork（不带事务）</p>\n<p>也有可能是延用上一次的事务</p>\n<p>也有可能是新开事务，具体要看传播模式</p>\n<h2> 重写仓储实现</h2>\n<p>以上使用的是泛型仓储，那我们如果是重写一个仓储 如何保持和<code>UnitOfWorkManager</code>同一个事务呢。\n继承现有的<code>DefaultRepository&lt;,&gt;</code>仓储，实现自定义的仓储<code>SongRepository.cs</code>,</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中接口。<code>ISongRepository.cs</code></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在 startup.cs 注入此服务</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><hr>\n<h2> FreeSql.Cloud 如何使用 UnitOfWorkManager？</h2>\n<p>注意：如果是<a href=\"/guide/multi-tenancy.html#%E6%96%B9%E6%A1%88%E4%B8%89-%E6%8C%89%E7%A7%9F%E6%88%B7%E5%88%86%E5%BA%93\" target=\"blank\">多租户分库场景</a>，请直接使用上面的方案，多租户同一请求大部分都只操作一个数据库，只需要提前将 FreeSqlCloud 对象 Change 切换好。</p>\n<hr>\n<p>以 DbEnum 为例定义 FreeSqlCloud 对象如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最终呈现的 AOP 事务代码如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>约定好 IBaseRepository&lt;T&gt; 默认是 db1 的仓储实现，注入如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>UnitOfWorkManagerCloud、RepositoryCloud、TransactionalAttribute 是我们需要实现的部分：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-08-21T05:59:59.000Z",
      "date_modified": "2022-10-11T16:43:37.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "IFreeSql 和 DbContext",
      "url": "https://freesql.net/guide/ifreesql-context.html",
      "id": "https://freesql.net/guide/ifreesql-context.html",
      "summary": "两者并存 FreeSql 支持 IFreeSql 和 DbContext 两种形式，使用方法差异也有些大，其中 DbContext 跟 EFCore 使用方式基本一致，使用简单、依赖注入方便。 而 IFreeSql 支持更多细粒度的操作。在 DbContext 中，要删除多个行记录，必须先查询实体后，再使用 RemoveRange() 删除这些实体，当...",
      "content_html": "<h1> IFreeSql 和 DbContext</h1>\n<h2> 两者并存</h2>\n<p>FreeSql 支持 IFreeSql 和 DbContext 两种形式，使用方法差异也有些大，其中 DbContext 跟 EFCore 使用方式基本一致，使用简单、依赖注入方便。</p>\n<p>而 IFreeSql 支持更多细粒度的操作。在 DbContext 中，要删除多个行记录，必须先查询实体后，再使用 <code>RemoveRange()</code> 删除这些实体，当数据量非常大的时候，便会消耗大量时间和性能。而 IFreeSql 中，支持嵌入部分 SQL ，支持细粒度的行记录操作。在 IFreeSql 中批量删除、修改记录，可以使用类似 SQL 的模式：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>所以往往将 IFreesql 和 DbContext 并存，在使用时，根据场景使用这两种方式操作数据库。</p>\n<h2> 使用方法</h2>\n<p>IFreeSql 的创建需要定义为单例模式，示例如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而 Freesql 也支持了类似 EFCore 的 DbContext 模式。通过引入 <code>FreeSql.DbContext</code> 库，可以使用特性、Fluent api 等配置实体映射、导航属性等，生成类似于 EFCore 的 DbContext 类型，然后通过依赖注入实例化使用。</p>\n<p>通过定义 DbContext ，我们可以根据 EFCore 的使用习惯，快速掌握 FreeSql 的使用，甚至可以直接将 EFCore DbContext 转为 Freesql DbContext，因为 Freesql DbContext 支持了 95% 的 EFCore Fluent api 。</p>\n<p>下面说说如何利用 FreeSql 更加方便地迁移数据库以及定义 DbContext。</p>\n<p>安装 FreeSql 工具：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>接着还原数据库表为实体：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>还原的实体示例：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在 FreeSql 中，实体特性优先于 Fluent api，同时 FreeSql 也兼容 EFCore 的实体特性。</p>\n<p>由于 <code>FreeSql.Generator</code> 工具很方便，我们不需要另外使用 Fluent api 去定义复杂的逻辑结构。</p>\n<p>接着定义 DbContext：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>通过这种方法，IFreeSql 和 DbContext 中的实体及其实体特性、Fluent api 等都保持一致。</p>\n</blockquote>\n<p>接着，在依赖注入中，将 IFreeSql 和 DbContext 都注入。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们在类型中通过依赖注入获取到这两种服务：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后就可以快乐地使用 Freesql 了。</p>\n",
      "date_published": "2021-07-14T05:16:31.000Z",
      "date_modified": "2022-09-04T08:51:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "WithSql",
      "url": "https://freesql.net/guide/withsql.html",
      "id": "https://freesql.net/guide/withsql.html",
      "summary": "WithSql 自定义 SQL 定义实体类 不同的查询方式。 返回DataTable; 返回List 即List元组; 返回List 且能支持分页; 返回List且能支持分页; 1.动态表名 2.返回 DataTable 3.返回 DataTable 4.返回List 即List 元组 5.返回List 6.返回List 且能支持分页 7.返回List...",
      "content_html": "<h1> WithSql</h1>\n<h2> WithSql 自定义 SQL</h2>\n<p>定义实体类</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不同的查询方式。</p>\n<ul>\n<li>返回<code>DataTable</code></li>\n<li>返回<code>List&lt;Tuplue&gt;</code> 即<code>List&lt;(string,string)&gt;</code>元组</li>\n<li>返回<code>List&lt;object&gt;</code> 且能支持分页</li>\n<li>返回<code>List&lt;TestClassDto&gt;</code>且能支持分页</li>\n</ul>\n<h3> 1.动态表名</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.返回 DataTable</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3.返回 DataTable</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 4.返回<code>List&lt;Tuplue&gt;</code> 即<code>List&lt;(string,string)&gt;</code> 元组</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5.返回<code>List&lt;object&gt;</code></h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 6.返回<code>List&lt;object&gt;</code> 且能支持分页</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 7.返回<code>List&lt;TestClassDto&gt;</code>且能支持分页</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 通过 WithSql + ToSQL 实现 Union ALL 查询方法</h2>\n<h3> 1、二次 ISelect 查询：WithSql 使用多次，等于 UNION ALL 查询</h3>\n<p>WithSql 使用多次为 UNION ALL 查询，所以我们可以利用 ISelect.ToSql(FieldAliasOptions.AsProperty) 得到生成的 SQL，如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2、跨分表查询：AsTable 相同实体多次操作，等于 Union ALL 查询</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3、利用 ToSql 拼接新的 SQL，使用 IAdo 执行</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 分页问题</h2>\n<p>Union All 之后 如果直接 分页会有一个问题。请看具体示例</p>\n<p>多次 WithSql + Page 存在问题：每个 WithSql 内都有一个 Page 分页</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>多个 sql union all 使用 withsql，直接 Page 分页，会导致每个子表都生效，子表都生成分页。</p>\n<p>WithSql 可以和 AsTable 实现分表的功能。</p>\n<p>分表跨表查询的时候，分页是要向每个子表（即每个 WithSql 中的 SQL 分页）都生效。</p>\n<h3> 解决方案</h3>\n<p>多次 withsql ，如需分页，需要按下面的二步操作</p>\n<ul>\n<li>第一步：通过 witsql，将二个 sql 组成一个 sql。</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如上生成的 UOION ALL 的 sql</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>第二步：之后 调用 Page 则是通过 Union ALL 后的结果上分页</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-06-16T16:56:09.000Z",
      "date_modified": "2023-12-14T11:34:54.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Awesome FreeSql",
      "url": "https://freesql.net/reference/awesome-freesql.html",
      "id": "https://freesql.net/reference/awesome-freesql.html",
      "summary": "基于 FreeSql 的仓库项目 .flex{ display: flex; flex-wrap: wrap; justify-content: flex-start; } .vp-banner{ flex-basis: 38%; margin-top: 1.5%; padding:2rem; } .vp-banner-content{ max-wid...",
      "content_html": "<h1> Awesome FreeSql</h1>\n<h2> 基于 FreeSql 的仓库项目</h2>\n<div class=\"flex\">\n</div>\n<h2> FreeSql 官方博客</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/kellynic/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/kellynic/</a></li>\n<li><a href=\"https://www.cnblogs.com/freesql/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/freesql/</a></li>\n</ul>\n<h2> 官方文档</h2>\n<ul>\n<li><a href=\"https://freesql.net\" target=\"_blank\" rel=\"noopener noreferrer\">https://freesql.net</a></li>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/wiki</a></li>\n<li><a href=\"http://101.34.7.82:8082/api/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">API 参考(国内镜像)</a></li>\n<li><a href=\"https://dotnetcore.github.io/FreeSql/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">API 参考</a></li>\n</ul>\n<h2> 源码</h2>\n<ul>\n<li>GitHub <a href=\"https://github.com/dotnetcore/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql</a></li>\n<li>Gitee <a href=\"https://gitee.com/FreeSql/FreeSql-ORM\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/FreeSql/FreeSql-ORM</a></li>\n</ul>\n",
      "date_published": "2021-02-09T12:13:50.000Z",
      "date_modified": "2024-01-30T14:02:21.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "特别鸣谢",
      "url": "https://freesql.net/reference/donation.html",
      "id": "https://freesql.net/reference/donation.html",
      "summary": "捐赠者 金额 时间 ------------------- --------- ---- L\\*y 58 元 花花 88 元 麦兜很乖 50 元 网络来者 2000 元 John 99.99 元 alex 666 元 bacongao 36 元 无名 100 元 Eternity 188 元 无名 10 元 ⌒.Helper~..oO 66 元 习惯与...",
      "content_html": "<h1> 特别鸣谢</h1>\n<table>\n<thead>\n<tr>\n<th>捐赠者</th>\n<th>金额</th>\n<th>时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L*y</td>\n<td>58 元</td>\n<td></td>\n</tr>\n<tr>\n<td>花花</td>\n<td>88 元</td>\n<td></td>\n</tr>\n<tr>\n<td>麦兜很乖</td>\n<td>50 元</td>\n<td></td>\n</tr>\n<tr>\n<td>网络来者</td>\n<td>2000 元</td>\n<td></td>\n</tr>\n<tr>\n<td>John</td>\n<td>99.99 元</td>\n<td></td>\n</tr>\n<tr>\n<td>alex</td>\n<td>666 元</td>\n<td></td>\n</tr>\n<tr>\n<td>bacongao</td>\n<td>36 元</td>\n<td></td>\n</tr>\n<tr>\n<td>无名</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>Eternity</td>\n<td>188 元</td>\n<td></td>\n</tr>\n<tr>\n<td>无名</td>\n<td>10 元</td>\n<td></td>\n</tr>\n<tr>\n<td>⌒.Helper~..oO</td>\n<td>66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>习惯与被习惯</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>无名</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>蔡易喋</td>\n<td>88.88 元</td>\n<td></td>\n</tr>\n<tr>\n<td>中讯科技</td>\n<td>1000 元</td>\n<td></td>\n</tr>\n<tr>\n<td>Good Good Work</td>\n<td>24 元</td>\n<td></td>\n</tr>\n<tr>\n<td>炽焰</td>\n<td>6.6 元</td>\n<td></td>\n</tr>\n<tr>\n<td>Nothing</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>兰州天擎赵</td>\n<td>500 元</td>\n<td></td>\n</tr>\n<tr>\n<td>哈利路亚</td>\n<td>300 元</td>\n<td></td>\n</tr>\n<tr>\n<td>无名</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>蛰伏</td>\n<td>99.99 元</td>\n<td></td>\n</tr>\n<tr>\n<td>TCYM</td>\n<td>66.66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>MOTA</td>\n<td>5 元</td>\n<td></td>\n</tr>\n<tr>\n<td>LDZXG</td>\n<td>30 元</td>\n<td></td>\n</tr>\n<tr>\n<td>Near</td>\n<td>30 元</td>\n<td></td>\n</tr>\n<tr>\n<td>建爽</td>\n<td>66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>无名</td>\n<td>200 元</td>\n<td></td>\n</tr>\n<tr>\n<td>LambertWu</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>无名</td>\n<td>18.88 元</td>\n<td></td>\n</tr>\n<tr>\n<td>乌龙</td>\n<td>50 元</td>\n<td></td>\n</tr>\n<tr>\n<td>无名</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>陳怼怼</td>\n<td>66.66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>陳怼怼</td>\n<td>66.66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>丁淮</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>李伟坚-Excel 催化剂</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>白狐</td>\n<td>6.66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>她微笑的脸 y</td>\n<td>30 元</td>\n<td></td>\n</tr>\n<tr>\n<td>Eternity2o21</td>\n<td>588 元</td>\n<td></td>\n</tr>\n<tr>\n<td>夜归柴门</td>\n<td>88 元</td>\n<td></td>\n</tr>\n<tr>\n<td>蔡易喋</td>\n<td>666.66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>*礼</td>\n<td>10 元</td>\n<td></td>\n</tr>\n<tr>\n<td>litrpa</td>\n<td>88 元</td>\n<td></td>\n</tr>\n<tr>\n<td>Alax CHOW</td>\n<td>200 元</td>\n<td></td>\n</tr>\n<tr>\n<td>Daily</td>\n<td>66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>k*t</td>\n<td>66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>蓝</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>*菜</td>\n<td>10 元</td>\n<td></td>\n</tr>\n<tr>\n<td>生命如歌</td>\n<td>1000 元</td>\n<td></td>\n</tr>\n<tr>\n<td>山鸡</td>\n<td>88 元</td>\n<td></td>\n</tr>\n<tr>\n<td>平凡</td>\n<td>100 元</td>\n<td></td>\n</tr>\n<tr>\n<td>大树</td>\n<td>1000 元</td>\n<td></td>\n</tr>\n<tr>\n<td>软软的毛毛虫</td>\n<td>66.66 元</td>\n<td></td>\n</tr>\n<tr>\n<td>问卷星</td>\n<td>2000 元</td>\n<td></td>\n</tr>\n<tr>\n<td>与你无关</td>\n<td>5000元</td>\n<td></td>\n</tr>\n<tr>\n<td>看门大爷</td>\n<td>1000 元</td>\n<td></td>\n</tr>\n<tr>\n<td>建爽</td>\n<td>200元</td>\n<td>2023-12-13</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-09T12:13:50.000Z",
      "date_modified": "2023-12-13T09:51:13.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "ADO",
      "url": "https://freesql.net/guide/ado.html",
      "id": "https://freesql.net/guide/ado.html",
      "summary": "Ado 是 IFreeSql 下重要的对象之一，它包括所有对 SQL 操作的封装，提供 ExecuteReader、ExecuteDataSet、ExecuteDataTable、ExecuteNonQuery、ExecuteScalar 等方法，使用起来和传统 SqlHelper 一样。 查询 SQL 返回实体 参数化 Ado 下面所有参数 obje...",
      "content_html": "<h1> ADO</h1>\n<p>Ado 是 IFreeSql 下重要的对象之一，它包括所有对 SQL 操作的封装，提供 ExecuteReader、ExecuteDataSet、ExecuteDataTable、ExecuteNonQuery、ExecuteScalar 等方法，使用起来和传统 SqlHelper 一样。</p>\n<h2> 查询 SQL 返回实体</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 参数化</h2>\n<p>Ado 下面所有参数 object parms 都可以接受匿名对象，或者字典：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>关于<strong>参数前缀</strong>：</p>\n<ul>\n<li>odbc 是 <strong>?</strong> 并且没有标识，所以 freesql 禁用了 odbc 参数化</li>\n<li>oracle 是 <strong>:</strong></li>\n<li>mysql.data 是 <strong>?</strong></li>\n<li>mysqlconnector 是 <strong>@</strong></li>\n<li>其他基本都是 <strong>@</strong></li>\n</ul>\n<p>IN 参数化查询：</p>\n<blockquote>\n<p>当前仅支持 Array 和 IList 类型绑定</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 检测连接</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> CommandFluent</h2>\n<p>fsql.Ado 重载方法太多的情况下，建议使用 CommandFluent，例如存储过程：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Oracle 存储过程获取 DataTable：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Ado.net 扩展方法</h2>\n<p>提供了类似 Dapper 的使用方法，FreeSql 增加了 IDbConnection/IDbTransaction 对象的扩展方法 Select/Insert/Update/Delete 实现 CRUD。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>每个 SqlConnection GetFreeSql() 返回的 IFreeSql 实例相同；</li>\n<li>可以对 fsql 设置 Aop 事件，比如监视 SQL；</li>\n<li>IFreeSql 自身的成员 IDbFirst、Transaction 不可用；</li>\n</ul>\n<p>利用本功能可以快速将 FreeSql 使用到项目中，只需要处理好实体类的特性。</p>\n<p>提示：FreeSql 兼容 EFCore 99% 的实体特性</p>\n",
      "date_published": "2021-02-06T16:18:46.000Z",
      "date_modified": "2024-01-18T08:16:13.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "前言",
      "url": "https://freesql.net/guide/BaseEntity.html",
      "id": "https://freesql.net/guide/BaseEntity.html",
      "summary": "尝试过 ado.net、dapper、ef，以及 Repository 仓储，甚至自己还写过生成器工具，以便做常规 CRUD 操作。 它们日常操作不方便之处： 每次使用前需要声明，再操作；; 很多人一个实体类，对应一个操作类（或 DAL、DbContext、Repository）；; 本文介绍 BaseEntity 一种极简约的 CRUD 操作方法。 ...",
      "content_html": "<h1> 前言</h1>\n<p>尝试过 ado.net、dapper、ef，以及 Repository 仓储，甚至自己还写过生成器工具，以便做常规 CRUD 操作。</p>\n<p>它们日常操作不方便之处：</p>\n<ul>\n<li>\n<p>每次使用前需要声明，再操作；</p>\n</li>\n<li>\n<p>很多人一个实体类，对应一个操作类（或 DAL、DbContext、Repository）；</p>\n</li>\n</ul>\n<p>本文介绍 BaseEntity 一种极简约的 CRUD 操作方法。</p>\n<h2> 功能特点</h2>\n<ul>\n<li>\n<p>自动迁移实体结构（CodeFirst），到数据库；</p>\n</li>\n<li>\n<p>直接操作实体的方法，进行 CRUD 操作；</p>\n</li>\n<li>\n<p>简化用户定义实体类型，省去主键、常用字段的配置（如 CreateTime、UpdateTime）；</p>\n</li>\n<li>\n<p>实现单表、多表查询的软删除逻辑；</p>\n</li>\n</ul>\n<h2> 声明</h2>\n<p>参考 BaseEntity.cs 源码（约 100 行），copy 到项目中使用，然后添加 nuget 引用包：</p>\n<blockquote>\n<p>dotnet add package FreeSql.DbContext</p>\n</blockquote>\n<blockquote>\n<p>dotnet add package FreeSql.Provider.Sqlite</p>\n</blockquote>\n<p>1、定义一个主键 int 并且自增的实体类型，BaseEntity TKey 指定为 int/long 时，会认为主键是自增；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果不想主键是自增键，可以重写属性：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>有关更多实体的特性配置，可参阅 <a href=\"/guide/entity-attribute.html\" target=\"blank\">实体属性</a></p>\n</blockquote>\n<p>2、定义一个主键 Guid 的实体类型，保存数据时会自动产生有序不重复的 Guid 值（不用自己指定 Guid.NewGuid()）；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>3、定义多主键的实体类型，可以在 static 构造函数中重写字段名；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> CRUD 使用</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实体类型.Select 是一个查询对象，使用方法和 FreeSql.ISelect 一样；</p>\n<p>支持多表查询时，软删除条件会附加在每个表中；</p>\n<blockquote>\n<p>有关更多查询方法，可参阅 <a href=\"/guide/select.html\" target=\"blank\">查询</a></p>\n</blockquote>\n<p>示范项目：<a href=\"https://github.com/dotnetcore/FreeSql/tree/master/Examples/base_entity\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/tree/master/Examples/base_entity</a></p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-07-09T09:12:32.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "指南",
      "url": "https://freesql.net/guide/",
      "id": "https://freesql.net/guide/",
      "summary": "![Member project of .NET Core Community (https://img.shields.io/badge/member%20project%20of-NCC-9e20c9.svg)](https://github.com/dotnetcore) ![nuget (https://img.shields.io/nuget...",
      "content_html": "<h1> 指南</h1>\n<p><a href=\"https://github.com/dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/member project of-NCC-9e20c9.svg\" alt=\"Member project of .NET Core Community\" loading=\"lazy\"></a>\n<a href=\"https://www.nuget.org/packages/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/FreeSql.svg?style=flat-square\" alt=\"nuget\" loading=\"lazy\"></a>\n<a href=\"https://www.nuget.org/packages/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/vpre/FreeSql.svg?style=flat-square\" alt=\"nuget\" loading=\"lazy\"></a>\n<a href=\"https://www.nuget.org/stats/packages/FreeSql?groupby=Version\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/dt/FreeSql.svg?style=flat-square\" alt=\"stats\" loading=\"lazy\"></a>\n<a href=\"https://github.com/dotnetcore/FreeSql/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License\" loading=\"lazy\"></a></p>\n<figure><a href=\"https://starchart.cc/dotnetcore/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://starchart.cc/dotnetcore/FreeSql.svg\" alt=\"Stargazers over time\" tabindex=\"0\" loading=\"lazy\"></a><figcaption>Stargazers over time</figcaption></figure>\n<h2> FreeSql</h2>\n<p><code>FreeSql</code> 是一款功能强大的对象关系映射（O/RM）组件，支持 <code>.NET Core 2.1+</code>、<code>.NET Framework 4.0+</code>、<code>Xamarin</code>，国产首个支持 AOT 发布的 ORM✨</p>\n<p>支持 <code>MySql/SqlServer/PostgreSQL/Oracle/Sqlite/Firebird/ClickHouse/QuestDB/达梦/南大通用GBase/神通/人大金仓/虚谷/翰高/华为GaussDB/MsAccess</code> 等数据库，以及自定义适配其它数据库。</p>\n<ul>\n<li>\n<p>QQ 群：561616019(在线)、4336577(已满)、8578575(已满)、52508226(已满)</p>\n</li>\n<li>\n<p>反馈问题请前往 <a href=\"https://github.com/dotnetcore/FreeSql/issues\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/issues</a></p>\n</li>\n<li>\n<p>欢迎微信关注 <strong>dotNET 搬砖队</strong>，分享 .NET Core + FreeSql 相关技术栈</p>\n</li>\n</ul>\n<figure><img src=\"/wechat_qrcode.jpg\" alt=\"分享.NET Core+FreeSql相关技术\" tabindex=\"0\" loading=\"lazy\"><figcaption>分享.NET Core+FreeSql相关技术</figcaption></figure>\n<h2> 特性</h2>\n<ul>\n<li>支持 CodeFirst 迁移；</li>\n<li>支持 DbFirst 从数据库导入实体类，支持三种模板生成器；</li>\n<li>采用 ExpressionTree 高性能读取数据；</li>\n<li>支持深入的类型映射，比如 pgsql 的数组类型，堪称匠心制作；</li>\n<li>支持丰富的表达式函数；</li>\n<li>支持导航属性查询，和延时加载；</li>\n<li>支持同步/异步数据库操作方法，丰富多彩的链式查询方法；</li>\n<li>支持读写分离、分表分库，租户设计；</li>\n<li>支持多种数据库，MySql/SqlServer/PostgreSQL/Oracle/Sqlite/Firebird/ClickHouse/QuestDB/达梦/南大通用GBase/神通/人大金仓/虚谷/翰高/华为GaussDB/MsAccess；</li>\n</ul>\n",
      "image": "https://img.shields.io/badge/member%20project%20of-NCC-9e20c9.svg",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-01-14T16:07:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "AOP✨",
      "url": "https://freesql.net/guide/aop.html",
      "id": "https://freesql.net/guide/aop.html",
      "summary": "FreeSql AOP 已有的功能介绍，未来为会根据用户需求不断增强。 审计 CRUD(如何监视 SQL？) 如果因为某个 sql 骚操作耗时很高，没有一个相关的审计功能，排查起来可以说无从下手。 FreeSql 支持简单的类似功能： 只需要一个事件，就可以对全局起到作用。 还有一个 CurdBefore 在执行 sql 之前触发，常用于记录日志或开发...",
      "content_html": "<h1> AOP✨</h1>\n<p>FreeSql AOP 已有的功能介绍，未来为会根据用户需求不断增强。</p>\n<h2> 审计 CRUD(如何监视 SQL？)</h2>\n<p>如果因为某个 sql 骚操作耗时很高，没有一个相关的审计功能，排查起来可以说无从下手。</p>\n<p>FreeSql 支持简单的类似功能：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>只需要一个事件，就可以对全局起到作用。</p>\n<p>还有一个 CurdBefore 在执行 sql 之前触发，常用于记录日志或开发调试。</p>\n<h2> 审计属性值</h2>\n<p>实现插入/更新时统一处理某些值，比如某属性的雪花算法值、创建时间值、甚至是业务值。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当属性的类型是 long，并且标记了 [Snowflake]，并且当前值是 0，那么在插入/更新时它的值将设置为雪花 id 值。</p>\n<blockquote>\n<p>说明：SnowflakeAttribute 是使用者您来定义，new Snowflake().GetId() 也是由使用者您来实现</p>\n</blockquote>\n<p>如果命名规范，可以在 aop 里判断，<code>if (e.Property.Name == \"createtime\") e.Value = DateTime.Now;</code></p>\n<blockquote>\n<p>v3.2.666 可设置 e.ObjectAuditBreak = true 中断对象审计，变相实现每个对象只触发一次 AuditValue 事件</p>\n</blockquote>\n<h2> 审计命令</h2>\n<p>fsql.Aop.CommandBefore、fsql.Aop.CommandAfter 这两个事件触发所有 SQL 命令的执行前、和执行后。</p>\n<p>执行后的事件会附带异常信息、耗时信息等。</p>\n<p>建议在开发模式下开启无参数化模式，new FreeSqlBuilder().UseNoneCommandParameter(true)。</p>\n<blockquote>\n<p>提示：new FreeSqlBuilder().UseMonitorCommand 也可以审计命令执行前后。</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 审计迁移脚本</h2>\n<p>FreeSql 自带迁移功能，那么迁移的 SQL 语句长啥样，你可能会好奇。</p>\n<ul>\n<li>\n<p>比如创建表时；</p>\n</li>\n<li>\n<p>比如添加字段时；</p>\n</li>\n<li>\n<p>比如修改表名、修改字段名时；</p>\n</li>\n<li>\n<p>又比如字段类型更改之后时；</p>\n</li>\n</ul>\n<p>这些操作在 FreeSql.CodeFirst 实现下基本不需要理会，而且我们只推荐在开发环境使用自动迁移的功能，正式环境可使用其他工具替代此操作。</p>\n<p>但我们仍然可能需要对项目做完整的日志记录。</p>\n<p>fsql.Aop.SyncStructureBefore、fsql.Aop.SyncStructureAfter 这两个事件将排上用场。</p>\n<h2> ConfigEntity</h2>\n<h3> 统一设置架构</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> MySql Enum 映射</h3>\n<p>默认情况 c# 枚举会映射为 MySql Enum 类型，如果想映射为 int 在 FreeSqlBuilder Build 之后执行以下 Aop 统一处理：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 修改 decimal 默认特性</h3>\n<p>因为默认 decimal 只支持 decimal(10,2)，范围太小，我们可以全局修改 decimal 类型的支持范围，比如支持 decimal(18,6)</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 自定义实体特性</h3>\n<p>比如项目内已经使用了其它 orm，如 efcore，这样意味着实体中可能存在 [Key]，但它与 FreeSql [Column(IsPrimary = true] 不同。</p>\n<p>Q： FreeSql 实体特性为啥这么别扭？</p>\n<p>A： 为了考虑一致性用法，全部封装在 ColumnAttribute 下，这样用户使用起来，不用到处 using 或者 回忆特性应该用哪个名字，如自增 [Column(IsIdentity = true)] 即可。</p>\n<p>FreeSql 提供 AOP 自定义特性功能，实现与多个 orm 共同拥有一套实体特性，可避免重复定义特性。</p>\n<blockquote>\n<p>v1.4.0+ 已自动识别 EFCore 实体特性 Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Ado .net 读取拦截</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 表达式拦截</h2>\n<p>FreeSql 内部表达式支持非常丰富，对各大数据库的兼容度也做得很好。</p>\n<blockquote>\n<p>有关表达式支持的程度，可参阅：<a href=\"/guide/expression-function.html\" target=\"blank\">表达式函数</a></p>\n</blockquote>\n<p>即便如此丰富，也仍然无法满足用户需求，FreeSql 对外开放了自定义表达式解析接口：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这个解析有点复杂，当 <code>e.Expression</code> 很复杂的时候，我们还提供了 <code>e.FreeParse</code> 方法，使用它相当于调用 <code>FreeSql</code> 内置表达式解析引擎，辅助您进行解析。</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-28T17:44:07.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "级联保存",
      "url": "https://freesql.net/guide/cascade-saving.html",
      "id": "https://freesql.net/guide/cascade-saving.html",
      "summary": "实践发现，N 对 1 不适合做级联保存，例如：保存 Topic 的时候把 Type 信息也保存？自下向上保存的功能太不可控了。因此下面只讲 OneToOne/OneToMany/ManyToMany 级联保存。 SaveMany 手工保存 完整保存指定的导航属性，对比表已存在的数据，计算出添加、修改、删除执行。 SaveMany 仅支持 OneToMa...",
      "content_html": "<h1> 级联保存</h1>\n<p>实践发现，N 对 1 不适合做级联保存，例如：保存 Topic 的时候把 Type 信息也保存？自下向上保存的功能太不可控了。因此下面只讲 OneToOne/OneToMany/ManyToMany 级联保存。</p>\n<h2> SaveMany 手工保存</h2>\n<p>完整保存指定的导航属性，对比表已存在的数据，计算出添加、修改、删除执行。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>SaveMany 仅支持 OneToMany、ManyToMany 导航属性</li>\n<li>只保存 Topics，不向下递归追朔</li>\n<li>当 Topics 为 Empty 时，删除 type 存在的 Topics 所有表数据</li>\n<li>ManyToMany 完整对比保存中间表，外部表只追加不更新</li>\n</ul>\n<p>多对多举例：</p>\n<ul>\n<li>本表 Song</li>\n<li>外部表 Tag</li>\n<li>中间表 SongTag</li>\n</ul>\n<h2> EnableCascadeSave 仓储级联保存</h2>\n<blockquote>\n<p>本功能是较早时期实现的，可移步了解最新的<a href=\"/guide/aggregateroot.html\" target=\"blank\">《聚合根仓储》</a>级联机制</p>\n</blockquote>\n<p>DbContext/Repository EnableCascadeSave 可实现保存对象的时候，递归追朔其 OneToOne、OneToMany、ManyToMany 导航属性也一并保存，本文档说明实现的机制防止误用。</p>\n<p>1、OneToOne 级联保存</p>\n<blockquote>\n<p>v3.2.606+ 支持，并且支持<a href=\"/guide/delete.html#ibaserepository-%E7%BA%A7%E8%81%94%E5%88%A0%E9%99%A4\" target=\"blank\">级联删除功能</a></p>\n</blockquote>\n<p>2、OneToMany 追加或更新子表，不删除子表已存在的数据</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不删除 Topics 子表已存在的数据</li>\n<li>当 Topics 属性为 Empty 时，不做任何操作</li>\n<li>保存 Topics 的时候，还会保存 Topics[0-..] 的下级集合属性，向下 18 层</li>\n</ul>\n<blockquote>\n<p>向下 18 层的意思，比如【类型】表，下面有集合属性【文章】，【文章】下面有集合属性【评论】。</p>\n</blockquote>\n<blockquote>\n<p>保存【类型】表对象的时候，他会向下检索出集合属性【文章】，然后如果【文章】被保存的时候，再继续向下检索出集合属性【评论】。一起做 InsertOrUpdate 操作。</p>\n</blockquote>\n<p>3、ManyToMany 完整对比保存中间表，外部表只追加不更新</p>\n<p>完整对比保存中间表，对比【多对多】中间表已存在的数据，计算出添加、修改、删除执行。</p>\n<hr>\n<p>测试 1：追加保存 OneToMany</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>测试 2：完整保存 ManyToMany</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-06T22:50:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "CodeFirst",
      "url": "https://freesql.net/guide/code-first.html",
      "id": "https://freesql.net/guide/code-first.html",
      "summary": "FreeSql 支持 CodeFirst 迁移结构至数据库，这应该是(O/RM)必须标配的一个功能。 与其他(O/RM)不同的是：FreeSql支持更多的数据库特性，而不只是支持基础的数据类型，这既是优点也是缺点，优点是充分利用数据库特性辅助开发，缺点是切换数据库变得困难。不同程序员的理念可能不太一致，FreeSql尽量把功能支持到极致，至于是否使用是...",
      "content_html": "<p><code>FreeSql</code> 支持 <code>CodeFirst</code> 迁移结构至数据库，这应该是(<code>O/RM</code>)必须标配的一个功能。</p>\n<p>与其他(<code>O/RM</code>)不同的是：<code>FreeSql</code>支持更多的数据库特性，而不只是支持基础的数据类型，这既是优点也是缺点，优点是充分利用数据库特性辅助开发，缺点是切换数据库变得困难。不同程序员的理念可能不太一致，<code>FreeSql</code>尽量把功能支持到极致，至于是否使用是项目组技术衡量的另一个问题。</p>\n<p>尽管多种数据库适配逻辑非常复杂，<code>FreeSql</code>始终秉承优化程序开发习惯的原则尽量去实现，中间碰到了一些非技术无法攻克的难题，比如数据库的自定义类型，和实体类本身就是一种冲突，为了减少使用成本，诸如此类的数据库功能没有得到支持。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 迁移结构</h2>\n<table>\n<thead>\n<tr>\n<th>创建数据库</th>\n<th>Sqlite</th>\n<th>Sql Server</th>\n<th>MySql</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>√</td>\n<td>X <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L153\" target=\"_blank\" rel=\"noopener noreferrer\">参考</a></td>\n<td>X <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L129\" target=\"_blank\" rel=\"noopener noreferrer\">参考</a></td>\n<td>X<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L233\" target=\"_blank\" rel=\"noopener noreferrer\">参考</a></td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>实体＆表对比</th>\n<th>添加</th>\n<th>改名</th>\n<th>删除</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>实体属性＆字段对比</th>\n<th>添加</th>\n<th>修改可空</th>\n<th>修改自增</th>\n<th>修改类型</th>\n<th>改名</th>\n<th>删除</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>X</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>为了保证安全，不提供删除字段。</p>\n</blockquote>\n<p>警告：如果实体类属性，与数据库表字段不完整映射的时候，未映射的字段有可能发生丢失。</p>\n<blockquote>\n<p>原因：某些迁移对比操作是：创建临时表、导入旧表数据、删除旧表。</p>\n</blockquote>\n<h3> FreeSql 提供两种 CodeFirst 移迁方法，自动和手动。</h3>\n<p><strong>注意</strong>：谨慎、谨慎、谨慎在生产环境中使用该功能。</p>\n<p><strong>注意</strong>：谨慎、谨慎、谨慎在生产环境中使用该功能。</p>\n<p><strong>注意</strong>：谨慎、谨慎、谨慎在生产环境中使用该功能。</p>\n<h3> 自动同步实体结构【开发环境必备】</h3>\n<p>自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后迁移执行创建或修改。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>此功能默认为开启状态，发布正式环境后，请修改此设置。</p>\n</blockquote>\n<blockquote>\n<p>虽然【自动同步实体结构】功能开发非常好用，但是有个坏处，就是数据库后面会很乱，没用的字段可能一大堆，应尽量控制实体或属性命名的修改。</p>\n</blockquote>\n<ul>\n<li>注意：只有当 CURD 到此表时，才会自动生成表结构。如需系统运行时迁移表结构，请使用<strong>SyncStructure</strong>方法</li>\n<li><code>FreeSql</code>不会帮你生成数据库，需要你手动创建数据库。<strong>如果你使用<code>Mysql</code>、<code>Sql Server</code>,<code>PostgreSQL</code>，需要自动创建数据库.请参考此代码，自行 copy，<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSqlExtension.cs</a></strong></li>\n</ul>\n<h3> 禁用迁移</h3>\n<p>当【实体类】对应的是数据库【视图】或者其他时，可通过 [Table(DisableSyncStructure = true)] 禁用指定的实体迁移操作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 备注</h2>\n<p>FreeSql CodeFirst 支持将 c# 代码内的注释，迁移至数据库的备注。先决条件：</p>\n<p>1、实体类所在程序集，需要开启 xml 文档功能；</p>\n<p>2、xml 文件必须与程序集同目录，且文件名：xxx.dll -&gt; xxx.xml；</p>\n<blockquote>\n<p>v1.5.0+ 版本增加了对 Description 特性的解析，优先级低于 c# 代码注释；</p>\n</blockquote>\n<h3> 手工同步实体结构</h3>\n<p>提供接口方法实现对比实体，与数据库中的变化部分，返回 SQL 语句。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>提供接口方法实现同步结构</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 批量生成表结构</h4>\n<ul>\n<li>void SyncStructure(params Type[]) 重载方法支持数组,同步实体类型集合到数据库</li>\n<li>IEntity 类，是实体类所在程序集的一个类即可。</li>\n</ul>\n<p>方法 1：扫描 IEntity 类所在程序集，反射得到类上有特性标签为 TableAttribute 的所有类，该方法需在实体类上指定了 [Table(Name = \"xxx\")]特性标签</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>调用</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>方法 2：通过命名空间得到所有要创建的实体类.根据需要调整 entitiesFullName 下的命名空间值。比如我们创建一个 Entities 文件夹，用于存放实体类。该方法通过筛选 IEntity 类所在程序集所有的实体类。他们的命名空间都是 LinCms.Entities 开头，内部通过 StartsWith 判断。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>或通过调用同步所有表结构</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 实体特性</h2>\n<p>指定实体的表名，指定 Name 后，实体类名变化不影响数据库对应的表。FreeSql 尽量支持了对多数据库或 schema 支持，不防试试指定表名为：其他数据库.表名，不同数据库的指定方式有差异，这一点以后深入解答。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>无指定实体的表名，修改为实体类名。指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst 才可以正确修改数据库表；否则将视为【创建新表】。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>修改字段类型，把 Title 类型改为 varchar(128)。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>指定属性的字段名，这样指定后，修改实体的属性名不影响数据库对应的列。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>无指定属性的字段名，修改为属性名，指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst 才可以正确修改数据库字段；否则将视为【新增字段】。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-09-04T06:05:54.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "",
      "url": "https://freesql.net/guide/config-entity-from-db-first.html",
      "id": "https://freesql.net/guide/config-entity-from-db-first.html",
      "summary": "可以解决，数据库有主键 + 自增，实体层没有配置对应的特性； 从数据库导入主键、自增信息，适用 DbFirst 模式，无须在实体类型上设置 [Column(IsPrimary)] 或者 ConfigEntity； 此功能目前可用于 mysql/sqlserver/postgresql/oracle。 开启该功能会增加首次执行时间（耗时情况和表数量有关）...",
      "content_html": "<p>可以解决，数据库有主键 + 自增，实体层没有配置对应的特性；</p>\n<p>从数据库导入主键、自增信息，适用 DbFirst 模式，无须在实体类型上设置 [Column(IsPrimary)] 或者 ConfigEntity；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>此功能目前可用于 mysql/sqlserver/postgresql/oracle。</p>\n<blockquote>\n<p>开启该功能会增加首次执行时间（耗时情况和表数量有关）</p>\n</blockquote>\n<h2> 优先级</h2>\n<p>数据库特性 &gt; 实体特性 &gt; FluentApi（配置特性） &gt; Aop（配置特性）</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-05-16T12:50:28.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "自定义特性",
      "url": "https://freesql.net/guide/custom-attribute.html",
      "id": "https://freesql.net/guide/custom-attribute.html",
      "summary": "本功能可实现与其他 ORM 使用一套 Attribute，避免维护两份实体特性的烦恼： v1.4.0+ 已自动识别 EFCore 实体特性 Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column 优先级 数据库特性 > 实体特性 > FluentApi（配...",
      "content_html": "<h1> 自定义特性</h1>\n<p>本功能可实现与其他 ORM 使用一套 Attribute，避免维护两份实体特性的烦恼：</p>\n<blockquote>\n<p>v1.4.0+ 已自动识别 EFCore 实体特性 Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 优先级</h2>\n<p>数据库特性 &gt; 实体特性 &gt; FluentApi（配置特性） &gt; AOP（配置特性）</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2021-06-16T16:56:09.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "DbContext",
      "url": "https://freesql.net/guide/db-context.html",
      "id": "https://freesql.net/guide/db-context.html",
      "summary": "FreeSql.DbContext 实现类似 EFCore 使用习惯，跟踪对象状态，最终通过 SaveChanges 方法提交事务。 特性 Select/Attach 快照对象，Update 只更新变化的字段；; Add/AddRange 插入数据，适配各数据库优化执行 ExecuteAffrows/ExecuteIdentity/ExecuteIns...",
      "content_html": "<h1> DbContext</h1>\n<p>FreeSql.DbContext 实现类似 EFCore 使用习惯，跟踪对象状态，最终通过 SaveChanges 方法提交事务。</p>\n<h2> 特性</h2>\n<ul>\n<li>Select/Attach 快照对象，Update 只更新变化的字段；</li>\n<li>Add/AddRange 插入数据，适配各数据库优化执行 ExecuteAffrows/ExecuteIdentity/ExecuteInserted；</li>\n<li>AddOrUpdate 插入或更新；</li>\n<li>SaveMany 方法快速保存导航对象（一对多、多对多）；</li>\n</ul>\n<h2> 安装</h2>\n<blockquote>\n<p>dotnet add package FreeSql.DbContext</p>\n</blockquote>\n<h2> 如何使用</h2>\n<p>0、通用方法</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意：DbContext 对象多线程不安全</p>\n</blockquote>\n<p>1、在 OnConfiguring 方法上配置与 IFreeSql 关联</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用的时候与 EFCore 类似：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、注入方式使用</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在 mvc 中获取：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 优先级</h2>\n<p>OnConfiguring &gt; AddFreeDbContext</p>\n<h2> 说明</h2>\n<ul>\n<li>DbContext 操作的数据在最后 SaveChanges 时才批量保存；</li>\n<li>DbContext 内所有操作，使用同一个事务；</li>\n<li>当实体存在自增时，或者 Add/AddRange 的时候主键值为空，会提前开启事务；</li>\n<li>支持同步/异步方法；</li>\n</ul>\n<h2> 合并机制</h2>\n<p>db.Add(new Xxx());\ndb.Add(new Xxx());\ndb.Add(new Xxx());</p>\n<p>这三步，会合并成一个批量插入的语句执行，前提是它们没有自增属性。</p>\n<p>适用 Guid 主键，Guid 主键的值不用设置，交给 FreeSql 处理即可，空着的 Guid 主键会在插入时获取有序不重值的 Guid 值。</p>\n<p>又比如：</p>\n<p>db.Add(new Xxx());\ndb.Add(new Xxx());\ndb.Update(xxx);\ndb.Add(new Xxx());</p>\n<p>Guid Id 的情况下，执行三次命令：前两次插入合并执行，update 为一次，后面的 add 为一次。</p>\n<h2> 联级保存</h2>\n<p>请移步文档 <a href=\"/guide/cascade-saving.html\" target=\"blank\">【联级保存】</a></p>\n<h2> 实体变化事件</h2>\n<p>全局设置：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>单独设置 DbContext 或者 UnitOfWork：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>参数 report 是一个 List 集合，集合元素的类型定义如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>变化类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Insert</td>\n<td>实体对象被插入</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>实体对象被更新</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>实体对象被删除</td>\n</tr>\n<tr>\n<td>SqlRaw</td>\n<td>执行了 SQL 语句</td>\n</tr>\n</tbody>\n</table>\n<p>SqlRaw 目前有两处地方比较特殊：</p>\n<ul>\n<li>多对多联级更新导航属性的时候，对中间表的全部删除操作；</li>\n<li>通用仓储类 BaseRepository 有一个 Delete 方法，参数为表达式，而并非实体；</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>DbContext.SaveChanges，或者 Repository 对实体的 Insert/Update/Delete，或者 UnitOfWork.Commit 操作都会最多触发一次该事件。</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-06T21:43:38.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "DbFirst",
      "url": "https://freesql.net/guide/db-first.html",
      "id": "https://freesql.net/guide/db-first.html",
      "summary": "获取所有数据库 获取指定数据库的表信息 .NET Core CLI(推荐使用) 代码生成器FreeSql.Generator,是 FreeSql 的代码生成器，可生成实体类，支持将数据库实体动态生成实体，默认有二个模板，基于 Razor，可指定自定义模板 dotnet-tool安装 FreeSql.Generator; 更新FreeSql.Genera...",
      "content_html": "<h1> DbFirst</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 获取所有数据库</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 获取指定数据库的表信息</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> .NET Core CLI(推荐使用)</h2>\n<p>代码生成器<code>FreeSql.Generator</code>,是 FreeSql 的代码生成器，可生成实体类，支持将数据库实体动态生成实体，默认有二个模板，基于 Razor，可指定自定义模板</p>\n<ul>\n<li><code>dotnet-tool</code>安装 <code>FreeSql.Generator</code></li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>更新<code>FreeSql.Generator</code></li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>新建目录，在地址栏输入 cmd 快速打开命令窗口，输入命令：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>命令行工具生成实体类极大好处，后续再次生成覆盖操作等于一键完成，并且支持 Mac/Linux 平台。</p>\n<p><a href=\"https://www.cnblogs.com/igeekfan/p/freesql-generator.html\" target=\"_blank\" rel=\"noopener noreferrer\">详细解读：生成器是如何实现的？</a></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 常用选项</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-Razor</td>\n<td style=\"text-align:left\">选择模板：实体类+特性 <code>-Razor 1</code> / 实体类+特性+导航属性 <code>-Razor 2</code>/ 自定义模板文件 <code>-Razor \"d:\\diy.cshtml\"</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-NameOptions</td>\n<td style=\"text-align:left\">生成的实体命名规范，应只设置某一个为参数为 1，其中 4 个布尔值对应：<code>首字母大写</code>/<code>首字母大写,其他小写</code>/<code>全部小写</code>/<code>下划线转驼</code>（-NameOptions 0,0,0,1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-NameSpace</td>\n<td style=\"text-align:left\">命名空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-DB</td>\n<td style=\"text-align:left\">看下文中的-DB 参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Filter</td>\n<td style=\"text-align:left\">Table+View+StoreProcedure（ 默认生成：表+视图+存储过程）， 如果不想生成视图和存储过程 -Filter View+StoreProcedure</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Match</td>\n<td style=\"text-align:left\">表名或正则表达式，只生成匹配的表，如：dbo.TB_.+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-FileName</td>\n<td style=\"text-align:left\">文件名，默认：{name}.cs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Output</td>\n<td style=\"text-align:left\">推荐在实体类目录创建 gen.bat，双击它重新所有实体类</td>\n</tr>\n</tbody>\n</table>\n<h3> -DB 参数</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 示例</h3>\n<blockquote>\n<p>FreeSql.Generator -Razor 1 -NameOptions 0,0,0,1 -NameSpace LinCms.Core.Entities -DB \"MySql,Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=lincms;Charset=utf8;SslMode=none;Max pool size=2\"</p>\n</blockquote>\n<ul>\n<li>数据库表名是下划线，字段也是下划线方式。</li>\n<li>-Razor 指定 第一个模板</li>\n<li>-NameOptions 0,0,0,1 最后一个 1，代表 下划线转驼峰，满足 C#命名规则</li>\n<li>-NameSpace 指定了命名空间 LinCms.Core.Entities</li>\n<li>-DB 就是数据库的相关配置</li>\n<li>mysql 本地地址 127.0.0.1 3306 端口 用户名 root 密码 123456 数据库 lin-cms</li>\n<li>-Match book 这样就能只生成 book，支持正则表达式，如 -Match lin<em>user 就会生成以 lin_user 开头的表。如 dbo.TB</em>.+，会生成以 TB 开头的表。即只生成匹配的表</li>\n</ul>\n<h2> 安装 Winform 生成器（已停止更新）</h2>\n<p>源码地址：<a href=\"https://github.com/2881099/FreeSql.Tools\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql.Tools</a></p>\n<blockquote>\n<p>作者：<a href=\"https://github.com/mypeng1985\" target=\"_blank\" rel=\"noopener noreferrer\">mypeng1985</a> 开发了两个版本</p>\n</blockquote>\n<figure><img src=\"https://user-images.githubusercontent.com/16286519/76141354-4790e980-609e-11ea-869b-bb2c6980d98f.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<figure><img src=\"https://user-images.githubusercontent.com/16286519/58793525-e0cf3300-8628-11e9-8959-d2efed685843.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n",
      "image": "https://user-images.githubusercontent.com/16286519/76141354-4790e980-609e-11ea-869b-bb2c6980d98f.png",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-03-25T05:57:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "删除",
      "url": "https://freesql.net/guide/delete.html",
      "id": "https://freesql.net/guide/delete.html",
      "summary": "删除是一个非常危险的操作，FreeSql 对删除支持并不强大，默认仅支持单表、且有条件的删除方法。 若 Where 条件为空的时候执行，仅返回 0 或默认值，不执行真正的 SQL 删除操作。 动态条件 dywhere 支持： 主键值; new[] { 主键值1, 主键值2 }; Topic 对象; new[] { Topic对象1, Topic对象2 ...",
      "content_html": "<h1> 删除</h1>\n<p>删除是一个非常危险的操作，FreeSql 对删除支持并不强大，默认仅支持单表、且有条件的删除方法。</p>\n<p>若 <code>Where</code> 条件为空的时候执行，仅返回 <code>0</code> 或默认值，不执行真正的 SQL 删除操作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 动态条件</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>dywhere</code> 支持：</p>\n<ul>\n<li>主键值</li>\n<li><code>new[] { 主键值1, 主键值2 }</code></li>\n<li>Topic 对象</li>\n<li><code>new[] { Topic对象1, Topic对象2 }</code></li>\n<li><code>new { id = 1 }</code></li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 动态表名</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 删除条件</h2>\n<blockquote>\n<p>出于安全考虑，没有条件不执行删除动作，避免误删除全表数据。删除全表数据：<code>fsql.Delete&lt;T&gt;().Where(\"1=1\").ExecuteAffrows()</code></p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 注意点</h3>\n<ul>\n<li>\"<strong>id = @id</strong>\"中的@字符为<a href=\"https://freesql.net/guide/ado.html#%E5%8F%82%E6%95%B0%E5%8C%96\" target=\"_blank\" rel=\"noopener noreferrer\">参数化</a>，不同数据库，参数化字符不同</li>\n</ul>\n<h2> 字典删除</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> ISelect.ToDelete 高级删除</h2>\n<p><code>IDelete</code> 默认不支持导航对象，多表关联等。<code>ISelect.ToDelete</code> 可将查询转为 <code>IDelete</code>，以便使用导航对象删除数据，如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>注意：此方法不是将数据查询到内存循环删除，上面的代码产生如下 SQL 执行：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>复杂删除使用此方法的好处：</p>\n<ul>\n<li>删除前可预览测试数据，防止错误删除操作；</li>\n<li>支持复杂的删除操作，例如：<code>ISelect</code> 上使用 <code>Limit(10)</code> 删除附合条件的前 10 条记录；</li>\n</ul>\n<h2> IBaseRepository 级联删除</h2>\n<p>1、第一种：基于【对象】级联删除</p>\n<blockquote>\n<p>比如 Include/IncludeMany 查询的对象，可以使用此方法级联删除它们。</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、第二种：基于【数据库】级联删除</p>\n<blockquote>\n<p>根据设置的导航属性，递归删除 OneToOne/OneToMany/ManyToMany 对应数据，并返回已删除的数据。此功能不依赖数据库外键</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>表达式条件，仅支持实体基础成员（不包含导航对象）</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>原生 sql 语法条件，Where(\"id = @id\", new { id = 1 })</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>传入实体或集合，将其主键作为条件</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回影响的行数</td>\n</tr>\n<tr>\n<td>ExecuteDeleted</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 语句，返回被删除的记录</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-14T11:48:27.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "实体特性✨",
      "url": "https://freesql.net/guide/entity-attribute.html",
      "id": "https://freesql.net/guide/entity-attribute.html",
      "summary": "v1.4.0+ 已自动识别 EFCore 实体特性 Key/Required/NotMapped MaxLength/StringLength/DatabaseGenerated/Table/Column 表名 架构：\\[Table(Name = \"dbo.tb_topic\")\\] 注意：带点的表名，使用 \\[Table(Name = \"\\`sys.c...",
      "content_html": "<h1> 实体特性✨</h1>\n<p>v1.4.0+ 已自动识别 EFCore 实体特性 Key/Required/NotMapped</p>\n<p>MaxLength/StringLength/DatabaseGenerated/Table/Column</p>\n<h2> 表名</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>架构：[Table(Name = \"dbo.tb_topic\")]</p>\n<p>注意：带点的表名，使用 [Table(Name = \"`sys.config`\")] 解决</p>\n<blockquote>\n<p>指定表名的几种方法，优先级从小到大：</p>\n</blockquote>\n<ul>\n<li>1、实体类名</li>\n<li>2、Aop fsql.Aop.ConfigEntity += (_, e) =&gt; e.ModifyResult.Name = \"public.tabname\"</li>\n<li>3、FluentApi fsql.CodeFirst.ConfigEntity(a =&gt; a.Name(\"public.tabname\"))</li>\n<li>4、[Table(Name = \"public.tabname\")]</li>\n<li>5、AsTable fsql.Select&lt;T&gt;().AsTable((_, old) =&gt; \"public.tabname\").ToList()</li>\n</ul>\n<blockquote>\n<p>v3.2.660 可通过 UseMappingPriority 调整优先级</p>\n</blockquote>\n<p>改名：须指定旧的表名：[Table(OldName = \"Topic\")]</p>\n<blockquote>\n<p>属性名称：[Column(Name = \"xxx\")]</p>\n</blockquote>\n<p>特殊：[Table(Name = \"\\\"ima_file@erp_lotesgzv1.lotes.com.cn\\\"\")]</p>\n<h2> 主键(Primary Key)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>约定：</p>\n<ul>\n<li>\n<p>当没有指明主键时，命名为 id 的字段将成为主键；（不区分大小写）</p>\n</li>\n<li>\n<p>当主键是 Guid 类型时，插入时会自动创建（有序、不重复）的值，所以不需要自己赋值；（支持分布式）</p>\n</li>\n</ul>\n<blockquote>\n<p>联合主键，在多个属性标记特性</p>\n</blockquote>\n<blockquote>\n<p>Oracle 主键名长度大于30 [OraclePrimaryKeyName(name)]\nclass table {...}</p>\n</blockquote>\n<h2> 自增(Identity)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>约定：</p>\n<ul>\n<li>当没有指明主键时，标记自增的成员将成为主键；</li>\n<li>DbFirst 模式序列：[Column(IsIdentity = true, InsertValueSql = \"seqname.nextval\")]</li>\n</ul>\n<h2> 唯一键(Unique Key)、索引（Index）</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>第三个参数 true 的时候是唯一键，false 的时候是普通索引。</p>\n</blockquote>\n<blockquote>\n<p>分表场景的索引可以这样：[Index(\"{tablename}_idx_01\", \"phone\")]</p>\n</blockquote>\n<h2> 数据库类型(DbType)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以在类型上指定 NOT NULL，也可以通过 [Column(IsNullable = false)] 设置；</p>\n<blockquote>\n<p>decimal 指定长度 [Column(DbType = \"decimal(10,2)\")] 或者 [Column(Precision = 10, Scale = 2)]</p>\n</blockquote>\n<blockquote>\n<p>string 指定长度 [Column(DbType = \"varchar(128)\")] 或者 [MaxLength(128)] 或者 [Column(StringLength = 128)]，当长度 -1 时产生的映射如下：</p>\n</blockquote>\n<h2> Text类型 [Column(StringLength =-1)]</h2>\n<p>当长度 -1 时产生的映射如下：</p>\n<table>\n<thead>\n<tr>\n<th>MySql</th>\n<th>PostgreSQL</th>\n<th>SqlServer</th>\n<th>Oracle</th>\n<th>Sqlite</th>\n<th>Firebird</th>\n<th>MsAccess</th>\n<th>达梦</th>\n<th>金仓</th>\n<th>神通</th>\n<th>南通</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>text</td>\n<td>nvarchar(max)</td>\n<td>nclob</td>\n<td>text</td>\n<td>blob sub_type 1</td>\n<td>longtext</td>\n<td>text</td>\n<td>text</td>\n<td>text</td>\n<td>text</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：Oracle nclob 需要 v1.3.2+ 版本才支持，否则将映射 nvarchar2(4000)</p>\n</blockquote>\n<blockquote>\n<p>注意：MySql [MaxLength(-2)] 或者 [Column(StringLength = -2)] 映射类型 longtext，其他数据库的映射规则与 -1 相同</p>\n</blockquote>\n<h2> 服务器时间(ServerTime)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用数据库时间执行插入数据，注意：</p>\n<p>1、一但设置了这个特性，插入的时候设置属性值是无效的；</p>\n<p>2、插入实体执行成功后，实体的值还是 c# 时间；</p>\n<blockquote>\n<p>v1.1.0 - ServerTime 特性，对 Update 方法时也能生效</p>\n</blockquote>\n<h2> 可空(Nullable)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在不指定 DbType、IsNullable 时，FreeSql 提供默认设定，如：</p>\n<ul>\n<li>int -&gt; not null（不可为空）</li>\n<li>int? -&gt; null（可空）</li>\n</ul>\n<p>一般在使用 string 类型时，才需要手工指明是否可空（string 默认可空）；</p>\n<h2> 忽略(Ignore)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当实体有属性不需要映射的时候使用，内部自动忽略了对象的映射；</p>\n<p>当实体内的属性不是可接受的类型时，可以不用指定该特定，如下不必要的指定：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 乐观锁(RowVersion)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>更新整个实体数据时，在并发情况下极容易造成旧数据将新的记录更新。</p>\n<p>乐观锁的原理，是利用实体某字段，如：long version，更新前先查询数据，此时 version 为 1，更新时产生的 SQL 会附加 where version = 1，当修改失败时（即 Affrows == 0）抛出异常（DbUpdateVersionException）。</p>\n<p>每个实体只支持一个乐观锁属性。</p>\n<blockquote>\n<p>适用 SetSource 更新，无论使用什么方法更新 version 的值都会增加 1</p>\n</blockquote>\n<h2> 自定义类型映射(MapType)</h2>\n<p>v3.2.701 版本自定义类型转换</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用 MapType 枚举 -&gt; string/int 等等如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>BigInteger 也可以映射使用，但请注意：仅仅是 CURD 方便， Equals == 判断可以使用，无法实现 + - * / 等操作；</p>\n<p>v0.9.15 版本还可以将值对象映射成 typeof(string)，安装扩展包：</p>\n<blockquote>\n<p>dotnet add package FreeSql.Extensions.JsonMap</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 字段位置(Position)</h2>\n<p>适用场景：当实体类继承时，CodeFirst创建表的字段顺序可能不是想要的，通过该特性可以设置顺序。</p>\n<p>创建表时指定字段位置，如：[Column(Position = 1]，可为负数即反方向位置；</p>\n<h2> 可插入(CanInsert)、可更新(CanUpdate)</h2>\n<p>该字段是否可以插入或更新，默认值true，指定为false插入或更新时该字段会被忽略。</p>\n<p>当指明了 InsertColumn/UpdateColumns 等方法时，该特性作用可能失效。例如 CanInsert = false 时，又指明了 InsertColumns 该属性，则仍然会插入。</p>\n<h2> 自定义插入值(InsertValueSql)</h2>\n<p>执行 Insert 方法时使用此值，它的语法是 SQL。</p>\n<p>注意：如果是 getdate() 这种请可考虑使用 ServerTime，因为它对数据库间作了适配。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 自定义重写(RewriteSql)、重读(RereadSql)</h2>\n<p>写入时重写 SQL、读取时重写 SQL，适合 geography 类型的读写场景。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 禁用迁移</h2>\n<p>IFreeSql.CodeFirst.IsAutoSyncStructure 可设置全局【自动迁移结构】功能，也可通过 FreeSqlBuilder.UseAutoSyncStructure(true) 创建 IFreeSql 的时候设置功能。</p>\n<p>当【实体类】对应的是数据库【视图】或者其他时，可通过 [Table(DisableSyncStructure = true)] 禁用指定的实体迁移操作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 备注</h2>\n<p>FreeSql CodeFirst 支持将 c# 代码内的注释，迁移至数据库的备注。先决条件：</p>\n<p>1、实体类所在程序集，需要开启 xml 文档功能；</p>\n<p>2、xml 文件必须与程序集同目录，且文件名：xxx.dll -&gt; xxx.xml；</p>\n<blockquote>\n<p>v1.5.0+ 版本增加了对 Description 特性的解析，优先级低于 c# 代码注释；</p>\n</blockquote>\n<h2> 优先级</h2>\n<p>数据库特性 &gt; 实体特性 &gt; FluentApi（配置特性） &gt; Aop（配置特性）</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-01-14T16:07:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "表达式函数",
      "url": "https://freesql.net/guide/expression-function.html",
      "id": "https://freesql.net/guide/expression-function.html",
      "summary": "这是 FreeSql 非常特色的功能之一，深入细化函数解析，所支持的类型基本都可以使用对应的表达式函数，例如 日期、字符串、IN查询、数组（PostgreSQL的数组）、字典（PostgreSQL HStore)等等。 动态Lambda表达式 And、``Or扩展方法 LambadaExpressionExtensions.cs (https://gi...",
      "content_html": "<h1> 表达式函数</h1>\n<p>这是 <code>FreeSql</code> 非常特色的功能之一，深入细化函数解析，所支持的类型基本都可以使用对应的表达式函数，例如 日期、字符串、<code>IN</code>查询、数组（<code>PostgreSQL</code>的数组）、字典（PostgreSQL HStore)等等。</p>\n<h2> 动态Lambda表达式</h2>\n<ul>\n<li>\n<p><code>And</code>、<code>Or</code>扩展方法 <a href=\"https://github.com/dotnetcore/FreeSql/blob/master/FreeSql/Extensions/LambadaExpressionExtensions.cs\" target=\"_blank\" rel=\"noopener noreferrer\">LambadaExpressionExtensions.cs</a></p>\n</li>\n<li>\n<p>单表</p>\n</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>多表</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> In查询</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>已优化，防止 where in 元素多过的 SQL 错误，如：</p>\n</blockquote>\n<blockquote>\n<p>[Err] ORA-01795: maximum number of expressions in a list a 1000</p>\n</blockquote>\n<p>原来：where id in (1..1333)</p>\n<p>现在：where id in (1..500) or id in (501..1000) or id in (1001..1333)</p>\n<h2> In多列查询</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>v3.2.650 使用 .Where(a =&gt; list.Any(b =&gt; b.Item1 == a. Id &amp;&amp; b.Item2 == a. ct1))</p>\n</blockquote>\n<blockquote>\n<p>WHERE (id, code) in ((1,'code1'), (2,'code2')) 实现代码：<a href=\"/extra/issues-in-valuetype.html\" target=\"blank\">In多列查询，表达式自定义实现</a></p>\n</blockquote>\n<h2> In子表</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Exists子表</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：由于子查询的实体类与上层相同，使用 As(\"b\") 指明别名，以便区分</p>\n</blockquote>\n<h2> 查找今天创建的数据</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>SqlServer nvarchar/varchar 已兼容表达式解析，分别解析为：N'' 和 ''，优化索引执行计划；</p>\n</blockquote>\n<h2> 日期格式化</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>v1.5.0 支持了常用 c# 日期格式化，yyyy MM dd HH mm ss yy M d H hh h m s tt t</p>\n</blockquote>\n<blockquote>\n<p>tt t 为 AM PM</p>\n</blockquote>\n<h2> 开窗函数</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>v1.6.0 利用自定义解析功能，增加 SqlExt.Rank().Over().PartitionBy(...)、MySql group_concat 常用函数，欢迎 PR 补充</p>\n</blockquote>\n<p>FreeSql 默认集成了 SqlExt.cs 扩展解析方法：</p>\n<table>\n<thead>\n<tr>\n<th>lambda</th>\n<th>sql</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SqlExt.IsNull(id, 0)</td>\n<td>isnull/ifnull/coalesce/nvl</td>\n<td>兼容各大数据库</td>\n</tr>\n<tr>\n<td>SqlExt.DistinctCount(id)</td>\n<td>count(distinct id)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.GreaterThan</td>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>SqlExt.GreaterThanOrEqual</td>\n<td>&gt;=</td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td>SqlExt.LessThan</td>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>SqlExt.LessThanOrEqual</td>\n<td>&lt;=</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>SqlExt.EqualIsNull</td>\n<td>IS NULL</td>\n<td>是否为 NULL</td>\n</tr>\n<tr>\n<td>SqlExt.Case(字典)</td>\n<td>case when .. end</td>\n<td>根据字典 case</td>\n</tr>\n<tr>\n<td>SqlExt.GroupConcat</td>\n<td>group_concat(distinct .. order by .. separator ..)</td>\n<td>MySql</td>\n</tr>\n<tr>\n<td>SqlExt.FindInSet</td>\n<td>find_in_set(str, strlist)</td>\n<td>MySql</td>\n</tr>\n<tr>\n<td>SqlExt.StringAgg</td>\n<td>string_agg(.., ..)</td>\n<td>PostgreSQL</td>\n</tr>\n<tr>\n<td>SqlExt.Rank().Over().PartitionBy().ToValue()</td>\n<td>rank() over(partition by xx)</td>\n<td>开窗函数</td>\n</tr>\n<tr>\n<td>SqlExt.DenseRank().Over().PartitionBy().ToValue()</td>\n<td>dense_rank() over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Count(id).Over().PartitionBy().ToValue()</td>\n<td>count(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Sum(id).Over().PartitionBy().ToValue()</td>\n<td>sum(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Avg(id).Over().PartitionBy().ToValue()</td>\n<td>avg(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Max(id).Over().PartitionBy().ToValue()</td>\n<td>max(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Min(id).Over().PartitionBy().ToValue()</td>\n<td>min(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.RowNumber(id).Over().PartitionBy().ToValue()</td>\n<td>row_number(id) over(partition by xx)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>以上是利用《自定义解析》实现的功能</p>\n</blockquote>\n<h2> 子表Join</h2>\n<blockquote>\n<p>v1.8.0+ string.Join + ToList 实现将子查询的多行结果，拼接为一个字符串，如：\"1,2,3,4\"</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：子查询 string.Join + ToList 适配了 sqlserver/pgsql/oracle/mysql/sqlite/firebird/达梦/金仓/南大/翰高 <a href=\"https://github.com/dotnetcore/FreeSql/issues/405\" target=\"_blank\" rel=\"noopener noreferrer\">#405</a></p>\n</blockquote>\n<h2> 子表First/Count/Sum/Max/Min/Avg</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 子表ToList</h2>\n<blockquote>\n<p>v3.2.650+ 以下最多执行3次 SQL</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 自定义解析</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>[ExpressionCall] 特性可在静态扩展类上标记，也可以在单个静态方法上标记；</p>\n<table>\n<thead>\n<tr>\n<th>ExpressionCallContext 属性</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataType</td>\n<td>FreeSql.DataType</td>\n<td>用于实现不同数据库的适配判断条件</td>\n</tr>\n<tr>\n<td>ParsedContent</td>\n<td>Dictionary&lt;string, string&gt;</td>\n<td>函数的各参数解析结果</td>\n</tr>\n<tr>\n<td>DbParameter</td>\n<td>DbParameter</td>\n<td>that 被参数化的对象（有可能为 null)</td>\n</tr>\n<tr>\n<td>UserParameters</td>\n<td>List&lt;DbParameter&gt;</td>\n<td>可附加参数化对象</td>\n</tr>\n<tr>\n<td>Result</td>\n<td>string</td>\n<td>返回表达式函数表示的 SQL 字符串</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>当扩展方法返回值为 string 时，其返回值也可以当作 context.Value.Result 功能</p>\n</blockquote>\n<blockquote>\n<p>当不想解析指定参数时，使用特性 [RawValue] 标记</p>\n</blockquote>\n<h2> 参数化</h2>\n<p>Where(lambda) 解析出来的默认是纯文本（已防止SQL注入），对数据库执行计划要求特别高，可以开启 lambda 参数化功能。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>生成的参数对象，DbType、Size、Precision、Scale 值设置默认已作优化，与实体属性定义一致。</p>\n<p>诡异操作：</p>\n<blockquote>\n<p>如果不希望 string 参数与实体属性的 Size 相同，可利用自定义表达式函数功能，如下：</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第一条语句产生的参数对象 Size 为 100，第二条为 10：</p>\n<figure><img src=\"https://user-images.githubusercontent.com/16286519/69433211-2c5fcf80-0d76-11ea-8eec-963eb37199c5.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<h2> 表达式函数全览</h2>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a ? b : c</td>\n<td>case when a then b else c end</td>\n<td>case when a then b else c end</td>\n<td>case when a then b else c end</td>\n<td>case when a then b else c end</td>\n<td>a成立时取b值，否则取c值</td>\n</tr>\n<tr>\n<td>a ?? b</td>\n<td>ifnull(a, b)</td>\n<td>isnull(a, b)</td>\n<td>coalesce(a, b)</td>\n<td>nvl(a, b)</td>\n<td>当a为null时，取b值</td>\n</tr>\n<tr>\n<td>数字 + 数字</td>\n<td>a + b</td>\n<td>a + b</td>\n<td>a + b</td>\n<td>a + b</td>\n<td>数字相加</td>\n</tr>\n<tr>\n<td>数字 + 字符串</td>\n<td>concat(a, b)</td>\n<td>cast(a as varchar) + cast(b as varchar)</td>\n<td>case(a as varchar)|| b</td>\n<td>a|| b</td>\n<td>字符串相加，a或b任意一个为字符串时</td>\n</tr>\n<tr>\n<td>a - b</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>减</td>\n</tr>\n<tr>\n<td>a * b</td>\n<td>a * b</td>\n<td>a * b</td>\n<td>a * b</td>\n<td>a * b</td>\n<td>乘</td>\n</tr>\n<tr>\n<td>a / b</td>\n<td>a / b</td>\n<td>a / b</td>\n<td>a / b</td>\n<td>a / b</td>\n<td>除</td>\n</tr>\n<tr>\n<td>a / b</td>\n<td>a div b</td>\n<td>a / b</td>\n<td>a / b</td>\n<td>trunc(a / b)</td>\n<td>整除(a,b都为整数)</td>\n</tr>\n<tr>\n<td>a % b</td>\n<td>a % b</td>\n<td>a % b</td>\n<td>a % b</td>\n<td>mod(a,b)</td>\n<td>模</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>等等...</p>\n</blockquote>\n<h3> 数组</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a.Length</td>\n<td>-</td>\n<td>-</td>\n<td>case when a is null then 0 else array_length(a,1) end</td>\n<td>-</td>\n<td>数组长度</td>\n</tr>\n<tr>\n<td>常量数组.Length</td>\n<td>-</td>\n<td>-</td>\n<td>array_length(array[常量数组元素逗号分割],1)</td>\n<td>-</td>\n<td>数组长度</td>\n</tr>\n<tr>\n<td>a.Any()</td>\n<td>-</td>\n<td>-</td>\n<td>case when a is null then 0 else array_length(a,1) end &gt; 0</td>\n<td>-</td>\n<td>数组是否为空</td>\n</tr>\n<tr>\n<td>常量数组.Contains(b)</td>\n<td>b in (常量数组元素逗号分割)</td>\n<td>b in (常量数组元素逗号分割)</td>\n<td>b in (常量数组元素逗号分割)</td>\n<td>b in (常量数组元素逗号分割)</td>\n<td>IN查询</td>\n</tr>\n<tr>\n<td>a.Contains(b)</td>\n<td>-</td>\n<td>-</td>\n<td>a @&gt; array[b]</td>\n<td>-</td>\n<td>a数组是否包含b元素</td>\n</tr>\n<tr>\n<td>a.Concat(b)</td>\n<td>-</td>\n<td>-</td>\n<td>a || b</td>\n<td>-</td>\n<td>数组相连</td>\n</tr>\n<tr>\n<td>a.Count()</td>\n<td>-</td>\n<td>-</td>\n<td>同 Length</td>\n<td>-</td>\n<td>数组长度</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>一个细节证明 FreeSql 匠心制作</p>\n</blockquote>\n<p>通用的 in 查询 select.Where(a =&gt; new []{ 1,2,3 }.Contains(a.xxx))</p>\n<p>假设 xxxs 是 pgsql 的数组字段类型，其实会与上面的 in 查询起冲突，FreeSql 解决了这个矛盾 select.Where(a =&gt; a.xxxs.Contains(1))</p>\n<h3> 字典 Dictionary&lt;string, string&gt;</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a.Count</td>\n<td>-</td>\n<td>-</td>\n<td>case when a is null then 0 else array_length(akeys(a),1) end</td>\n<td>-</td>\n<td>字典长度</td>\n</tr>\n<tr>\n<td>a.Keys</td>\n<td>-</td>\n<td>-</td>\n<td>akeys(a)</td>\n<td>-</td>\n<td>返回字典所有key数组</td>\n</tr>\n<tr>\n<td>a.Values</td>\n<td>-</td>\n<td>-</td>\n<td>avals(a)</td>\n<td>-</td>\n<td>返回字典所有value数组</td>\n</tr>\n<tr>\n<td>a.Contains(b)</td>\n<td>-</td>\n<td>-</td>\n<td>a @&gt; b</td>\n<td>-</td>\n<td>字典是否包含b</td>\n</tr>\n<tr>\n<td>a.ContainsKey(b)</td>\n<td>-</td>\n<td>-</td>\n<td>a? b</td>\n<td>-</td>\n<td>字典是否包含key</td>\n</tr>\n<tr>\n<td>a.Concat(b)</td>\n<td>-</td>\n<td>-</td>\n<td>a || b</td>\n<td>-</td>\n<td>字典相连</td>\n</tr>\n<tr>\n<td>a.Count()</td>\n<td>-</td>\n<td>-</td>\n<td>同 Count</td>\n<td>-</td>\n<td>字典长度</td>\n</tr>\n</tbody>\n</table>\n<h3> JSON JToken/JObject/JArray</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a.Count</td>\n<td>-</td>\n<td>-</td>\n<td>jsonb_array_length(coalesce(a, '[]))</td>\n<td>-</td>\n<td>json数组类型的长度</td>\n</tr>\n<tr>\n<td>a.Any()</td>\n<td>-</td>\n<td>-</td>\n<td>jsonb_array_length(coalesce(a, '[])) &gt; 0</td>\n<td>-</td>\n<td>json数组类型，是否为空</td>\n</tr>\n<tr>\n<td>a.Contains(b)</td>\n<td>-</td>\n<td>-</td>\n<td>coalesce(a, '{}') @&gt; b::jsonb</td>\n<td>-</td>\n<td>json中是否包含b</td>\n</tr>\n<tr>\n<td>a.ContainsKey(b)</td>\n<td>-</td>\n<td>-</td>\n<td>coalesce(a, '{}') ? b</td>\n<td>-</td>\n<td>json中是否包含键b</td>\n</tr>\n<tr>\n<td>a.Concat(b)</td>\n<td>-</td>\n<td>-</td>\n<td>coalesce(a, '{}')</td>\n<td></td>\n<td>b::jsonb</td>\n</tr>\n<tr>\n<td>Parse(a)</td>\n<td>-</td>\n<td>-</td>\n<td>a::jsonb</td>\n<td>-</td>\n<td>转化字符串为json类型</td>\n</tr>\n<tr>\n<td>a.Field[\"x\"]</td>\n<td>-</td>\n<td>-</td>\n<td>a.Field-&gt;x</td>\n<td>-</td>\n<td>json成员访问</td>\n</tr>\n</tbody>\n</table>\n<h3> 字符串</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n<th>Sqlite</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string.Empty</td>\n<td>''</td>\n<td>''</td>\n<td>''</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>string.IsNullOrEmpty(a)</td>\n<td>(a is null or a = '')</td>\n<td>(a is null or a = '')</td>\n<td>(a is null or a = '')</td>\n<td>(a is null or a = '')</td>\n<td>(a is null or a = '')</td>\n</tr>\n<tr>\n<td>string.Concat(a,b,c...)</td>\n<td>concat(a, b, c)</td>\n<td>a + b + c</td>\n<td>a || b || c</td>\n<td>a || b || c</td>\n<td>a || b || c</td>\n</tr>\n<tr>\n<td>a.CompareTo(b)</td>\n<td>strcmp(a, b)</td>\n<td>-</td>\n<td>case when a = b then 0 when a &gt; b then 1 else -1 end</td>\n<td>case when a = b then 0 when a &gt; b then 1 else -1 end</td>\n<td>case when a = b then 0 when a &gt; b then 1 else -1 end</td>\n</tr>\n<tr>\n<td>a.Contains('b')</td>\n<td>a like '%b%'</td>\n<td>a like '%b%'</td>\n<td>a ilike'%b%'</td>\n<td>a like '%b%'</td>\n<td>a like '%b%'</td>\n</tr>\n<tr>\n<td>a.EndsWith('b')</td>\n<td>a like '%b'</td>\n<td>a like '%b'</td>\n<td>a ilike'%b'</td>\n<td>a like '%b'</td>\n<td>a like '%b'</td>\n</tr>\n<tr>\n<td>a.IndexOf(b)</td>\n<td>locate(a, b) - 1</td>\n<td>locate(a, b) - 1</td>\n<td>strpos(a, b) - 1</td>\n<td>instr(a, b, 1, 1) - 1</td>\n<td>instr(a, b) - 1</td>\n</tr>\n<tr>\n<td>a.Length</td>\n<td>char_length(a)</td>\n<td>len(a)</td>\n<td>char_length(a)</td>\n<td>length(a)</td>\n<td>length(a)</td>\n</tr>\n<tr>\n<td>a.PadLeft(b, c)</td>\n<td>lpad(a, b, c)</td>\n<td>-</td>\n<td>lpad(a, b, c)</td>\n<td>lpad(a, b, c)</td>\n<td>lpad(a, b, c)</td>\n</tr>\n<tr>\n<td>a.PadRight(b, c)</td>\n<td>rpad(a, b, c)</td>\n<td>-</td>\n<td>rpad(a, b, c)</td>\n<td>rpad(a, b, c)</td>\n<td>rpad(a, b, c)</td>\n</tr>\n<tr>\n<td>a.Replace(b, c)</td>\n<td>replace(a, b, c)</td>\n<td>replace(a, b, c)</td>\n<td>replace(a, b, c)</td>\n<td>replace(a, b, c)</td>\n<td>replace(a, b, c)</td>\n</tr>\n<tr>\n<td>a.StartsWith('b')</td>\n<td>a like 'b%'</td>\n<td>a like 'b%'</td>\n<td>a ilike'b%'</td>\n<td>a like 'b%'</td>\n<td>a like 'b%'</td>\n</tr>\n<tr>\n<td>a.Substring(b, c)</td>\n<td>substr(a, b, c + 1)</td>\n<td>substring(a, b, c + 1)</td>\n<td>substr(a, b, c + 1)</td>\n<td>substr(a, b, c + 1)</td>\n<td>substr(a, b, c + 1)</td>\n</tr>\n<tr>\n<td>a.ToLower</td>\n<td>lower(a)</td>\n<td>lower(a)</td>\n<td>lower(a)</td>\n<td>lower(a)</td>\n<td>lower(a)</td>\n</tr>\n<tr>\n<td>a.ToUpper</td>\n<td>upper(a)</td>\n<td>upper(a)</td>\n<td>upper(a)</td>\n<td>upper(a)</td>\n<td>upper(a)</td>\n</tr>\n<tr>\n<td>a.Trim</td>\n<td>trim(a)</td>\n<td>trim(a)</td>\n<td>trim(a)</td>\n<td>trim(a)</td>\n<td>trim(a)</td>\n</tr>\n<tr>\n<td>a.TrimEnd</td>\n<td>rtrim(a)</td>\n<td>rtrim(a)</td>\n<td>rtrim(a)</td>\n<td>rtrim(a)</td>\n<td>rtrim(a)</td>\n</tr>\n<tr>\n<td>a.TrimStart</td>\n<td>ltrim(a)</td>\n<td>ltrim(a)</td>\n<td>ltrim(a)</td>\n<td>ltrim(a)</td>\n<td>ltrim(a)</td>\n</tr>\n<tr>\n<td>a.FirstOrDefault</td>\n<td>substr(a,1,1)</td>\n<td>substring(a,1,1)</td>\n<td>substr(a,1,1)</td>\n<td>substr(a,1,1)</td>\n<td>substr(a,1,1)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用字符串函数可能会出现性能瓶颈，虽然不推荐使用，但是作为功能库这也是不可缺少的功能之一。</p>\n</blockquote>\n<h3> 日期</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DateTime.Now</td>\n<td>now()</td>\n<td>getdate()</td>\n<td>current_timestamp</td>\n<td>systimestamp</td>\n</tr>\n<tr>\n<td>DateTime.UtcNow</td>\n<td>utc_timestamp()</td>\n<td>getutcdate()</td>\n<td>(current_timestamp at time zone 'UTC')</td>\n<td>sys_extract_utc(systimestamp)</td>\n</tr>\n<tr>\n<td>DateTime.Today</td>\n<td>curdate</td>\n<td>convert(char(10),getdate(),120)</td>\n<td>current_date</td>\n<td>trunc(systimestamp)</td>\n</tr>\n<tr>\n<td>DateTime.MaxValue</td>\n<td>cast('9999/12/31 23:59:59' as datetime)</td>\n<td>'9999/12/31 23:59:59'</td>\n<td>'9999/12/31 23:59:59'::timestamp</td>\n<td>to_timestamp('9999-12-31 23:59:59','YYYY-MM-DD HH24:MI:SS.FF6')</td>\n</tr>\n<tr>\n<td>DateTime.MinValue</td>\n<td>cast('0001/1/1 0:00:00' as datetime)</td>\n<td>'1753/1/1 0:00:00'</td>\n<td>'0001/1/1 0:00:00'::timestamp</td>\n<td>to_timestamp('0001-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS.FF6')</td>\n</tr>\n<tr>\n<td>DateTime.Compare(a, b)</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>extract(epoch from a::timestamp-b::timestamp)</td>\n<td>extract(day from (a-b))</td>\n</tr>\n<tr>\n<td>DateTime.DaysInMonth(a, b)</td>\n<td>dayofmonth(last_day(concat(a, '-', b, '-1')))</td>\n<td>datepart(day, dateadd(day, -1, dateadd(month, 1, cast(a as varchar) + '-' + cast(b as varchar) + '-1')))</td>\n<td>extract(day from (a</td>\n<td></td>\n</tr>\n<tr>\n<td>DateTime.Equals(a, b)</td>\n<td>a = b</td>\n<td>a = b</td>\n<td>a = b</td>\n<td>a = b</td>\n</tr>\n<tr>\n<td>DateTime.IsLeapYear(a)</td>\n<td>a%4=0 and a%100&lt;&gt;0 or a%400=0</td>\n<td>a%4=0 and a%100&lt;&gt;0 or a%400=0</td>\n<td>a%4=0 and a%100&lt;&gt;0 or a%400=0</td>\n<td>mod(a,4)=0 AND mod(a,100)&lt;&gt;0 OR mod(a,400)=0</td>\n</tr>\n<tr>\n<td>DateTime.Parse(a)</td>\n<td>cast(a as datetime)</td>\n<td>cast(a as datetime)</td>\n<td>a::timestamp</td>\n<td>to_timestamp(a,'YYYY-MM-DD HH24:MI:SS.FF6')</td>\n</tr>\n<tr>\n<td>a.Add(b)</td>\n<td>date_add(a, interval b microsecond)</td>\n<td>dateadd(millisecond, b / 1000, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddDays(b)</td>\n<td>date_add(a, interval b day)</td>\n<td>dateadd(day, b, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddHours(b)</td>\n<td>date_add(a, interval b hour)</td>\n<td>dateadd(hour, b, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddMilliseconds(b)</td>\n<td>date_add(a, interval b*1000 microsecond)</td>\n<td>dateadd(millisecond, b, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddMinutes(b)</td>\n<td>date_add(a, interval b minute)</td>\n<td>dateadd(minute, b, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddMonths(b)</td>\n<td>date_add(a, interval b month)</td>\n<td>dateadd(month, b, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddSeconds(b)</td>\n<td>date_add(a, interval b second)</td>\n<td>dateadd(second, b, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddTicks(b)</td>\n<td>date_add(a, interval b/10 microsecond)</td>\n<td>dateadd(millisecond, b / 10000, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.AddYears(b)</td>\n<td>date_add(a, interval b year)</td>\n<td>dateadd(year, b, a)</td>\n<td>a::timestamp+(b</td>\n<td></td>\n</tr>\n<tr>\n<td>a.Date</td>\n<td>cast(date_format(a, '%Y-%m-%d') as datetime)</td>\n<td>convert(char(10),a,120)</td>\n<td>a::date</td>\n<td>trunc(a)</td>\n</tr>\n<tr>\n<td>a.Day</td>\n<td>dayofmonth(a)</td>\n<td>datepart(day, a)</td>\n<td>extract(day from a::timestamp)</td>\n<td>cast(to_char(a,'DD') as number)</td>\n</tr>\n<tr>\n<td>a.DayOfWeek</td>\n<td>dayofweek(a)</td>\n<td>datepart(weekday, a) - 1</td>\n<td>extract(dow from a::timestamp)</td>\n<td>case when to_char(a)='7' then 0 else cast(to_char(a) as number) end</td>\n</tr>\n<tr>\n<td>a.DayOfYear</td>\n<td>dayofyear(a)</td>\n<td>datepart(dayofyear, a)</td>\n<td>extract(doy from a::timestamp)</td>\n<td>cast(to_char(a,'DDD') as number)</td>\n</tr>\n<tr>\n<td>a.Hour</td>\n<td>hour(a)</td>\n<td>datepart(hour, a)</td>\n<td>extract(hour from a::timestamp)</td>\n<td>cast(to_char(a,'HH24') as number)</td>\n</tr>\n<tr>\n<td>a.Millisecond</td>\n<td>floor(microsecond(a) / 1000)</td>\n<td>datepart(millisecond, a)</td>\n<td>extract(milliseconds from a::timestamp)-extract(second from a::timestamp)*1000</td>\n<td>cast(to_char(a,'FF3') as number)</td>\n</tr>\n<tr>\n<td>a.Minute</td>\n<td>minute(a)</td>\n<td>datepart(minute, a)</td>\n<td>extract(minute from a::timestamp)</td>\n<td>cast(to_char(a,'MI') as number)</td>\n</tr>\n<tr>\n<td>a.Month</td>\n<td>month(a)</td>\n<td>datepart(month, a)</td>\n<td>extract(month from a::timestamp)</td>\n<td>cast(to_char(a,'FF3') as number)</td>\n</tr>\n<tr>\n<td>a.Second</td>\n<td>second(a)</td>\n<td>datepart(second, a)</td>\n<td>extract(second from a::timestamp)</td>\n<td>cast(to_char(a,'SS') as number)</td>\n</tr>\n<tr>\n<td>a.Subtract(b)</td>\n<td>timestampdiff(microsecond, b, a)</td>\n<td>datediff(millisecond, b, a) * 1000</td>\n<td>(extract(epoch from a::timestamp-b::timestamp)*1000000)</td>\n<td>a - b</td>\n</tr>\n<tr>\n<td>a.Ticks</td>\n<td>timestampdiff(microsecond, '0001-1-1', a) * 10</td>\n<td>datediff(millisecond, '1970-1-1', a) * 10000 + 621355968000000000</td>\n<td>extract(epoch from a::timestamp)*10000000+621355968000000000</td>\n<td>cast(to_char(a,'FF7') as number)</td>\n</tr>\n<tr>\n<td>a.TimeOfDay</td>\n<td>timestampdiff(microsecond, date_format(a, '%Y-%m-%d'), a)</td>\n<td>'1970-1-1 ' + convert(varchar, a, 14)</td>\n<td>extract(epoch from a::time)*1000000</td>\n<td>a - trunc(a)</td>\n</tr>\n<tr>\n<td>a.Year</td>\n<td>year(a)</td>\n<td>datepart(year, a)</td>\n<td>extract(year from a::timestamp)</td>\n<td>年</td>\n</tr>\n<tr>\n<td>a.Equals(b)</td>\n<td>a = b</td>\n<td>a = b</td>\n<td>a = b</td>\n<td>a = b</td>\n</tr>\n<tr>\n<td>a.CompareTo(b)</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>a - b</td>\n</tr>\n<tr>\n<td>a.ToString()</td>\n<td>date_format(a, '%Y-%m-%d %H:%i:%s.%f')</td>\n<td>convert(varchar, a, 121)</td>\n<td>to_char(a, 'YYYY-MM-DD HH24:MI:SS.US')</td>\n<td>to_char(a,'YYYY-MM-DD HH24:MI:SS.FF6')</td>\n</tr>\n</tbody>\n</table>\n<h3> 时间</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql(微秒)</th>\n<th>SqlServer(秒)</th>\n<th>PostgreSQL(微秒)</th>\n<th>Oracle(Interval day(9) to second(7))</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TimeSpan.Zero</td>\n<td>0</td>\n<td>0</td>\n<td>-</td>\n<td>0微秒</td>\n</tr>\n<tr>\n<td>TimeSpan.MaxValue</td>\n<td>922337203685477580</td>\n<td>922337203685477580</td>\n<td>-</td>\n<td>numtodsinterval(233720368.5477580,'second')</td>\n</tr>\n<tr>\n<td>TimeSpan.MinValue</td>\n<td>-922337203685477580</td>\n<td>-922337203685477580</td>\n<td>-</td>\n<td>numtodsinterval(-233720368.5477580,'second')</td>\n</tr>\n<tr>\n<td>TimeSpan.Compare(a, b)</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>-</td>\n<td>extract(day from (a-b))</td>\n</tr>\n<tr>\n<td>TimeSpan.Equals(a, b)</td>\n<td>a = b</td>\n<td>a = b</td>\n<td>-</td>\n<td>a = b</td>\n</tr>\n<tr>\n<td>TimeSpan.FromDays(a)</td>\n<td>a <em>1000000</em> 60 <em>60</em> 24</td>\n<td>a <em>1000000</em> 60 <em>60</em> 24</td>\n<td>-</td>\n<td>numtodsinterval(a*86400,'second')</td>\n</tr>\n<tr>\n<td>TimeSpan.FromHours(a)</td>\n<td>a <em>1000000</em> 60 * 60</td>\n<td>a * 1000000 <em>60</em> 60</td>\n<td>-</td>\n<td>numtodsinterval(a*3600,'second')</td>\n</tr>\n<tr>\n<td>TimeSpan.FromMilliseconds(a)</td>\n<td>a * 1000</td>\n<td>a * 1000</td>\n<td>-</td>\n<td>numtodsinterval(a/1000,'second')</td>\n</tr>\n<tr>\n<td>TimeSpan.FromMinutes(a)</td>\n<td>a <em>1000000</em> 60</td>\n<td>a <em>1000000</em> 60</td>\n<td>-</td>\n<td>numtodsinterval(a*60,'second')</td>\n</tr>\n<tr>\n<td>TimeSpan.FromSeconds(a)</td>\n<td>a * 1000000</td>\n<td>a * 1000000</td>\n<td>-</td>\n<td>numtodsinterval(a,'second')</td>\n</tr>\n<tr>\n<td>TimeSpan.FromTicks(a)</td>\n<td>a / 10</td>\n<td>a / 10</td>\n<td>-</td>\n<td>numtodsinterval(a/10000000,'second')</td>\n</tr>\n<tr>\n<td>a.Add(b)</td>\n<td>a + b</td>\n<td>a + b</td>\n<td>-</td>\n<td>a + b</td>\n</tr>\n<tr>\n<td>a.Subtract(b)</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>-</td>\n<td>a - b</td>\n</tr>\n<tr>\n<td>a.CompareTo(b)</td>\n<td>a - b</td>\n<td>a - b</td>\n<td>-</td>\n<td>extract(day from (a-b))</td>\n</tr>\n<tr>\n<td>a.Days</td>\n<td>a div (1000000 <em>60</em> 60 * 24)</td>\n<td>a div (1000000 * 60 <em>60</em> 24)</td>\n<td>-</td>\n<td>extract(day from a)</td>\n</tr>\n<tr>\n<td>a.Hours</td>\n<td>a div (1000000 <em>60</em> 60) mod 24</td>\n<td>a div (1000000 <em>60</em> 60) mod 24</td>\n<td>-</td>\n<td>extract(hour from a)</td>\n</tr>\n<tr>\n<td>a.Milliseconds</td>\n<td>a div 1000 mod 1000</td>\n<td>a div 1000 mod 1000</td>\n<td>-</td>\n<td>cast(substr(extract(second from a)-floor(extract(second from a)),2,3) as number)</td>\n</tr>\n<tr>\n<td>a.Seconds</td>\n<td>a div 1000000 mod 60</td>\n<td>a div 1000000 mod 60</td>\n<td>-</td>\n<td>extract(second from a)</td>\n</tr>\n<tr>\n<td>a.Ticks</td>\n<td>a * 10</td>\n<td>a * 10</td>\n<td>-</td>\n<td>(extract(day from a)*86400+extract(hour from a)*3600+extract(minute from a)*60+extract(second from a))*10000000</td>\n</tr>\n<tr>\n<td>a.TotalDays</td>\n<td>a / (1000000 <em>60</em> 60 * 24)</td>\n<td>a / (1000000 * 60 <em>60</em> 24)</td>\n<td>-</td>\n<td>extract(day from a)</td>\n</tr>\n<tr>\n<td>a.TotalHours</td>\n<td>a / (1000000 <em>60</em> 60)</td>\n<td>a / (1000000 <em>60</em> 60)</td>\n<td>-</td>\n<td>(extract(day from a)*24+extract(hour from a))</td>\n</tr>\n<tr>\n<td>a.TotalMilliseconds</td>\n<td>a / 1000</td>\n<td>a / 1000</td>\n<td>-</td>\n<td>(extract(day from a)*86400+extract(hour from a)*3600+extract(minute from a)*60+extract(second from a))*1000</td>\n</tr>\n<tr>\n<td>a.TotalMinutes</td>\n<td>a / (1000000 * 60)</td>\n<td>a / (1000000 * 60)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>a.TotalSeconds</td>\n<td>a / 1000000</td>\n<td>a / 1000000</td>\n<td>-</td>\n<td>(extract(day from a)*86400+extract(hour from a)*3600+extract(minute from a)*60+extract(second from a))</td>\n</tr>\n<tr>\n<td>a.Equals(b)</td>\n<td>a = b</td>\n<td>a = b</td>\n<td>-</td>\n<td>a = b</td>\n</tr>\n<tr>\n<td>a.ToString()</td>\n<td>cast(a as varchar)</td>\n<td>cast(a as varchar)</td>\n<td>-</td>\n<td>to_char(a)</td>\n</tr>\n</tbody>\n</table>\n<h3> 数学函数</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Math.Abs(a)</td>\n<td>abs(a)</td>\n<td>abs(a)</td>\n<td>abs(a)</td>\n<td></td>\n</tr>\n<tr>\n<td>Math.Acos(a)</td>\n<td>acos(a)</td>\n<td>acos(a)</td>\n<td>acos(a)</td>\n<td>acos(a)</td>\n</tr>\n<tr>\n<td>Math.Asin(a)</td>\n<td>asin(a)</td>\n<td>asin(a)</td>\n<td>asin(a)</td>\n<td>asin(a)</td>\n</tr>\n<tr>\n<td>Math.Atan(a)</td>\n<td>atan(a)</td>\n<td>atan(a)</td>\n<td>atan(a)</td>\n<td>atan(a)</td>\n</tr>\n<tr>\n<td>Math.Atan2(a, b)</td>\n<td>atan2(a, b)</td>\n<td>atan2(a, b)</td>\n<td>atan2(a, b)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Math.Ceiling(a)</td>\n<td>ceiling(a)</td>\n<td>ceiling(a)</td>\n<td>ceiling(a)</td>\n<td>ceil(a)</td>\n</tr>\n<tr>\n<td>Math.Cos(a)</td>\n<td>cos(a)</td>\n<td>cos(a)</td>\n<td>cos(a)</td>\n<td>cos(a)</td>\n</tr>\n<tr>\n<td>Math.Exp(a)</td>\n<td>exp(a)</td>\n<td>exp(a)</td>\n<td>exp(a)</td>\n<td>exp(a)</td>\n</tr>\n<tr>\n<td>Math.Floor(a)</td>\n<td>floor(a)</td>\n<td>floor(a)</td>\n<td>floor(a)</td>\n<td>floor(a)</td>\n</tr>\n<tr>\n<td>Math.Log(a)</td>\n<td>log(a)</td>\n<td>log(a)</td>\n<td>log(a)</td>\n<td>log(e,a)</td>\n</tr>\n<tr>\n<td>Math.Log10(a)</td>\n<td>log10(a)</td>\n<td>log10(a)</td>\n<td>log10(a)</td>\n<td>log(10,a)</td>\n</tr>\n<tr>\n<td>Math.PI(a)</td>\n<td>3.1415926535897931</td>\n<td>3.1415926535897931</td>\n<td>3.1415926535897931</td>\n<td>3.1415926535897931</td>\n</tr>\n<tr>\n<td>Math.Pow(a, b)</td>\n<td>pow(a, b)</td>\n<td>power(a, b)</td>\n<td>pow(a, b)</td>\n<td>power(a, b)</td>\n</tr>\n<tr>\n<td>Math.Round(a, b)</td>\n<td>round(a, b)</td>\n<td>round(a, b)</td>\n<td>round(a, b)</td>\n<td>round(a, b)</td>\n</tr>\n<tr>\n<td>Math.Sign(a)</td>\n<td>sign(a)</td>\n<td>sign(a)</td>\n<td>sign(a)</td>\n<td>sign(a)</td>\n</tr>\n<tr>\n<td>Math.Sin(a)</td>\n<td>sin(a)</td>\n<td>sin(a)</td>\n<td>sin(a)</td>\n<td>sin(a)</td>\n</tr>\n<tr>\n<td>Math.Sqrt(a)</td>\n<td>sqrt(a)</td>\n<td>sqrt(a)</td>\n<td>sqrt(a)</td>\n<td>sqrt(a)</td>\n</tr>\n<tr>\n<td>Math.Tan(a)</td>\n<td>tan(a)</td>\n<td>tan(a)</td>\n<td>tan(a)</td>\n<td>tan(a)</td>\n</tr>\n<tr>\n<td>Math.Truncate(a)</td>\n<td>truncate(a, 0)</td>\n<td>floor(a)</td>\n<td>trunc(a, 0)</td>\n<td>trunc(a, 0)</td>\n</tr>\n</tbody>\n</table>\n<h3> 类型转换</h3>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n<th>Sqlite</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Convert.ToBoolean(a) | bool.Parse(a)</td>\n<td>a not in ('0','false')</td>\n<td>a not in ('0','false')</td>\n<td>a::varchar not in ('0','false','f','no')</td>\n<td>-</td>\n<td>a not in ('0','false')</td>\n</tr>\n<tr>\n<td>Convert.ToByte(a) | byte.Parse(a)</td>\n<td>cast(a as unsigned)</td>\n<td>cast(a as tinyint)</td>\n<td>a::int2</td>\n<td>cast(a as number)</td>\n<td>cast(a as int2)</td>\n</tr>\n<tr>\n<td>Convert.ToChar(a)</td>\n<td>substr(cast(a as char),1,1)</td>\n<td>substring(cast(a as nvarchar),1,1)</td>\n<td>substr(a::char,1,1)</td>\n<td>substr(to_char(a),1,1)</td>\n<td>substr(cast(a as character),1,1)</td>\n</tr>\n<tr>\n<td>Convert.ToDateTime(a) | DateTime.Parse(a)</td>\n<td>cast(a as datetime)</td>\n<td>cast(a as datetime)</td>\n<td>a::timestamp</td>\n<td>to_timestamp(a,'YYYY-MM-DD HH24:MI:SS.FF6')</td>\n<td>datetime(a)</td>\n</tr>\n<tr>\n<td>Convert.ToDecimal(a) | decimal.Parse(a)</td>\n<td>cast(a as decimal(36,18))</td>\n<td>cast(a as decimal(36,19))</td>\n<td>a::numeric</td>\n<td>cast(a as number)</td>\n<td>cast(a as decimal(36,18))</td>\n</tr>\n<tr>\n<td>Convert.ToDouble(a) | double.Parse(a)</td>\n<td>cast(a as decimal(32,16))</td>\n<td>cast(a as decimal(32,16))</td>\n<td>a::float8</td>\n<td>cast(a as number)</td>\n<td>cast(a as double)</td>\n</tr>\n<tr>\n<td>Convert.ToInt16(a) | short.Parse(a)</td>\n<td>cast(a as signed)</td>\n<td>cast(a as smallint)</td>\n<td>a::int2</td>\n<td>cast(a as number)</td>\n<td>cast(a as smallint)</td>\n</tr>\n<tr>\n<td>Convert.ToInt32(a) | int.Parse(a)</td>\n<td>cast(a as signed)</td>\n<td>cast(a as int)</td>\n<td>a::int4</td>\n<td>cast(a as number)</td>\n<td>cast(a as smallint)</td>\n</tr>\n<tr>\n<td>Convert.ToInt64(a) | long.Parse(a)</td>\n<td>cast(a as signed)</td>\n<td>cast(a as bigint)</td>\n<td>a::int8</td>\n<td>cast(a as number)</td>\n<td>cast(a as smallint)</td>\n</tr>\n<tr>\n<td>Convert.ToSByte(a) | sbyte.Parse(a)</td>\n<td>cast(a as signed)</td>\n<td>cast(a as tinyint)</td>\n<td>a::int2</td>\n<td>cast(a as number)</td>\n<td>cast(a as smallint)</td>\n</tr>\n<tr>\n<td>Convert.ToSingle(a) | float.Parse(a)</td>\n<td>cast(a as decimal(14,7))</td>\n<td>cast(a as decimal(14,7))</td>\n<td>a::float4</td>\n<td>cast(a as number)</td>\n<td>cast(a as float)</td>\n</tr>\n<tr>\n<td>Convert.ToString(a)</td>\n<td>cast(a as char)</td>\n<td>cast(a as nvarchar)</td>\n<td>a::varchar</td>\n<td>to_char(a)</td>\n<td>cast(a as character)</td>\n</tr>\n<tr>\n<td>Convert.ToUInt16(a) | ushort.Parse(a)</td>\n<td>cast(a as unsigned)</td>\n<td>cast(a as smallint)</td>\n<td>a::int2</td>\n<td>cast(a as number)</td>\n<td>cast(a as unsigned)</td>\n</tr>\n<tr>\n<td>Convert.ToUInt32(a) | uint.Parse(a)</td>\n<td>cast(a as unsigned)</td>\n<td>cast(a as int)</td>\n<td>a::int4</td>\n<td>cast(a as number)</td>\n<td>cast(a as decimal(10,0))</td>\n</tr>\n<tr>\n<td>Convert.ToUInt64(a) | ulong.Parse(a)</td>\n<td>cast(a as unsigned)</td>\n<td>cast(a as bigint)</td>\n<td>a::int8</td>\n<td>cast(a as number)</td>\n<td>cast(a as decimal(21,0))</td>\n</tr>\n<tr>\n<td>Guid.Parse(a)</td>\n<td>substr(cast(a as char),1,36)</td>\n<td>cast(a as uniqueidentifier)</td>\n<td>a::uuid</td>\n<td>substr(to_char(a),1,36)</td>\n<td>substr(cast(a as character),1,36)</td>\n</tr>\n<tr>\n<td>Guid.NewGuid()</td>\n<td>-</td>\n<td>newid()</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>new Random().NextDouble()</td>\n<td>rand()</td>\n<td>rand()</td>\n<td>random()</td>\n<td>dbms_random.value</td>\n<td>random()</td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://user-images.githubusercontent.com/16286519/69433211-2c5fcf80-0d76-11ea-8eec-963eb37199c5.png",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-26T07:45:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "过滤器",
      "url": "https://freesql.net/guide/filters.html",
      "id": "https://freesql.net/guide/filters.html",
      "summary": "全局过滤器（建议） FreeSql 基础层实现了 Select/Update/Delete 可设置的全局过滤器功能。 Apply 泛型参数可以设置为任何类型，当使用 Select/Update/Delete 方法时会进行过滤器匹配尝试（try catch）： 匹配成功的，将附加 where 条件；; 匹配失败的，标记下次不再匹配，避免性能损耗；; 如何...",
      "content_html": "<h1> 过滤器</h1>\n<h2> 全局过滤器（建议）</h2>\n<p>FreeSql 基础层实现了 Select/Update/Delete 可设置的全局过滤器功能。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Apply 泛型参数可以设置为任何类型，当使用 Select/Update/Delete 方法时会进行过滤器匹配尝试（try catch）：</p>\n<ul>\n<li>匹配成功的，将附加 where 条件；</li>\n<li>匹配失败的，标记下次不再匹配，避免性能损耗；</li>\n</ul>\n<p>如何禁用？</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>fsql.Update/Delete 方法效果同上。</p>\n<h2> 仓储过滤器</h2>\n<blockquote>\n<p>注意：仓储过滤器属于早期功能，如果 fsql.GlobalFilter 够用的话，可以跳过以下内容。</p>\n</blockquote>\n<p>FreeSql.Repository 也实现了过滤器功能，它在查询时过滤，删除/修改/插入篇还会进行验证数据，避免数据安全问题。</p>\n<blockquote>\n<p>注意：仓储的过滤器与 IFreeSql.GlobalFilter 不是一个功能，可以同时生效。</p>\n</blockquote>\n<blockquote>\n<p>推荐使用 IFreeSql.GlobalFilter。仓储过滤器在早期出的功能，会一直保留。</p>\n</blockquote>\n<p>每个仓储实例都有 IDataFilter 属性，可利用其完成过滤器管理，它是独立的修改后不影响全局。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 临时禁用</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 过滤与验证</h2>\n<p>假设我们有 User(用户)、Topic(主题)两个实体，在领域类中定义了两个仓储：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在开发过程中，总是担心 topicRepository 的数据安全问题，即有可能查询或操作到其他用户的主题。因此我们在 v0.0.7 版本进行了改进，增加了 filter lambda 表达式参数。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>在查询/修改/删除时附加此条件，从而达到不会修改其他用户的数据；</li>\n<li>在添加时，使用表达式验证数据的合法性，若不合法则抛出异常；</li>\n</ul>\n<p>仓储过滤器，可帮助实现“软删除”、“租户”等设计，目前使用 AspNetCore 注入的方式实现的仓储过滤器。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>比 abpvnext 还要方便，因为 abp 的相关实体需要实现接口 ISoftDelete、ITenant；</p>\n<p>我们没有这个限制，只要过滤器的表达式解析成功，就算可用；</p>\n<p>使用在任何实体上的时候，只要 [实体].IsDeleted == false 能解析能过，就算可用；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第一次请求：</p>\n<p>repo1.Select.ToSql()</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>repos2.Select.ToSql()</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>第二次请求：</p>\n<p>repo1.Select.ToSql()</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>repos2.Select.ToSql()</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>//禁用过滤器\nrepo1.DataFilter.Disable(\"test\")</p>\n<p>repo1.Select.ToSql()</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>1、注入的变量值在使用时有了动态变化，每次获取时都是新的（Thread.CurrentThread.ManagedThreadId）；</p>\n<p>2、设定的全局过滤，若某实体不存在表达式函数中的字段时，不会生效（如上 xxxx 不存在 Title）；</p>\n<p>3、使用 DataFilter.Disable(\"test\") 可临时关闭过滤器的效果，使用 DataFilter.Enable(\"test\") 可重新开启；</p>\n<p>4、仓储对象创建时，从全局过滤器 copy 进来，然后自己管理自己。修改后不影响其他或全局设置。</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-07-07T06:29:42.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Fluent API",
      "url": "https://freesql.net/guide/fluent-api.html",
      "id": "https://freesql.net/guide/fluent-api.html",
      "summary": "支持 Fluent API FreeSql 提供了 Fluent Api 的方式,使用链式调用，可在外部配置实体的数据库特性。Fluent Api 的方法命名与特性名保持一致，共三种使用方法，选择一种即可： fsql 是一个 IFreeSql 对象、配置尽量只执行一次，避免性能损耗 参考：《实体特性说明》 (entity-attribute.md) C...",
      "content_html": "<h2> 支持 Fluent API</h2>\n<p>FreeSql 提供了 Fluent Api 的方式,使用链式调用，可在外部配置实体的数据库特性。<code>Fluent Api</code> 的方法命名与特性名保持一致，共三种使用方法，选择<strong>一种即可</strong>：</p>\n<blockquote>\n<p>fsql 是一个 IFreeSql 对象、配置尽量只执行一次，避免性能损耗 参考：<a href=\"/guide/entity-attribute.html\" target=\"blank\">《实体特性说明》</a></p>\n</blockquote>\n<h2> ConfigEntity</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>FreeSql.DbContext v1.4.0+ 实现了 EfCore FluentApi 99% 相似的语法</p>\n</blockquote>\n<h2> Entity</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> IEntityTypeConfiguration</h2>\n<p>以继承接口<code>IEntityTypeConfiguration</code>形式配置实体的。</p>\n<ul>\n<li>.NET Framework4.0 不支持</li>\n</ul>\n<h3> 实体配置类</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 二种使用方式</h3>\n<p>1.单个配置</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>2.批量配置</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 优先级</h2>\n<p>数据库特性 &gt; 实体特性 &gt; FluentApi（配置特性） &gt; Aop（配置特性）</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-01-14T16:07:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "入门",
      "url": "https://freesql.net/guide/getting-started.html",
      "id": "https://freesql.net/guide/getting-started.html",
      "summary": "安装包 FreeSql.Provider.xxx(可选的驱动 (install.md))@tab:active .NET CLI tab Package Manager 模型 FreeSql 使用模型执行数据访问，模型由实体类表示数据库表或视图，用于查询和保存数据。 可从现有数据库生成实体模型，FreeSql 提供 IDbFirst 接口实现生成实体模...",
      "content_html": "<h1> 入门</h1>\n<h2> 安装包</h2>\n<p>FreeSql.Provider.xxx(<a href=\"/guide/install.html\" target=\"blank\">可选的驱动</a>)</p>\n\n<h2> 模型</h2>\n<p><code>FreeSql</code> 使用模型执行数据访问，模型由实体类表示数据库表或视图，用于查询和保存数据。</p>\n<p>可从现有数据库生成实体模型，<code>FreeSql</code> 提供 <code>IDbFirst</code> 接口实现<a href=\"/guide/db-first.html\" target=\"blank\">生成实体模型</a>。</p>\n<p>或者手动创建模型，基于模型创建或修改数据库，提供<a href=\"/guide/code-first.html\" target=\"blank\">CodeFirst</a> 同步结构的 <code>API</code>（甚至可以做到开发阶段自动同步）。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 声明</h2>\n<blockquote>\n<p>注意： IFreeSql 在项目中应以单例声明，而不是在每次使用的时候创建。</p>\n</blockquote>\n<ul>\n<li>.NET Core 单例模式</li>\n</ul>\n\n<ul>\n<li><a href=\"/extra/idlebus-freesql.html\" target=\"blank\">.NET Core 注入多个 FreeSql 实例</a></li>\n<li>.NET Framework 单例</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意：<code>class DB&lt;T&gt;</code> 泛型类不适合定义 static 单例</p>\n</blockquote>\n<p>然后直接通过 <code>IFreeSql  fsql = DB.Sqlite;</code>  即可得到 fsql 实例。</p>\n<p><code>IFreeSql</code> 是 <code>ORM</code> 最顶级对象，所有操作都是使用它的方法或者属性：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 迁移</h2>\n<p>程序运行中<code>FreeSql</code>会检查<code>AutoSyncStructure</code>参数，以此条件判断是否对比实体与数据库结构之间的变化，达到自动迁移的目的,更多请查看<a href=\"/guide/code-first.html\" target=\"blank\">CodeFirst</a>文档，</p>\n<blockquote>\n<p>注意：谨慎、谨慎、谨慎在生产环境中使用该功能。</p>\n</blockquote>\n<blockquote>\n<p>注意：谨慎、谨慎、谨慎在生产环境中使用该功能。</p>\n</blockquote>\n<blockquote>\n<p>注意：谨慎、谨慎、谨慎在生产环境中使用该功能。</p>\n</blockquote>\n<h2> 查询</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 插入</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 更新</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 删除</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> FreeSqlBuilder</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>UseConnectionString</td>\n<td>this</td>\n<td>设置连接串</td>\n</tr>\n<tr>\n<td>UseAdoConnectionPool</td>\n<td>this</td>\n<td>设置连接池方案（默认 false，远程访问建议设置 true）</td>\n</tr>\n<tr>\n<td>UseSlave</td>\n<td>this</td>\n<td>设置从数据库，支持多个</td>\n</tr>\n<tr>\n<td>UseSlaveWeight</td>\n<td>this</td>\n<td>设置从数据库权重</td>\n</tr>\n<tr>\n<td>UseConnectionFactory</td>\n<td>this</td>\n<td>设置自定义数据库连接对象（放弃内置对象连接池技术）</td>\n</tr>\n<tr>\n<td>UseAutoSyncStructure</td>\n<td>this</td>\n<td>【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体创建或修改表结构</td>\n</tr>\n<tr>\n<td>UseNoneCommandParameter</td>\n<td>this</td>\n<td>不使用命令参数化执行，针对 Insert/Update，也可临时使用 IInsert/IUpdate.NoneParameter()</td>\n</tr>\n<tr>\n<td>UseGenerateCommandParameterWithLambda</td>\n<td>this</td>\n<td>生成命令参数化执行，针对 lambda 表达式解析</td>\n</tr>\n<tr>\n<td>UseLazyLoading</td>\n<td>this</td>\n<td>开启延时加载功能</td>\n</tr>\n<tr>\n<td>UseMonitorCommand</td>\n<td>this</td>\n<td>监视全局 SQL 执行前后</td>\n</tr>\n<tr>\n<td>UseMappingPriority</td>\n<td>this</td>\n<td>指定映射优先级（默认 Aop &lt; FluentApi &lt; Attribute）按顺序覆盖的逻辑，所以最后的那个优先级最高</td>\n</tr>\n<tr>\n<td>UseNameConvert</td>\n<td>this</td>\n<td>自动转换名称 Entity -&gt; Db</td>\n</tr>\n<tr>\n<td>UseQuoteSqlName</td>\n<td>this</td>\n<td>SQL名称是否使用 [] `` \"\"</td>\n</tr>\n<tr>\n<td>UseExitAutoDisposePool</td>\n<td>this</td>\n<td>监听 AppDomain.CurrentDomain.ProcessExit/Console.CancelKeyPress 事件自动释放连接池 (默认 true)</td>\n</tr>\n<tr>\n<td>Build&lt;T&gt;</td>\n<td>IFreeSql&lt;T&gt;</td>\n<td>创建一个 IFreeSql 对象，注意：单例设计，不要重复创建</td>\n</tr>\n</tbody>\n</table>\n<h2> ConnectionStrings</h2>\n<table>\n<thead>\n<tr>\n<th>DataType</th>\n<th>ConnectionString</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataType.MySql</td>\n<td>Data Source=127.0.0.1;Port=3306;User ID=root;Password=root; Initial Catalog=cccddd;Charset=utf8; SslMode=none;Min pool size=1</td>\n</tr>\n<tr>\n<td>DataType.PostgreSQL</td>\n<td>Host=192.168.164.10;Port=5432;Username=postgres;Password=123456; Database=tedb;ArrayNullabilityMode=Always;Pooling=true;Minimum Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.SqlServer</td>\n<td>Data Source=.;User Id=sa;Password=123456;Initial Catalog=freesqlTest;Encrypt=True;TrustServerCertificate=True;Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.Oracle</td>\n<td>user id=user1;password=123456; data source=//127.0.0.1:1521/XE;Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.Sqlite</td>\n<td>Data Source=|DataDirectory|\\document.db; Attachs=xxxtb.db; Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.ClickHouse</td>\n<td>DataCompress=False;BufferSize=32768;SocketTimeout=10000;CheckCompressedHash=False;Encrypt=False;Compressor=lz4;Host=192.168.0.121;Port=8125;Database=PersonnelLocation;Username=root;Password=123</td>\n</tr>\n<tr>\n<td>DataType.Firebird</td>\n<td>database=localhost:D:\\fbdata\\EXAMPLES.fdb;user=sysdba;password=123456</td>\n</tr>\n<tr>\n<td>DataType.QuestDb</td>\n<td>host=localhost;port=8812;username=admin;password=quest;database=qdb;ServerCompatibilityMode=NoTypeLoading;</td>\n</tr>\n<tr>\n<td>DataType.MsAccess</td>\n<td>Provider=Microsoft.Jet.OleDb.4.0;Data Source=d:/accdb/2003.mdb</td>\n</tr>\n<tr>\n<td>DataType.MsAccess(accdb)</td>\n<td>Provider=Microsoft.ACE.OLEDB.12.0;Data Source=d:/accdb/2003.accdb;</td>\n</tr>\n<tr>\n<td>DataType.MsAccess(加密)</td>\n<td>Provider=Microsoft.ACE.OLEDB.12.0;Data Source=d:/accdb/2003.accdb;Jet OLEDB:Database Password=12341234</td>\n</tr>\n<tr>\n<td>DataType.Dameng(达梦)</td>\n<td>server=127.0.0.1;port=5236;user=2user;password=123456789;database=2user;poolsize=5</td>\n</tr>\n<tr>\n<td>DataType.ShenTong(神通)</td>\n<td>HOST=192.168.164.10;PORT=2003;DATABASE=OSRDB;USERNAME=SYSDBA;PASSWORD=szoscar55;MAXPOOLSIZE=2</td>\n</tr>\n<tr>\n<td>DataType.KingbaseES(人大金仓) V008R003</td>\n<td>Server=127.0.0.1;Port=54321;UID=USER2;PWD=123456789;database=TEST;MAXPOOLSIZE=2</td>\n</tr>\n<tr>\n<td>DataType.Gbase(南大通用)</td>\n<td>Driver={GBase ODBC DRIVER (64-Bit)};Host=192.168.164.134;Service=9088;Server=gbase01;Database=testdb;Protocol=onsoctcp;Uid=gbasedbt;Pwd=GBase123;Db_locale=zh_CN.utf8;Client_locale=zh_CN.utf8</td>\n</tr>\n<tr>\n<td>DataType.Xugu(虚谷)</td>\n<td>IP=127.0.0.1;DB=SYSTEM;User=SYSDBA;PWD=SYSDBA;Port=5138;AUTO_COMMIT=on;CHAR_SET=UTF8</td>\n</tr>\n<tr>\n<td>DataType.OdbcMySql</td>\n<td>Driver={MySQL ODBC 8.0 Unicode Driver}; Server=127.0.0.1;Persist Security Info=False; Trusted_Connection=Yes;UID=root;PWD=root; DATABASE=cccddd_odbc;Charset=utf8; SslMode=none;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcSqlServer</td>\n<td>Driver={SQL Server};Data Source=.;User Id=sa;Password=123456;Initial Catalog=freesqlTest;Encrypt=True;TrustServerCertificate=True;Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcOracle</td>\n<td>Driver={Oracle in XE};Server=//127.0.0.1:1521/XE; Persist Security Info=False; Trusted_Connection=Yes;UID=odbc1;PWD=123456; Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcPostgreSQL</td>\n<td>Driver={PostgreSQL Unicode(x64)};Server=192.168.164.10; Port=5432;UID=postgres;PWD=123456; Database=tedb_odbc;Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcDameng (达梦)</td>\n<td>Driver={DM8 ODBC DRIVER};Server=127.0.0.1:5236; Persist Security Info=False; Trusted_Connection=Yes; UID=USER1;PWD=123456789</td>\n</tr>\n<tr>\n<td>DataType.OdbcKingbaseES (人大金仓) V008R003</td>\n<td>Driver={KingbaseES 8.2 ODBC Driver ANSI};Server=127.0.0.1;Port=54321;UID=USER2;PWD=123456789;database=TEST</td>\n</tr>\n<tr>\n<td>DataType.Odbc</td>\n<td>Driver={SQL Server};Server=.;Persist Security Info=False; Trusted_Connection=Yes;Integrated Security=True; DATABASE=freesqlTest_odbc; Pooling=true;Min pool size=1</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dotnetcore/FreeSql/tree/master/Providers/FreeSql.Provider.Custom\" target=\"_blank\" rel=\"noopener noreferrer\">DataType.Custom</a></td>\n<td>自定义连接串，访问任何数据库</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-01-14T16:07:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "新增或修改",
      "url": "https://freesql.net/guide/insert-or-update.html",
      "id": "https://freesql.net/guide/insert-or-update.html",
      "summary": "1、IFreeSql.InsertOrUpdate IFreeSql 定义了 InsertOrUpdate 方法实现添加或修改的功能，利用数据库特性：(v1.5.0+) Database Features Database Features ---------- ----------------------- --- -------- --------...",
      "content_html": "<h1> 新增或修改</h1>\n<h2> 1、IFreeSql.InsertOrUpdate</h2>\n<p>IFreeSql 定义了 InsertOrUpdate 方法实现添加或修改的功能，利用数据库特性：(v1.5.0+)</p>\n<table>\n<thead>\n<tr>\n<th>Database</th>\n<th>Features</th>\n<th></th>\n<th>Database</th>\n<th>Features</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql</td>\n<td>on duplicate key update</td>\n<td></td>\n<td>达梦</td>\n<td>merge into</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>on conflict do update</td>\n<td></td>\n<td>人大金仓</td>\n<td>on conflict do update</td>\n</tr>\n<tr>\n<td>SqlServer</td>\n<td>merge into</td>\n<td></td>\n<td>神通</td>\n<td>merge into</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>merge into</td>\n<td></td>\n<td>南大通用</td>\n<td>merge into</td>\n</tr>\n<tr>\n<td>Sqlite</td>\n<td>replace into</td>\n<td></td>\n<td>MsAccess</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>Firebird</td>\n<td>merge into</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当实体类有自增属性时，批量 InsertOrUpdate 最多可被拆成两次执行，内部计算出未设置自增值、和有设置自增值的数据，分别执行 insert into 和 上面讲到的 merge into 两种命令（采用事务执行）。</p>\n<p>注意：FreeSql.Repository 通用仓储也有 InsertOrUpdate 方法，它们的机制不一样。</p>\n<hr>\n<h2> 2、字典插入或更新</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 3、FreeSql.Repository 之 InsertOrUpdate</h2>\n<p>使用此方法需要引用 FreeSql.Repository 或 FreeSql.DbContext 功能包。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>状态管理是数据副本，查询时自动形成副本，只有使用 DbContext/Repository 查询才有状态管理。</p>\n<p>如果内部的状态管理存在数据，则更新。</p>\n<p>如果内部的状态管理不存在数据，则查询数据库，判断是否存在。</p>\n<blockquote>\n<p>存在则更新，不存在则插入</p>\n</blockquote>\n<p>缺点：不支持批量操作</p>\n<hr>\n<h2> 4、BulkCopy 批量插入或更新</h2>\n<table>\n<thead>\n<tr>\n<th>程序包</th>\n<th>扩展方法</th>\n<th>说明 (v3.2.693)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FreeSql.Provider.SqlServer</td>\n<td>ExecuteSqlBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MySqlConnector</td>\n<td>ExecuteMySqlBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Oracle</td>\n<td>ExecuteOracleBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Dameng</td>\n<td>ExecuteDmBulkCopy</td>\n<td>达梦</td>\n</tr>\n<tr>\n<td>FreeSql.Provider.PostgreSQL</td>\n<td>ExecutePgCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.KingbaseES</td>\n<td>ExecuteKdbCopy</td>\n<td>人大金仓</td>\n</tr>\n</tbody>\n</table>\n<p>原理：使用 BulkCopy 将数据插入到临时表，再使用 MERGE INTO 联表操作。</p>\n<p>提示：当更新的字段数量超过 3000 时，收益较大。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 5、BeginEdit 批量编辑</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面的代码 EndEdit 方法执行的时候产生 3 条 SQL 如下：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>场景：winform 加载表数据后，一顿添加、修改、删除操作之后，点击【保存】</p>\n<p>提醒：该操作只对变量 list 有效，不是针对全表对比更新。</p>\n<h2> 6、MySql 特有功能 On Duplicate Key Update</h2>\n<p>FreeSql.Provider.MySql 和 FreeSql.Provider.MySqlConnector 支持 MySql 特有的功能，On Duplicate Key Update。</p>\n<p>这个功能也可以实现插入或更新数据，并且支持批量操作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>OnDuplicateKeyUpdate() 之后可以调用的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IgnoreColumns</td>\n<td>忽略更新的列，机制和 IUpdate.IgnoreColumns 一样</td>\n</tr>\n<tr>\n<td>UpdateColumns</td>\n<td>指定更新的列，机制和 IUpdate.UpdateColumns 一样</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>手工指定更新的列，与 IUpdate.Set 功能一样</td>\n</tr>\n<tr>\n<td>SetRaw</td>\n<td>作为 Set 方法的补充，可传入 SQL 字符串</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>执行，返回影响的行数</td>\n</tr>\n</tbody>\n</table>\n<p>IInsert 与 OnDuplicateKeyUpdate 都有 IgnoreColumns、UpdateColumns 方法。</p>\n<p>当插入实体/集合实体的时候，忽略了 time 列，代码如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们发现，UPDATE time 部分变成了常量，而不是 VALUES(`time`)，机制如下：</p>\n<p>当 insert 部分中存在的列，在 update 中将以 VALUES(`字段`) 的形式设置；</p>\n<p>当 insert 部分中不存在的列，在 update 中将为常量形式设置，当操作实体数组的时候，此常量为 case when ... end 执行（与 IUpdate 一样）；</p>\n<hr>\n<h2> 7、PostgreSQL 特有功能 On Conflict Do Update</h2>\n<p>FreeSql.Provider.PostgreSQL 支持 PostgreSQL 9.5+ 特有的功能，On Conflict(id) Do Update。</p>\n<p>使用方法 MySql OnDuplicateKeyUpdate 大致相同。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-06T21:41:14.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "新增",
      "url": "https://freesql.net/guide/insert.html",
      "id": "https://freesql.net/guide/insert.html",
      "summary": "FreeSql 提供单条和批量插入数据的方法，在特定的数据库执行还可以返回插入后的记录。 1、单条插入 如果表有自增列，插入数据后应该要返回 id。 方法 1：(原始) 方法 2：(依赖 FreeSql.Repository) 内部会将插入后的自增值填充给 items[0].Id (支持批量插入回填) DbFirst 模式序列：[Column(IsId...",
      "content_html": "<h1> 新增</h1>\n<p><code>FreeSql</code> 提供单条和批量插入数据的方法，在特定的数据库执行还可以返回插入后的记录。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 1、单条插入</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果表有自增列，插入数据后应该要返回 id。</p>\n<p>方法 1：(原始)</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>方法 2：(依赖 FreeSql.Repository)</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>内部会将插入后的自增值填充给 items[0].Id (支持批量插入回填)</p>\n</blockquote>\n<blockquote>\n<p>DbFirst 模式序列：[Column(IsIdentity = true, InsertValueSql = \"seqname.nextval\")]</p>\n</blockquote>\n<h2> 2、批量插入</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>解决了 SqlServer 批量添加容易导致的错误：传入的请求具有过多的参数。该服务器支持最多 2100 个参数。请减少参数的数目，然后重新发送该请求。</p>\n</blockquote>\n<blockquote>\n<p>原理为拆成多个包用事务执行；</p>\n</blockquote>\n<p>当插入大批量数据时，内部采用分割分批执行的逻辑进行。分割规则如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>数量</th>\n<th>参数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql</td>\n<td>5000</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>5000</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>SqlServer</td>\n<td>1000</td>\n<td>2100</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>500</td>\n<td>999</td>\n</tr>\n<tr>\n<td>Sqlite</td>\n<td>5000</td>\n<td>999</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>数量：为每批分割的大小，如批量插入 10000 条数据，在 mysql 执行时会分割为两批。<br>\n参数量：为每批分割的参数量大小，如批量插入 10000 条数据，每行需要使用 5 个参数化，在 mysql 执行时会分割为每批 3000 / 5。</p>\n</blockquote>\n<p>分割执行后，当外部未提供事务时，内部自开事务，实现插入完整性。也可以通过 BatchOptions 设置合适的值。</p>\n<p>FreeSql 适配了每一种数据类型参数化，和不参数化的使用。批量插入建议关闭参数化功能，使用 .NoneParameter() 进行执行。</p>\n<h2> 3、BulkCopy</h2>\n<table>\n<thead>\n<tr>\n<th>程序包</th>\n<th>扩展方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FreeSql.Provider.SqlServer</td>\n<td>ExecuteSqlBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MySqlConnector</td>\n<td>ExecuteMySqlBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Oracle</td>\n<td>ExecuteOracleBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Dameng</td>\n<td>ExecuteDmBulkCopy</td>\n<td>达梦</td>\n</tr>\n<tr>\n<td>FreeSql.Provider.PostgreSQL</td>\n<td>ExecutePgCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.KingbaseES</td>\n<td>ExecuteKdbCopy</td>\n<td>人大金仓</td>\n</tr>\n</tbody>\n</table>\n<p>批量插入测试参考(52 个字段)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>18W</th>\n<th>1W</th>\n<th>5K</th>\n<th>2K</th>\n<th>1K</th>\n<th>500</th>\n<th>100</th>\n<th>50</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql 5.5 ExecuteAffrows</td>\n<td>38,481</td>\n<td>2,234</td>\n<td>1,136</td>\n<td>284</td>\n<td>239</td>\n<td>167</td>\n<td>66</td>\n<td>30</td>\n</tr>\n<tr>\n<td>MySql 5.5 ExecuteMySqlBulkCopy</td>\n<td>28,405</td>\n<td>1,142</td>\n<td>657</td>\n<td>451</td>\n<td>435</td>\n<td>592</td>\n<td>47</td>\n<td>22</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteAffrows</td>\n<td>402,355</td>\n<td>24,847</td>\n<td>11,465</td>\n<td>4,971</td>\n<td>2,437</td>\n<td>915</td>\n<td>138</td>\n<td>88</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteSqlBulkCopy</td>\n<td>21,065</td>\n<td>578</td>\n<td>326</td>\n<td>139</td>\n<td>105</td>\n<td>79</td>\n<td>60</td>\n<td>48</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecuteAffrows</td>\n<td>46,756</td>\n<td>3,294</td>\n<td>2,269</td>\n<td>1,019</td>\n<td>374</td>\n<td>209</td>\n<td>51</td>\n<td>37</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecutePgCopy</td>\n<td>10,090</td>\n<td>583</td>\n<td>337</td>\n<td>136</td>\n<td>88</td>\n<td>61</td>\n<td>30</td>\n<td>25</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>18W 解释：插入 18 万行记录，表格中的数字是执行时间（单位 ms）</p>\n</blockquote>\n<p>批量插入测试参考(10 个字段)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>18W</th>\n<th>1W</th>\n<th>5K</th>\n<th>2K</th>\n<th>1K</th>\n<th>500</th>\n<th>100</th>\n<th>50</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql 5.5 ExecuteAffrows</td>\n<td>11,171</td>\n<td>866</td>\n<td>366</td>\n<td>80</td>\n<td>83</td>\n<td>50</td>\n<td>24</td>\n<td>34</td>\n</tr>\n<tr>\n<td>MySql 5.5 ExecuteMySqlBulkCopy</td>\n<td>6,504</td>\n<td>399</td>\n<td>257</td>\n<td>116</td>\n<td>87</td>\n<td>100</td>\n<td>16</td>\n<td>16</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteAffrows</td>\n<td>47,204</td>\n<td>2,275</td>\n<td>1,108</td>\n<td>488</td>\n<td>279</td>\n<td>123</td>\n<td>35</td>\n<td>16</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteSqlBulkCopy</td>\n<td>4,248</td>\n<td>127</td>\n<td>71</td>\n<td>30</td>\n<td>48</td>\n<td>14</td>\n<td>11</td>\n<td>10</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecuteAffrows</td>\n<td>9,786</td>\n<td>568</td>\n<td>336</td>\n<td>157</td>\n<td>102</td>\n<td>34</td>\n<td>9</td>\n<td>6</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecutePgCopy</td>\n<td>4,081</td>\n<td>167</td>\n<td>93</td>\n<td>39</td>\n<td>21</td>\n<td>12</td>\n<td>4</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>测试结果，是在相同操作系统下进行的，并且都有预热</p>\n</blockquote>\n<h2> 4、动态表名</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 5、插入指定的列</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6、忽略列</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7、列插入优先级</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>在没有使用 <code>InsertColumns/IgnoreColumns</code> 的情况下，实体所有列将被插入数据库；</p>\n<p>在使用 <code>InsertColumns</code>，没有使用 <code>IgnoreColumns</code> 的情况下，只有指定的列插入数据库；</p>\n<p>在使用 <code>IgnoreColumns</code> 的情况下，只有未被指定的列插入数据库；</p>\n<h2> 8、字典插入</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9、导入表数据</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：因为 <code>Clicks</code>、<code>CreateTime</code> 没有被选择，所以使用目标实体属性<code>[Column(InsertValueSql = xx)]</code> 设置的值，或者使用目标实体属性的 <code>c#</code>默认值。</p>\n<h2> 10、MySql 特有功能 <code>Insert Ignore Into</code></h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 11、MySql 特有功能 <code>On Duplicate Key Update</code></h2>\n<p>FreeSql.Provider.MySql 和 FreeSql.Provider.MySqlConnector 支持 MySql 特有的功能，On Duplicate Key Update。</p>\n<p>这个功能也可以实现插入或更新数据，并且支持批量操作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>OnDuplicateKeyUpdate() 之后可以调用的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IgnoreColumns</td>\n<td>忽略更新的列，机制和 IUpdate.IgnoreColumns 一样</td>\n</tr>\n<tr>\n<td>UpdateColumns</td>\n<td>指定更新的列，机制和 IUpdate.UpdateColumns 一样</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>手工指定更新的列，与 IUpdate.Set 功能一样</td>\n</tr>\n<tr>\n<td>SetRaw</td>\n<td>作为 Set 方法的补充，可传入 SQL 字符串</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>执行，返回影响的行数</td>\n</tr>\n</tbody>\n</table>\n<p>IInsert 与 OnDuplicateKeyUpdate 都有 IgnoreColumns、UpdateColumns 方法。</p>\n<p>当插入实体/集合实体的时候，忽略了 time 列，代码如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们发现，UPDATE time 部分变成了常量，而不是 VALUES(`time`)，机制如下：</p>\n<p>当 insert 部分中存在的列，在 update 中将以 VALUES(`字段`) 的形式设置；</p>\n<p>当 insert 部分中不存在的列，在 update 中将为常量形式设置，当操作实体数组的时候，此常量为 case when ... end 执行（与 IUpdate 一样）；</p>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AppendData</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>追加准备插入的实体</td>\n</tr>\n<tr>\n<td>InsertIdentity</td>\n<td>&lt;this&gt;</td>\n<td>无</td>\n<td>指明插入自增列</td>\n</tr>\n<tr>\n<td>InsertColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>只插入的列</td>\n</tr>\n<tr>\n<td>IgnoreColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>忽略的列</td>\n</tr>\n<tr>\n<td>IgnoreInsertValueSql</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>忽略的设置过 InsertValueSql 的列</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>OnDuplicateKeyUpdate</td>\n<td>OnDuplicateKeyUpdate&lt;T1&gt;</td>\n<td>无</td>\n<td>MySql 特有的功能，On Duplicate Key Update</td>\n</tr>\n<tr>\n<td>OnConflictDoUpdate</td>\n<td>OnConflictDoUpdate&lt;T1&gt;</td>\n<td>无</td>\n<td>PostgreSQL 特有的功能，On Conflict Do Update</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回影响的行数</td>\n</tr>\n<tr>\n<td>ExecuteIdentity</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回自增值</td>\n</tr>\n<tr>\n<td>ExecuteInserted</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 语句，返回插入后的记录</td>\n</tr>\n<tr>\n<td>ExecuteSqlBulkCopy</td>\n<td>void</td>\n<td></td>\n<td>SqlServer 特有的功能，执行 SqlBulkCopy 批量插入的封装</td>\n</tr>\n<tr>\n<td>ExecutePgCopy</td>\n<td>void</td>\n<td></td>\n<td>PostgreSQL 特有的功能，执行 Copy 批量导入数据</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-14T11:43:49.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "安装",
      "url": "https://freesql.net/guide/install.html",
      "id": "https://freesql.net/guide/install.html",
      "summary": "版本 FreeSql 是一个 .NET Standard 2.0 库，仅支持 .NET Framework 4.0 或 .NET Core 或更高版本的应用程序。 安装包 需要访问什么数据库，就安装对应的Provider.XX类库，也可直接安装FreeSql.All Packages Package Name Version 说明 NUGET ----...",
      "content_html": "<h1> 安装</h1>\n<h2> 版本</h2>\n<p>FreeSql 是一个 .NET Standard 2.0 库，仅支持 .NET Framework 4.0 或 .NET Core 或更高版本的应用程序。</p>\n<h2> 安装包</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>需要访问什么数据库，就安装对应的Provider.XX类库，也可直接安装FreeSql.All</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> Packages</h2>\n<table>\n<thead>\n<tr>\n<th>Package Name</th>\n<th>Version</th>\n<th>说明</th>\n<th>NUGET</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FreeSql</td>\n<td>netstandard2.0+、net45+、net40+</td>\n<td>freesql基础包</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/repository.html\" target=\"blank\">FreeSql.Repository</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>通用仓储 + UnitOfWork 实现</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Repository\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Repository\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/db-context.html\" target=\"blank\">FreeSql.DbContext</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>EFCore 的使用风格实现</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.DbContext\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.DbContext\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MySql</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>基于 MySql.Data（Oracle 官方）</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.MySql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.MySql\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-provider-mysqlconnector.html\" target=\"blank\">FreeSql.Provider.MySqlConnector</a></td>\n<td>NETStandard2.0、net45</td>\n<td>基于 MySqlConnector</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.MySqlConnector\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.MySqlConnector\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-provider-postgresql.html\" target=\"blank\">FreeSql.Provider.PostgreSQL</a></td>\n<td>NETStandard2.0、net45</td>\n<td>基于 PostgreSQL 9.5+</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.PostgreSQL\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.PostgreSQL\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.SqlServer</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>基于 SqlServer 2005+</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.SqlServer\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.SqlServer\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.SqlServerForSystem</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>基于 System.Data.SqlClient + SqlServer 2005+</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.SqlServerForSystem\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.SqlServerForSystem\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Sqlite</td>\n<td>NETStandard2.0、net45、net40</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Sqlite\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Sqlite\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-provider-sqlitecore.html\" target=\"blank\">FreeSql.Provider.SqliteCore</a></td>\n<td>NETStandard2.0、net6.0</td>\n<td>基于Microsoft.Data.Sqlite.Core，需安装bundle_xxx</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.SqliteCore\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.SqliteCore\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.ClickHouse</td>\n<td>NETStandard2.1</td>\n<td>基于ClickHouse.Client</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.ClickHouse\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.ClickHouse\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-provider-questdb.html\" target=\"blank\">FreeSql.Provider.QuestDb</a></td>\n<td>NETStandard2.0</td>\n<td>基于 Npgsql 和 RestApi</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.QuestDb\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.QuestDb\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Oracle</td>\n<td>NETStandard2.0、net45、net40</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Oracle\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Oracle\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-provider-oracle.html\" target=\"blank\">FreeSql.Provider.OracleOledb</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>基于 Oledb 解决 US7ASCII 中文乱码问题</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.OracleOledb\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.OracleOledb\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Firebird</td>\n<td>NETStandard2.0、net452</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Firebird\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Firebird\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MsAccess</td>\n<td>NETStandard2.0、net45、net40</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.MsAccess\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.MsAccess\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Dameng</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>基于 达梦数据库</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Dameng\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Dameng\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.ShenTong</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>基于 神舟通用数据库</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.ShenTong\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.ShenTong\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.KingbaseES</td>\n<td>NETStandard2.0、net461</td>\n<td>基于 人大金仓数据库</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.KingbaseES\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.KingbaseES\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.GBase</td>\n<td>NETStandard2.0、net461</td>\n<td>基于 南大通用GBase数据库</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.GBase\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.GBase\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Xugu</td>\n<td>NETStandard2.0、net461</td>\n<td>基于 虚谷数据库</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Xugu\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Xugu\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-provider-odbc.html\" target=\"blank\">FreeSql.Provider.Odbc</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>基于 ODBC</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Odbc\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Odbc\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-provider-custom.html\" target=\"blank\">FreeSql.Provider.Custom</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>自定义数据库访问</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Custom\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Custom\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Extensions.LazyLoading</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>延时属性扩展包</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.LazyLoading\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.LazyLoading\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-extensions-jsonmap.html\" target=\"blank\">FreeSql.Extensions.JsonMap</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Json 序列化扩展包</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.JsonMap\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.JsonMap\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Extensions.Linq</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>LinqToSql IQueryable 扩展包</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.Linq\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.Linq\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"/guide/freesql-extensions-baseentity.html\" target=\"blank\">FreeSql.Extensions.BaseEntity</a></td>\n<td>NETStandard2.0</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.BaseEntity\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.BaseEntity\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Generator</td>\n<td>NETCoreapp3.1</td>\n<td>从数据库生成实体类，<a href=\"https://www.cnblogs.com/igeekfan/p/freesql-generator.html\" target=\"_blank\" rel=\"noopener noreferrer\">生成器是如何实现的？</a></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Generator\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Generator\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://buildstats.info/nuget/FreeSql",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-01-14T16:07:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "LinqToSql",
      "url": "https://freesql.net/guide/linq-to-sql.html",
      "id": "https://freesql.net/guide/linq-to-sql.html",
      "summary": "原本不支持 IQueryable 主要出于使用习惯的考虑，编写代码的智能总会提示出现一堆你不想使用的方法（对不起，我有强迫症），IQueryable 自身提供了一堆没法实现的方法，还有外部入侵的扩展方法，严重影响编码体验。如下图： image v1.4.0+ 版本请使用以下命令安装（老版本不需要安装）： dotnet add package FreeS...",
      "content_html": "<h1> LinqToSql</h1>\n<p>原本不支持 IQueryable 主要出于使用习惯的考虑，编写代码的智能总会提示出现一堆你不想使用的方法（对不起，我有强迫症），IQueryable 自身提供了一堆没法实现的方法，还有外部入侵的扩展方法，严重影响编码体验。如下图：</p>\n<figure><img src=\"https://user-images.githubusercontent.com/16286519/57295126-5dd7bd00-70fc-11e9-99c0-d1c46423afa2.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<p>v1.4.0+ 版本请使用以下命令安装（老版本不需要安装）：</p>\n<blockquote>\n<p>dotnet add package FreeSql.Extensions.Linq</p>\n</blockquote>\n<h2> 特别说明</h2>\n<ul>\n<li>\n<p>请尽量不要在 ISelect 模式下的使用 Linq 方法：GroupJoin、Select、SelectMany、Join、DefaultIfEmpty；</p>\n</li>\n<li>\n<p>如果一定要在 ISelect 中使用 .Select() 方法，请务必在 .ToList() 之前调用它；</p>\n</li>\n</ul>\n<h2> IQueryable</h2>\n<p>FreeSql 提供强大的数据查询对象 ISelect。</p>\n<p>FreeSql.Extensions.Linq v1.4.0+ 实现了 IQueryable 查询对象常用功能，以便在各框架中交互使用。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：IQueryable 的实现目前不支持 GroupBy，可以考虑使用 RestoreSelect 方法转回 ISelect 进行查询</p>\n<h2> Where</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Select(指定字段)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> CaseWhen</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Join</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> LeftJoin</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> From(多表查询)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> GroupBy(分组)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "image": "https://user-images.githubusercontent.com/16286519/57295126-5dd7bd00-70fc-11e9-99c0-d1c46423afa2.png",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-05-16T12:50:28.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "你不知道的功能 ✨",
      "url": "https://freesql.net/guide/more.html",
      "id": "https://freesql.net/guide/more.html",
      "summary": "1、备注 -> 迁移到数据库 FreeSql CodeFirst 支持将 c# 代码内的注释，迁移至数据库的备注。先决条件： 1、实体类所在程序集，需要开启 xml 文档功能； 2、xml 文件必须与程序集同目录，且文件名：xxx.dll -> xxx.xml； v1.5.0+ 版本增加了对 Description 特性的解析，优先级低于 c# 代码注...",
      "content_html": "<h1> 你不知道的功能 ✨</h1>\n<h2> 1、备注 -&gt; 迁移到数据库</h2>\n<p>FreeSql CodeFirst 支持将 c# 代码内的注释，迁移至数据库的备注。先决条件：</p>\n<p>1、实体类所在程序集，需要开启 xml 文档功能；</p>\n<p>2、xml 文件必须与程序集同目录，且文件名：xxx.dll -&gt; xxx.xml；</p>\n<blockquote>\n<p>v1.5.0+ 版本增加了对 Description 特性的解析，优先级低于 c# 代码注释；</p>\n</blockquote>\n<hr>\n<h2> 2、NoneParameter</h2>\n<p>这个方法可以设置不使用 参数化 执行 SQL 命令，方便开发调试。</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在 new FreeSqlBuilder().UseNoneParameter(true) 可以全局设置。</p>\n<p>在 单次 IInsert、IUpdate 上使用 NoneParameter() 设置单次生效。</p>\n<hr>\n<h2> 3、添加或修改</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>更多内容可参阅：<a href=\"/guide/insert-or-update.html\" target=\"blank\">添加或修改</a></p>\n</blockquote>\n<hr>\n<h2> 4、弱类型 CURD</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 5、WithSql</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><a href=\"/guide/withsql.html\" target=\"blank\">WithSql</a>使用多次为 UNION ALL 查询</li>\n</ul>\n<blockquote>\n<p>v3.2.666 <a href=\"/guide/unionall.html\" target=\"blank\">UnionAll 联合查询</a>、<a href=\"/guide/withtempquery.html\" target=\"blank\">WithTempQuery + FromQuery 嵌套查询</a></p>\n</blockquote>\n<blockquote>\n<p>v3.2.666 WithMemory 使用内存数据进行查询</p>\n</blockquote>\n<blockquote>\n<p>假设跨数据库服务器，或者数据表被缓存过，WithMemory 便可以实现数据表与内存关联查询。</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 6、你不知道的，指定字段返回</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 7、Dto 映射查询</h2>\n<p>映射查询支持单表/多表，在查询数据之前映射（不是先查询所有字段再到内存映射）</p>\n<p>规则：查找属性名，会循环内部对象 _tables（多表会增长），以 主表优先查，直到查到相同的字段。</p>\n<p>如：</p>\n<p>A, B, C 都有 id，Dto { id, a1, a2, b1, b2 }，A.id 被映射。也可以指定 id = C.id 映射。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>请仔细处理区别，请仔细处理区别，请仔细处理区别</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>GroupBy 所有方法不使用 DTO 映射规则</p>\n</blockquote>\n<p>DTO 查询只映射默认字段（普通属性），映射对象请使用：</p>\n<blockquote>\n<p>导航对象：ToList(a =&gt; new Dto { Catalog = a.Catalog })</p>\n</blockquote>\n<blockquote>\n<p>多表对象：ToList((a, b) =&gt; new Dto { Catalog = b })</p>\n</blockquote>\n<hr>\n<h2> 8、父子关系表</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>ToTreeList 查询数据后加工为树型，注意：实体需要配置父子导航属性</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9、级联加载</h2>\n<p>有设置导航属性关系的（支持一对多、多对多）：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>未设置导航属性关系的，临时指定关系（只支持一对多）：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>只查询每项子集合的前几条数据，避免像 EfCore 加载所有数据导致 IO 性能低下（比如某商品下有 2000 条评论）：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>在 Dto 上做映射 IncludeMany：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查询子集合表的部分字段，避免子集合字段过多的问题：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 10、WhereCascade</h2>\n<p>多表查询时，像 isdeleted 每个表都给条件，挺麻烦的。WhereCascade 使用后生成 sql 时，所有表都附上这个条件。</p>\n<p>如：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>得到的 SQL：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实体可附加表达式时才生效，支持子表查询。单次查询使用的表数目越多收益越大。</p>\n<hr>\n<h2> 11、WhereDynamicFilter</h2>\n<p>ISelect.WhereDynamicFilter 方法实现动态过滤条件（与前端交互），支持的操作符：</p>\n<ul>\n<li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith：包含/不包含，like '%xx%'，或者 like 'xx%'，或者 like '%xx'</li>\n<li>Equal/NotEqual：等于/不等于</li>\n<li>GreaterThan/GreaterThanOrEqual：大于/大于等于</li>\n<li>LessThan/LessThanOrEqual：小于/小于等于</li>\n<li>Range：范围查询</li>\n<li>DateRange：日期范围，有特殊处理 value[1] + 1</li>\n<li>Any/NotAny：是否符合 value 中任何一项（直白的说是 SQL IN）</li>\n<li>Custom：自定义解析</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 12、ISelect.ToDelete、ISelect.ToUpdate</h2>\n<p>默认 IDelete 不支持导航对象，多表关联等。ISelect.ToDelete 可将查询转为删除对象，以便支持导航对象或其他查询功能删除数据，如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>注意：此方法不是将数据查询到内存循环删除，上面的代码产生如下 SQL 执行：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>复杂删除使用该方案的好处：</p>\n<ul>\n<li>删除前可预览测试数据，防止错误删除操作；</li>\n<li>支持更加复杂的删除操作（IDelete 默认只支持简单的操作），甚至在 ISelect 上使用 Limit(10) 将只删除附合条件的前 10 条记录；</li>\n</ul>\n<blockquote>\n<p>ISelect.ToUpdate 操作类似</p>\n</blockquote>\n<hr>\n<h2> 13、保存多对多数据 SaveMany</h2>\n<p>之前：</p>\n<p>FreeSql.DbContext 和 仓储实现，已经实现了联级保存功能，可实现保存对象的时候，将其【OneToMany】、【ManyToMany】导航属性集合也一并保存。</p>\n<p>全局关闭：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>局部关闭：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 导航属性</h3>\n<p>保存实体的指定【一对多】、【多对多】导航属性，SaveMany 方法实现在 BaseRepository、DbContext。</p>\n<p>解决问题：当实体类导航数据过于复杂的时候，选择关闭联级保存的功能是明智之选，但是此时【一对多】、【多对多】数据保存功能写起来非常繁琐麻烦（与现有数据对比后保存）。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>SaveMany【一对多】的机制是完整对比保存。</p>\n<p>SaveMany【多对多】的机制规则与联级保存的一样，如下：</p>\n<p>我们对中间表的保存是完整对比操作，对外部实体的操作只作新增（注意不会更新）</p>\n<ul>\n<li>属性集合为空时，删除他们的所有关联数据（中间表）</li>\n<li>属性集合不为空时，与数据库存在的关联数据（中间表）完全对比，计算出应该删除和添加的记录</li>\n</ul>\n<hr>\n<h2> 14、自定义表达式函数</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>[ExpressionCall] 特性可在静态扩展类上标记，也可以在单个静态方法上标记；</p>\n<table>\n<thead>\n<tr>\n<th>ExpressionCallContext 属性</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataType</td>\n<td>FreeSql.DataType</td>\n<td>用于实现不同数据库的适配判断条件</td>\n</tr>\n<tr>\n<td>ParsedContent</td>\n<td>Dictionary&lt;string, string&gt;</td>\n<td>函数的各参数解析结果</td>\n</tr>\n<tr>\n<td>DbParameter</td>\n<td>DbParameter</td>\n<td>that 被参数化的对象（有可能为 null)</td>\n</tr>\n<tr>\n<td>UserParameters</td>\n<td>List&lt;DbParameter&gt;</td>\n<td>可附加参数化对象</td>\n</tr>\n<tr>\n<td>Result</td>\n<td>string</td>\n<td>返回表达式函数表示的 SQL 字符串</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>当扩展方法返回值为 string 时，其返回值也可以当作 context.Value.Result 设置</p>\n</blockquote>\n<blockquote>\n<p>当不想解析指定参数时，使用特性 [RawValue] 标记</p>\n</blockquote>\n<hr>\n<h2> 15、自定义实体特性、与其他 ORM 共用特性</h2>\n<p>本功能可实现与其他 ORM 使用一套 Attribute，避免维护两份实体特性的烦恼：</p>\n<blockquote>\n<p>v1.4.0+ 已自动识别 EFCore 实体特性 Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h2> 16、审计 CURD</h2>\n<p>如果因为某个 sql 骚操作耗时很高，没有一个相关的审计功能，排查起来可以说无从下手。</p>\n<p>FreeSql 支持简单的类似功能：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>只需要一个事件，就可以对全局起到作用。</p>\n<p>还有一个 CurdBefore 在执行 sql 之前触发，常用于记录日志或开发调试。</p>\n<hr>\n<h2> 17、审计属性值</h2>\n<p>实现插入/更新时统一处理某些值，比如某属性的雪花算法值、创建时间值、甚至是业务值。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当属性的类型是 long，并且标记了 [Snowflake]，并且当前值是 0，那么在插入/更新时它的值将设置为雪花id值。</p>\n<blockquote>\n<p>说明：SnowflakeAttribute 是使用者您来定义，new Snowflake().GetId() 也是由使用者您来实现</p>\n</blockquote>\n<p>如果命名规范，可以在 aop 里判断，if (e.Property.Name == \"createtime\") e.Value = DateTime.Now;</p>\n<blockquote>\n<p>v3.2.666 可设置 e.ObjectAuditBreak = true 中断对象审计，变相实现每个对象只触发一次 AuditValue 事件</p>\n</blockquote>\n<h2> 18、Ado .Net 扩展方法</h2>\n<p>提供了类似 Dapper 的使用方法，FreeSql 增加了 IDbConnection/IDbTransaction 对象的扩展方法 Select/Insert/Update/Delete 实现 CRUD。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>每个 SqlConnection GetFreeSql() 返回的 IFreeSql 实例相同；</li>\n<li>可以对 fsql 设置 Aop 事件，比如监视 SQL；</li>\n<li>IFreeSql 自身的成员 IDbFirst、Transaction 不可用；</li>\n</ul>\n<p>利用本功能可以快速将 FreeSql 使用到项目中，只需要处理好实体类的特性。</p>\n<p>提示：FreeSql 兼容 EFCore 99% 的实体特性</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-03-03T02:37:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "多租户",
      "url": "https://freesql.net/guide/multi-tenancy.html",
      "id": "https://freesql.net/guide/multi-tenancy.html",
      "summary": "什么是多租户 维基百科：“软件多租户是指一种软件架构，在这种软件架构中，软件的一个实例运行在服务器上并且为多个租户服务”。一个租户是一组共享该软件实例特定权限的用户。有了多租户架构，软件应用被设计成为每个租户提供一个 专用的实例包括该实例的数据的共享，还可以共享配置，用户管理，租户自己的功能和非功能属性。多租户和多实例架构相比，多租户分离了代表不同的租...",
      "content_html": "<h1> 多租户</h1>\n<h3> 什么是多租户</h3>\n<p>维基百科：“软件多租户是指一种软件架构，在这种软件架构中，软件的一个实例运行在服务器上并且为多个租户服务”。一个租户是一组共享该软件实例特定权限的用户。有了多租户架构，软件应用被设计成为每个租户提供一个 专用的实例包括该实例的数据的共享，还可以共享配置，用户管理，租户自己的功能和非功能属性。多租户和多实例架构相比，多租户分离了代表不同的租户操作的多个实例。</p>\n<p>多租户用于创建 Saas（Software as-a service）应用（云处理）。</p>\n<h3> 方案一：按租户字段区分</h3>\n<p>第1步：了解 AsyncLocal&lt;int&gt;</p>\n<p>ThreadLocal 可以理解为字典 Dictionary&lt;int, string&gt; Key=线程ID Value=值，跨方法时只需要知道线程ID，就能取得对应的 Value。</p>\n<p>我们知道跨异步方法可能造成线程ID变化，ThreadLocal 将不能满足我们使用。</p>\n<p>AsyncLocal 是 ThreadLocal 的升级版，解决跨异步方法也能获取到对应的 Value。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第2步：FreeSql 全局过滤器，让任何查询/更新/删除，都附带租户条件；</p>\n<p>以下代码若当前没有设置租户值，则过滤器不生效，什么意思？</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第3步：FreeSql Aop.AuditValue 对象审计事件，实现统一拦截插入、更新实体对象；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第4步：AspnetCore Startup.cs Configure 中间件处理租户逻辑；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> WhereCascade</h3>\n<p>多表查询时，像 isdeleted 每个表都给条件，挺麻烦的。WhereCascade 使用后生成 sql 时，所有表都附上这个条件。多表租户条件也可以这样解决。</p>\n<p>如：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>得到的 SQL：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实体可附加表达式时才生效，支持子表查询。单次查询使用的表数目越多收益越大。</p>\n<p>可应用范围：</p>\n<ul>\n<li>子查询，一对多、多对多、自定义的子查询；</li>\n<li>Join 查询，导航属性、自定义的 Join 查询；</li>\n<li>Include/IncludeMany 的子集合查询；</li>\n</ul>\n<blockquote>\n<p>暂时不支持【延时属性】的广播；</p>\n</blockquote>\n<blockquote>\n<p>此功能和【过滤器】不同，用于单次多表查询条件的传播；</p>\n</blockquote>\n<h3> 方案二：按租户分表</h3>\n<p>此方案要求每个租户对应不同的数据表，如 Goods_1、Goods_2、Goods_3 分别对应 租户1、租户2、租户3 的商品表。</p>\n<p>这其实就是一般的分表方案，FreeSql 提供了分表场景的几个 API：</p>\n<ul>\n<li>创建表 fsql.CodeFirst.SyncStructure(typeof(Goods), \"Goods_1\")</li>\n<li>操作表 CURD</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>上面我们得到一个仓储按租户分表，使用它 CURD 最终会操作 Goods_1 表。</p>\n<blockquote>\n<p>更多说明参考：<a href=\"/guide/repository.html\" target=\"blank\">《FreeSql.Repository 仓储》</a>、<a href=\"/guide/sharding.html\" target=\"blank\">《分表分库》</a>。</p>\n</blockquote>\n<h3> 方案三：按租户分库</h3>\n<ul>\n<li>场景1：同数据库实例（未跨服务器），租户间使用不同的数据库名或Schema区分，使用方法与方案二相同；</li>\n<li>场景2：跨服务器分库，本段讲解该场景；</li>\n</ul>\n<p>第1步：FreeSql.Cloud 为 FreeSql 提供跨数据库访问，分布式事务TCC、SAGA解决方案，支持 .NET Core 2.1+, .NET Framework 4.0+.</p>\n<p>原本使用 FreeSqlBuilder 创建 IFreeSql，需要使用 FreeSqlCloud 代替，因为 FreeSqlCloud 也实现了 IFreeSql 接口。</p>\n<blockquote>\n<p>dotnet add package FreeSql.Cloud</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>Install-Package FreeSql.Cloud</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第2步：直接使用 IFreeSql 访问租户数据库</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>临时访问其他数据库表，使用 FreeSqlCloud 对象 Use(\"db3\").Select&lt;T&gt;().ToList()</li>\n<li>主库基础表，应该使用 FreeSqlCloud 对象 EntitySteering 设置固定永久定向到 main，而不需要使用 .Use 手工切换</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-03-03T02:36:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "导航属性 ✨",
      "url": "https://freesql.net/guide/navigate-attribute.html",
      "id": "https://freesql.net/guide/navigate-attribute.html",
      "summary": "FreeSql 提供 OneToMany, ManyToOne, ManyToMany, OneToOne, Parent, PgArrayToMany (https://www.cnblogs.com/FreeSql/p/16351417.html) 六种导航属性关系。 导航属性能干什么？ 《多表查询》 (select-multi-table.md)...",
      "content_html": "<h1> 导航属性 ✨</h1>\n<p>FreeSql 提供 OneToMany, ManyToOne, ManyToMany, OneToOne, Parent, <a href=\"https://www.cnblogs.com/FreeSql/p/16351417.html\" target=\"_blank\" rel=\"noopener noreferrer\">PgArrayToMany</a> 六种导航属性关系。</p>\n<p>导航属性能干什么？</p>\n<ul>\n<li><a href=\"/guide/select-multi-table.html\" target=\"blank\">《多表查询》</a> Where(a =&gt; a.Parent.Parent.Name == \"xx\") Where(a =&gt; a.Childs.Any(b =&gt; b.title == \"xxx\"))</li>\n<li><a href=\"/guide/select-include.html\" target=\"blank\">《贪婪加载》</a> Include/IncludeMany</li>\n<li><a href=\"/guide/select-lazy-loading.html\" target=\"blank\">《延时加载》</a></li>\n<li><a href=\"/guide/select-as-tree.html\" target=\"blank\">《树表查询》</a></li>\n<li><a href=\"/guide/cascade-saving.html\" target=\"blank\">《级联保存》</a></li>\n<li><a href=\"/guide/cascade-delete.html\" target=\"blank\">《级联删除》</a></li>\n<li><a href=\"/guide/aggregateroot.html\" target=\"blank\">《聚合根仓储》</a></li>\n</ul>\n<p>导航属性进行多表查询非常方便，lambda 表达式中直接使用导航对象点点点，舒服！！</p>\n<h2> 自定义配置</h2>\n<p>OneToMany/ManyToMany 支持的类型：ICollection&lt;T&gt;、List&lt;T&gt;、ObservableCollection&lt;T&gt;</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>也可以使用 FluentApi 在外部设置导航关系：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意：</p>\n</blockquote>\n<p>1、属性设置 Column(IsIgnore = true) 后，导航属性会失效</p>\n<p>2、Navigate 设置的字符串是 类属性名，不是表 字段名！！！</p>\n<blockquote>\n<p>预热说明：导航属性配置的加载，因为要解决死循环引用，当相互引用关系很复杂的时候，可能导致首次使用导航属性失败，第二次就可以了。解决办法可以程序启动时就预热所有实体类，循环执行 fsql.Select&lt;object&gt;().AsType(实体类);</p>\n</blockquote>\n<h2> 与非主键关联</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>非主键关联权支持 OneToMany/ManyToOne 两种关系，并且只能在查询的时候有效。（不支持级联保存、级联删除）</p>\n<h2> 检测导航属性</h2>\n<p>如何检测一个导航属性是否有效：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>GetTableRef(string propertyName, bool isThrow);</p>\n<h2> OneToOne</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>一对一，要求两边都使用 Navigate 特性与自身的【主键】关联。（支持级联保存，级联删除）</p>\n<h2> PgArrayToMany</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>更多资料：<a href=\"https://github.com/dotnetcore/FreeSql/issues/1145\" target=\"_blank\" rel=\"noopener noreferrer\">#1145</a></p>\n<h2> 约定命名（无须指明 Navigate）</h2>\n<p>提示：本节内容稍微了解即可，不是必须掌握的，可以跳过。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-09-04T07:47:33.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "分页查询",
      "url": "https://freesql.net/guide/paging.html",
      "id": "https://freesql.net/guide/paging.html",
      "summary": "每页 20 条数据，查询第 1 页 Count(out var total) 是同步方法，原因是 out 不支持异步，如果介意可以单独执行如下： 提示：数据量大一般不建议查 Count/CountAsync，而应该采用流式分页（上一页、下一页、不返回总数量） BasePagingInfo是提供的分页类,PageNumber,`PageSize,Coun...",
      "content_html": "<h1> 分页查询</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 每页 20 条数据，查询第 1 页</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Count(out var total) 是同步方法，原因是 out 不支持异步，如果介意可以单独执行如下：</p>\n</blockquote>\n<p>提示：数据量大一般不建议查 Count/CountAsync，而应该采用流式分页（上一页、下一页、不返回总数量）</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>BasePagingInfo</code>是提供的分页类,<code>PageNumber</code>,<code>PageSize</code>,<code>Count</code>，如下内容，<code>.Page(page)</code>后，<code>page.Count</code>就有统计值了</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 优化</h2>\n<p>SqlServer 2012 以前的版本，使用 row_number 分页；</p>\n<p>SqlServer 2012+ 版本，使用最新的 fetch next rows 分页；</p>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 查询，返回 T1 实体所有字段的记录，若存在导航属性则一起查询返回，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>执行 SQL 查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>执行 SQL 查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>【分页】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>long</td>\n<td></td>\n<td>查询的记录数量</td>\n</tr>\n<tr>\n<td>Count</td>\n<td>&lt;this&gt;</td>\n<td>out long</td>\n<td>查询的记录数量，以参数 out 形式返回</td>\n</tr>\n<tr>\n<td>Skip</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>查询向后偏移行数</td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>查询向后偏移行数</td>\n</tr>\n<tr>\n<td>Limit</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>查询多少条数据</td>\n</tr>\n<tr>\n<td>Take</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>查询多少条数据</td>\n</tr>\n<tr>\n<td>Page</td>\n<td>&lt;this&gt;</td>\n<td>int pageIndex, int pageSize</td>\n<td>分页</td>\n</tr>\n<tr>\n<td>Page</td>\n<td>&lt;this&gt;</td>\n<td>BasePagingInfo(int PageNumber,int PageSize,long Count )</td>\n<td>分页,并且求Count和</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-26T07:44:55.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "性能",
      "url": "https://freesql.net/guide/performance.html",
      "id": "https://freesql.net/guide/performance.html",
      "summary": "FreeSql 实现了强大功能的同时，性能没有受到影响，项目中使用反射或耗时的操作都经过了缓存处理。读取数据部分采用了 ExpressionTree，使得 FreeSql 解析实体数据的速度与 Dapper 非常接近。 测试结果(52 个字段) 18W 1W 5K 2K 1K 500 100 50 ---------------------------...",
      "content_html": "<h1> 性能</h1>\n<p>FreeSql 实现了强大功能的同时，性能没有受到影响，项目中使用反射或耗时的操作都经过了缓存处理。读取数据部分采用了 ExpressionTree，使得 FreeSql 解析实体数据的速度与 Dapper 非常接近。</p>\n<h1> 插入测试</h1>\n<h3> 测试结果(52 个字段)</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>18W</th>\n<th>1W</th>\n<th>5K</th>\n<th>2K</th>\n<th>1K</th>\n<th>500</th>\n<th>100</th>\n<th>50</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql 5.5 ExecuteAffrows</td>\n<td>38,481</td>\n<td>2,234</td>\n<td>1,136</td>\n<td>284</td>\n<td>239</td>\n<td>167</td>\n<td>66</td>\n<td>30</td>\n</tr>\n<tr>\n<td>MySql 5.5 ExecuteMySqlBulkCopy</td>\n<td>28,405</td>\n<td>1,142</td>\n<td>657</td>\n<td>451</td>\n<td>435</td>\n<td>592</td>\n<td>47</td>\n<td>22</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteAffrows</td>\n<td>402,355</td>\n<td>24,847</td>\n<td>11,465</td>\n<td>4,971</td>\n<td>2,437</td>\n<td>915</td>\n<td>138</td>\n<td>88</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteSqlBulkCopy</td>\n<td>21,065</td>\n<td>578</td>\n<td>326</td>\n<td>139</td>\n<td>105</td>\n<td>79</td>\n<td>60</td>\n<td>48</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecuteAffrows</td>\n<td>46,756</td>\n<td>3,294</td>\n<td>2,269</td>\n<td>1,019</td>\n<td>374</td>\n<td>209</td>\n<td>51</td>\n<td>37</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecutePgCopy</td>\n<td>10,090</td>\n<td>583</td>\n<td>337</td>\n<td>136</td>\n<td>88</td>\n<td>61</td>\n<td>30</td>\n<td>25</td>\n</tr>\n<tr>\n<td>Oracle XE ExecuteAffrows</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>24,528</td>\n<td>10,648</td>\n<td>571</td>\n<td>200</td>\n</tr>\n<tr>\n<td>Sqlite ExecuteAffrows</td>\n<td>28,554</td>\n<td>1,149</td>\n<td>701</td>\n<td>327</td>\n<td>155</td>\n<td>91</td>\n<td>44</td>\n<td>35</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>18W 解释：插入 18 万行记录，表格中的数字是执行时间（单位 ms）</p>\n</blockquote>\n<blockquote>\n<p>Oracle 插入性能不用怀疑，可能安装学生版限制较大</p>\n</blockquote>\n<p>提醒：开源数据库测试结果比较有意义，商业数据库版本之间性能可能有较大差距</p>\n<h3> 测试结果(10 个字段)</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>18W</th>\n<th>1W</th>\n<th>5K</th>\n<th>2K</th>\n<th>1K</th>\n<th>500</th>\n<th>100</th>\n<th>50</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql 5.5 ExecuteAffrows</td>\n<td>11,171</td>\n<td>866</td>\n<td>366</td>\n<td>80</td>\n<td>83</td>\n<td>50</td>\n<td>24</td>\n<td>34</td>\n</tr>\n<tr>\n<td>MySql 5.5 ExecuteMySqlBulkCopy</td>\n<td>6,504</td>\n<td>399</td>\n<td>257</td>\n<td>116</td>\n<td>87</td>\n<td>100</td>\n<td>16</td>\n<td>16</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteAffrows</td>\n<td>47,204</td>\n<td>2,275</td>\n<td>1,108</td>\n<td>488</td>\n<td>279</td>\n<td>123</td>\n<td>35</td>\n<td>16</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteSqlBulkCopy</td>\n<td>4,248</td>\n<td>127</td>\n<td>71</td>\n<td>30</td>\n<td>48</td>\n<td>14</td>\n<td>11</td>\n<td>10</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecuteAffrows</td>\n<td>9,786</td>\n<td>568</td>\n<td>336</td>\n<td>157</td>\n<td>102</td>\n<td>34</td>\n<td>9</td>\n<td>6</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecutePgCopy</td>\n<td>4,081</td>\n<td>167</td>\n<td>93</td>\n<td>39</td>\n<td>21</td>\n<td>12</td>\n<td>4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>Oracle XE ExecuteAffrows</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>2,394</td>\n<td>731</td>\n<td>67</td>\n<td>33</td>\n</tr>\n<tr>\n<td>Sqlite ExecuteAffrows</td>\n<td>4,524</td>\n<td>246</td>\n<td>137</td>\n<td>94</td>\n<td>35</td>\n<td>19</td>\n<td>14</td>\n<td>11</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>测试结果，是在相同操作系统下进行的，并且都有预热</p>\n</blockquote>\n<blockquote>\n<p>ExecuteMySqlBulkCopy 方法在 FreeSql.Provider.MySqlConnector 中实现的</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> 查询测试</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>测试方法：运行两次，以第二次性能报告，避免了首个运行慢不公平的情况。</p>\n<h3> 测试结果</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>数量</th>\n<th>Query&lt;Class&gt;</th>\n<th>Query&lt;Tuple&gt;</th>\n<th>Query&lt;dynamic&gt;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dapper.Query(sql)</td>\n<td>131072</td>\n<td>623.4959ms</td>\n<td>424.2411ms</td>\n<td>644.8897ms</td>\n</tr>\n<tr>\n<td>FreeSql.Query(sql)</td>\n<td>131072</td>\n<td>647.0552ms</td>\n<td>577.3532ms</td>\n<td>944.7454ms</td>\n</tr>\n<tr>\n<td>FreeSql.ToList</td>\n<td>131072</td>\n<td>622.8980ms</td>\n<td>435.3532ms</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>FreeSql 以微小的性能差距输了，原因是支持了更多的类型，某些类型解析需要 Parse、递归或循环处理。</p>\n<blockquote>\n<p>由于 Dapper 没有批量插入/更新/删除的功能，并且都是执行一条 SQL 命令，测试结果没有意义。</p>\n</blockquote>\n<blockquote>\n<p>FreeSql 批量插入使用的命令：INSERT INTO Song (...) VALUES(...),VALUES(...),VALUES(...)...</p>\n</blockquote>\n<h3> 执行 SQL 返回实体列表 Dapper.Query&lt;Class&gt; VS FreeSql.Query&lt;Class&gt;</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 执行 SQL 返回元组列表 Dapper.Query&lt;Tuple&gt; VS FreeSql.Query&lt;Tuple&gt;</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 执行 SQL 返回 dynamic 列表 Dapper.Query&lt;dynamic&gt; VS FreeSql.Query&lt;dynamic&gt;</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Dapper.Query VS FreeSql.ToList</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>更多测试源码：FreeSql/FreeSql.Tests.PerformanceTests/MySqlAdoTest.cs</p>\n</blockquote>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-05-16T12:50:28.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "读写分离",
      "url": "https://freesql.net/guide/read-write-splitting.html",
      "id": "https://freesql.net/guide/read-write-splitting.html",
      "summary": "FreeSql 支持数据库读写分离，本功能是客户端的读写分离行为，数据库服务器该怎么配置仍然那样配置，不受本功能影响，为了方便描述后面讲到的【读写分离】都是指客户端的功能支持。 各种数据库的读写方案不一，数据库端开启读写分离功能后，读写分离的实现大致分为以下几种： 1、nginx 代理，配置繁琐且容易出错； 2、中件间，如 MyCat； 3、在 cli...",
      "content_html": "<h1> 读写分离</h1>\n<p>FreeSql 支持数据库读写分离，本功能是客户端的读写分离行为，数据库服务器该怎么配置仍然那样配置，不受本功能影响，为了方便描述后面讲到的【读写分离】都是指客户端的功能支持。</p>\n<p>各种数据库的读写方案不一，数据库端开启读写分离功能后，读写分离的实现大致分为以下几种：</p>\n<p>1、nginx 代理，配置繁琐且容易出错；</p>\n<p>2、中件间，如 MyCat；</p>\n<p>3、在 client 端支持；</p>\n<p>FreeSql 实现了第 3 种方案，支持一个【主库】多个【从库】，【从库】的查询策略为随机方式。</p>\n<p>若某【从库】发生故障，将切换到其他可用【从库】，若已全部不可用则使用【主库】查询。</p>\n<p>出现故障【从库】被隔离起来间隔性的检查可用状态，以待恢复。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-03-17T08:02:46.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "仓储",
      "url": "https://freesql.net/guide/repository.html",
      "id": "https://freesql.net/guide/repository.html",
      "summary": "FreeSql.Repository 实现了通用仓储层功能。FreeSql.Repository 参考 abp vnext 接口规范，实现仓储层（CURD）。 特性 Select/Attach 快照对象，Update 只更新变化的字段；; Insert 插入数据，适配各数据库优化执行 ExecuteAffrows/ExecuteIdentity/Exe...",
      "content_html": "<p><code>FreeSql.Repository</code> 实现了通用仓储层功能。FreeSql.Repository 参考 abp vnext 接口规范，实现仓储层（CURD）。</p>\n<h2> 特性</h2>\n<ul>\n<li>Select/Attach 快照对象，Update 只更新变化的字段；</li>\n<li>Insert 插入数据，适配各数据库优化执行 ExecuteAffrows/ExecuteIdentity/ExecuteInserted；</li>\n<li>InsertOrUpdate 插入或更新；</li>\n<li>SaveMany 方法快速保存导航对象（一对多、多对多）；</li>\n</ul>\n<h2> 安装</h2>\n\n<h2> 定义</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 使用方法</h2>\n<p>方法 1、IFreeSql 的扩展方法；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意：Repository 对象多线程不安全,因此不应在多个线程上同时对其执行工作。</p>\n</blockquote>\n<ul>\n<li>不支持从不同的线程同时使用同一仓储实例</li>\n<li>通过GetRepository相当于直接new DefaultRepository&lt;TEntity, int&gt;，每次调用都会创建一个新的实例,.NET Core中不建议使用</li>\n</ul>\n<p>方法 2、继承实现；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>方法 3、依赖注入；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>依赖注入的方式可实现全局【过滤与验证】的设定，方便租户功能的设计；</p>\n</blockquote>\n<p>更多资料：<a href=\"/guide/filters.html\" target=\"blank\">《过滤器、全局过滤器》</a></p>\n<h2> 状态管理</h2>\n<p>只更新变化的属性：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>是不是觉得先查询再更新，啰嗦？</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>repo.CompareState(item) 可获取 item 的状态变化信息</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Ioc + 登陆信息</h2>\n<p>repo.DbContextOptions.AuditValue 适合与 Ioc AddScoped 信息结合。</p>\n<p>如下示例：使用仓储插入/更新时自动使用登陆信息</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 过滤与验证</h2>\n<p>假设我们有 User(用户)、Topic(主题)两个实体，定义了两个仓储：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在开发过程中，总是担心 topicRepository 的数据安全问题，即有可能查询或操作到其他用户的主题。因此我们在 v0.0.7 版本增加了 filter lambda 表达式参数。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>在查询/修改/删除时附加此条件，从而达到不会修改其他用户的数据；</li>\n<li>在添加时，使用表达式验证数据的合法性，若不合法则抛出异常；</li>\n</ul>\n<h2> 分表与分库</h2>\n<p>FreeSql 提供 AsTable 分表的基础方法，GuidRepository 作为分存式仓储将实现了分表与分库（不支持跨服务器分库）的封装。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>上面我们得到一个日志仓储按年月分表，使用它 CURD 最终会操作 Log_201903 表。</p>\n<p>注意事项：</p>\n<ul>\n<li>v0.11.12 以后的版本可以使用 CodeFirst 迁移分表；</li>\n<li>不可在分表分库的实体类型中使用《延时加载》；</li>\n</ul>\n<p>更多请移步<a href=\"/guide/sharding.html\" target=\"blank\">《分表分库》</a></p>\n<h2> 兼容问题</h2>\n<p>SqlServer 提供的 output inserted 特性，在表使用了自增或数据库定义了默认值的时候，使用它可以快速将 insert 的数据返回。PostgreSQL 也有相应的功能，如此方便但不是每个数据库都支持。</p>\n<p>当采用了不支持该特性的数据库（Sqlite/MySql/Oracle/达梦/南大通用/MsAccess），并且实体使用了自增属性，仓储批量插入将变为逐条执行，可以考虑以下改进：</p>\n<ul>\n<li>使用 uuid 作为主键（即 Guid）；</li>\n<li>避免使用数据库的默认值功能；</li>\n</ul>\n<h2> 联级保存</h2>\n<p>请移步文档 <a href=\"/guide/cascade-saving.html\" target=\"blank\">《联级保存》</a></p>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EntityType</td>\n<td>Type</td>\n<td>仓储正在操作的实体类型，注意它不一定是 TEntity</td>\n</tr>\n<tr>\n<td>UnitOfWork</td>\n<td>IUnitOfWork</td>\n<td>正在使用的工作单元</td>\n</tr>\n<tr>\n<td>Orm</td>\n<td>IFreeSql</td>\n<td>正在使用的 Orm</td>\n</tr>\n<tr>\n<td>DbContextOptions</td>\n<td>DbContextOptions</td>\n<td>正在使用的 DbContext 设置，修改设置不影响其他</td>\n</tr>\n<tr>\n<td>DataFilter</td>\n<td>IDataFilter&lt;TEntity&gt;</td>\n<td>仓储过滤器，本对象内生效</td>\n</tr>\n<tr>\n<td>UpdateDiy</td>\n<td>IUpdate&lt;TEntity&gt;</td>\n<td>准备更新数据，与仓储同事务</td>\n</tr>\n<tr>\n<td>Select</td>\n<td>ISelect&lt;TEntity&gt;</td>\n<td>准备查询数据</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AsType</td>\n<td>void</td>\n<td>Type</td>\n<td>改变仓储正在操作的实体类型</td>\n</tr>\n<tr>\n<td>Get</td>\n<td>TEntity</td>\n<td>TKey</td>\n<td>根据主键，查询数据</td>\n</tr>\n<tr>\n<td>Find</td>\n<td>TEntity</td>\n<td>TKey</td>\n<td>根据主键，查询数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>TKey</td>\n<td>根据主键删除数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>Lambda</td>\n<td>根据 lambda 条件删除数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>TEntity</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量删除数据</td>\n</tr>\n<tr>\n<td><a href=\"https://freesql.net/guide/cascade-delete.html\" target=\"_blank\" rel=\"noopener noreferrer\">DeleteCascadeByDatabase</a></td>\n<td>List&lt;object&gt;</td>\n<td>Lambda</td>\n<td>根据导航属性递归数据库删除数据</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>-</td>\n<td>TEntity</td>\n<td>插入数据，若实体有自增列，插入后的自增值会填充到实体中</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量插入数据</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>-</td>\n<td>TEntity</td>\n<td>更新数据</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量更新数据</td>\n</tr>\n<tr>\n<td>InsertOrUpdate</td>\n<td>-</td>\n<td>TEntity</td>\n<td>插入或更新数据</td>\n</tr>\n<tr>\n<td>FlushState</td>\n<td>-</td>\n<td>无</td>\n<td>清除状态管理数据</td>\n</tr>\n<tr>\n<td>Attach</td>\n<td>-</td>\n<td>TEntity</td>\n<td>附加实体到状态管理，可用于不查询就更新或删除</td>\n</tr>\n<tr>\n<td>Attach</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量附加实体到状态管理</td>\n</tr>\n<tr>\n<td>AttachOnlyPrimary</td>\n<td>-</td>\n<td>TEntity</td>\n<td>只附加实体的主键数据到状态管理</td>\n</tr>\n<tr>\n<td><a href=\"/guide/cascade-saving.html\" target=\"blank\">SaveMany</a></td>\n<td>-</td>\n<td>TEntity, string</td>\n<td>保存实体的指定 ManyToMany/OneToMany 导航属性（完整对比）</td>\n</tr>\n<tr>\n<td><a href=\"/guide/insert-or-update.html#_5%E3%80%81beginedit-%E6%89%B9%E9%87%8F%E7%BC%96%E8%BE%91\" target=\"blank\">BeginEdit</a></td>\n<td>-</td>\n<td>List&lt;TEntity&gt;</td>\n<td>准备编辑一个 List 实体</td>\n</tr>\n<tr>\n<td>EndEdit</td>\n<td>int</td>\n<td>无</td>\n<td>完成编辑数据，进行保存动作</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>状态管理，可实现 Update 只更新变化的字段（不更新所有字段），灵活使用 Attach 和 Update 用起来非常舒服。</p>\n</blockquote>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-04-07T13:58:42.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "树型查询 ✨",
      "url": "https://freesql.net/guide/select-as-tree.html",
      "id": "https://freesql.net/guide/select-as-tree.html",
      "summary": "无限级分类（父子）是一种比较常用的表设计，每种设计方式突出优势的同时也带来缺陷，如： 方法 1：表设计中只有 parent_id 字段，困扰：查询麻烦（本文可解决）；; 方法 2：表设计中冗余子级 id 便于查询，困扰：添加/更新/删除的时候需要重新计算；; 方法 3：表设计中存储左右值编码，困扰：同上；; 方法 1 设计最简单，本文解决它的递归查询问...",
      "content_html": "<h1> 树型查询 ✨</h1>\n<p>无限级分类（父子）是一种比较常用的表设计，每种设计方式突出优势的同时也带来缺陷，如：</p>\n<ul>\n<li>方法 1：表设计中只有 parent_id 字段，困扰：查询麻烦（本文可解决）；</li>\n<li>方法 2：表设计中冗余子级 id 便于查询，困扰：添加/更新/删除的时候需要重新计算；</li>\n<li>方法 3：表设计中存储左右值编码，困扰：同上；</li>\n</ul>\n<p>方法 1 设计最简单，本文解决它的递归查询问题，让使用透明化。</p>\n<h2> 父子导航属性</h2>\n<p>FreeSql 导航属性之中，有针对父子关系的设置方式，如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>定义 Parent 属性，在表达式中可以这样：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>定义 Childs 属性，在表达式中可以这样（子查询）：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>定义 Childs 属性，还可以使用【级联保存】、【贪婪加载】等等操作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 1、ToTreeList</h2>\n<p>配置好父子属性之后，就可以这样用了：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查询数据本来是平面的，ToTreeList 方法将返回的平面数据在内存中加工为树型 List 返回。</p>\n<h2> 2、AsTreeCte 递归删除</h2>\n<p>MySql连接字符串需要增加 <code>Allow User Variables=True</code>，否则会有<code>MySqlException Parameter '@cte ids' must be defined</code></p>\n<p>很常见的无限级分类表功能，删除树节点时，把子节点也处理一下。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果软删除：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3、AsTreeCte 递归查询</h2>\n<p>若不做数据冗余的无限级分类表设计，递归查询少不了，AsTreeCte 正是解决递归查询的封装，方法参数说明：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(可选) pathSelector</td>\n<td>路径内容选择，可以设置查询返回：中国 -&gt; 北京 -&gt; 东城区</td>\n</tr>\n<tr>\n<td>(可选) up</td>\n<td>false(默认)：由父级向子级的递归查询，true：由子级向父级的递归查询</td>\n</tr>\n<tr>\n<td>(可选) pathSeparator</td>\n<td>设置 pathSelector 的连接符，默认：-&gt;</td>\n</tr>\n<tr>\n<td>(可选) level</td>\n<td>设置递归层级</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>通过测试的数据库：MySql8.0、SqlServer、PostgreSQL、Oracle、Sqlite、Firebird、达梦、人大金仓、南大通用、翰高</p>\n</blockquote>\n<p>姿势一：AsTreeCte() + ToTreeList</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>姿势二：AsTreeCte() + ToList</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>姿势三：AsTreeCte(pathSelector) + ToList</p>\n<p>设置 pathSelector 参数后，如何返回隐藏字段？</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>更多姿势...请根据代码注释进行尝试</p>\n</blockquote>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-09-30T02:15:32.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "分组聚合",
      "url": "https://freesql.net/guide/select-group-by.html",
      "id": "https://freesql.net/guide/select-group-by.html",
      "summary": "GroupBy分组聚合 不分组求聚合值，请使用 ToAggregate 替代 ToList 导航属性分组 假如 Topic 有导航属性 Category，Category 又有导航属性 Area，导航属性分组代码如下： 注意：如上这样编写，会报错无法解析 a.Key.Category.Area.Name，解决办法使用 Include： 但是，你还可以这...",
      "content_html": "<h1> 分组聚合</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> GroupBy分组聚合</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>不分组求聚合值，请使用 ToAggregate 替代 ToList</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 导航属性分组</h2>\n<p>假如 Topic 有导航属性 Category，Category 又有导航属性 Area，导航属性分组代码如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：如上这样编写，会报错无法解析 a.Key.Category.Area.Name，解决办法使用 Include：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是，你还可以这样解决：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 多表分组</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>g.Value.Item1 对应 Topic</li>\n<li>g.Value.Item2 对应 Category</li>\n<li>g.Value.Item3 对应 Area</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>说明</th>\n<th>方法</th>\n<th>SQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>总数</td>\n<td>.Count()</td>\n<td>select count(*) from ...</td>\n</tr>\n<tr>\n<td>求和</td>\n<td>.Sum(a =&gt; a.Score)</td>\n<td>select sum([Score]) from ...</td>\n</tr>\n<tr>\n<td>平均</td>\n<td>.Avg(a =&gt; a.Score)</td>\n<td>select avg([Score]) from ...</td>\n</tr>\n<tr>\n<td>最大值</td>\n<td>.Max(a =&gt; a.Score)</td>\n<td>select max([Score]) from ...</td>\n</tr>\n<tr>\n<td>最小值</td>\n<td>.Min(a =&gt; a.Score)</td>\n<td>select min([Score]) from ...</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>lambda</th>\n<th>sql</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SqlExt.IsNull(id, 0)</td>\n<td>isnull/ifnull/coalesce/nvl</td>\n<td>兼容各大数据库</td>\n</tr>\n<tr>\n<td>SqlExt.DistinctCount(id)</td>\n<td>count(distinct id)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.GreaterThan</td>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>SqlExt.GreaterThanOrEqual</td>\n<td>&gt;=</td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td>SqlExt.LessThan</td>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>SqlExt.LessThanOrEqual</td>\n<td>&lt;=</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>SqlExt.EqualIsNull</td>\n<td>IS NULL</td>\n<td>是否为 NULL</td>\n</tr>\n<tr>\n<td>SqlExt.Case(字典)</td>\n<td>case when .. end</td>\n<td>根据字典 case</td>\n</tr>\n<tr>\n<td>SqlExt.GroupConcat</td>\n<td>group_concat(distinct .. order by .. separator ..)</td>\n<td>MySql</td>\n</tr>\n<tr>\n<td>SqlExt.FindInSet</td>\n<td>find_in_set(str, strlist)</td>\n<td>MySql</td>\n</tr>\n<tr>\n<td>SqlExt.StringAgg</td>\n<td>string_agg(.., ..)</td>\n<td>PostgreSQL</td>\n</tr>\n<tr>\n<td>SqlExt.Rank().Over().PartitionBy().ToValue()</td>\n<td>rank() over(partition by xx)</td>\n<td>开窗函数</td>\n</tr>\n<tr>\n<td>SqlExt.DenseRank().Over().PartitionBy().ToValue()</td>\n<td>dense_rank() over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Count(id).Over().PartitionBy().ToValue()</td>\n<td>count(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Sum(id).Over().PartitionBy().ToValue()</td>\n<td>sum(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Avg(id).Over().PartitionBy().ToValue()</td>\n<td>avg(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Max(id).Over().PartitionBy().ToValue()</td>\n<td>max(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.Min(id).Over().PartitionBy().ToValue()</td>\n<td>min(id) over(partition by xx)</td>\n<td></td>\n</tr>\n<tr>\n<td>SqlExt.RowNumber(id).Over().PartitionBy().ToValue()</td>\n<td>row_number(id) over(partition by xx)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2> 查询分组第一条记录</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：支持多表嵌套查询，fsql.Select&lt;User1, UserGroup1&gt;()</p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果数据库不支持开窗函数，可以使用分组嵌套查询解决：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>查看更多<a href=\"/guide/withtempquery.html\" target=\"blank\">《嵌套查询》</a>文档</p>\n</blockquote>\n<h2> Aggregate</h2>\n<h3> Distinct</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>SELECT count(distinct title) as1\nFROM \"Topic\" a</p>\n</blockquote>\n<blockquote>\n<p>SELECT a.\"Id\", a.\"Clicks\", a.\"Title\", a.\"CreateTime\"\nFROM \"Topic\" a</p>\n</blockquote>\n<h3> SqlExt.DistinctCount</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>SELECT count(distinct a.\"title\") as1 FROM \"Topic\" a</p>\n</blockquote>\n<h3> ToAggregate + SqlExt.DistinctCount</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>SELECT count(distinct a.\"Title\") as1, count(distinct a.\"Clicks\") as2\nFROM \"Topic\" a</p>\n</blockquote>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>执行 SQL 查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>执行 SQL 查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>ToAggregate&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>执行 SQL 查询，返回指定字段的聚合结果（适合不需要 GroupBy 的场景）</td>\n</tr>\n<tr>\n<td>Sum</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求和</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最小值</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最大值</td>\n</tr>\n<tr>\n<td>Avg</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求平均值</td>\n</tr>\n<tr>\n<td>【分组】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按选择的列分组，GroupBy(a =&gt; a.Name)</td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生sql语法分组，GroupBy(\"concat(name, @cc)\", new { cc = 1 })</td>\n</tr>\n<tr>\n<td>Having</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生sql语法聚合条件过滤，Having(\"count(name) = @cc\", new { cc = 1 })</td>\n</tr>\n<tr>\n<td>【成员】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Key</td>\n<td></td>\n<td></td>\n<td>返回 GroupBy 选择的对象</td>\n</tr>\n<tr>\n<td>Value</td>\n<td></td>\n<td></td>\n<td>返回主表 或 From&lt;T2,T3....&gt; 的字段选择器</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-28T11:10:28.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "贪婪加载 ✨",
      "url": "https://freesql.net/guide/select-include.html",
      "id": "https://freesql.net/guide/select-include.html",
      "summary": "1、导航属性 ManyToOne ManyToOne 导航属性通过 ToList(includeNestedMembers: false) 加载，参数说明： false: 返回 2 级 Join 的导航数据（默认）； true: 返回所有层级深度 Join 的导航数据（未使用的导航数据不会返回）； 2、导航属性 OneToMany/ManyToMany...",
      "content_html": "<h1> 贪婪加载 ✨</h1>\n<h2> 1、导航属性 ManyToOne</h2>\n<p>ManyToOne 导航属性通过 ToList(includeNestedMembers: false) 加载，参数说明：</p>\n<p>false: 返回 2 级 Join 的导航数据（默认）；</p>\n<p>true: 返回所有层级深度 Join 的导航数据（未使用的导航数据不会返回）；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2、导航属性 OneToMany/ManyToMany/PgArrayToMany</h2>\n<p>IncludeMany 贪婪加载集合的导航属性，其实是分两次查询，在 ToList 后进行了数据重装。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>IncludeMany 有第二个参数，可以进行二次查询前的修饰工作。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其实在 then 那里，还可以继续进行向下 Include/IncludeMany。只要你喜欢，向下 100 层也没问题。</p>\n<h2> 3、变异</h2>\n<p>没有配置导航关系，也可以贪婪加载。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>只查询每项子集合的前几条数据，避免像 EfCore 加载所有数据导致 IO 性能低下（比如某商品下有 2000 条评论）。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>子集合返回部分字段，避免字段过多的问题。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 4、IncludeMany 扩展方法</h2>\n<p>当主数据已存在内存中，子数据怎么加载？所以我们增加了 List&lt;T&gt; 扩展方法，示例如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5、子表ToList</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6、IncludeMany 两种方式对比</h2>\n<p>方式一（IncludeMany 扩展方法）：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>方式二（直接 IncludeMany + ToList）：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>案例：查询 Vod 表，分类 1、分类 2、分类 3 各 10 条数据</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-03-03T08:07:30.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "延时加载",
      "url": "https://freesql.net/guide/select-lazy-loading.html",
      "id": "https://freesql.net/guide/select-lazy-loading.html",
      "summary": "FreeSql 支持导航属性延时加载，即当我们需要用到的时候才进行加载（读取），支持 1 对 1、多对 1、1 对多、多对多关系的导航属性。 当我们希望浏览某条订单信息的时候，才显示其对应的订单详细记录时，我们希望使用延迟加载来实现，这样不仅加快的了 读取的效率，同时也避免加载不需要的数据。延迟加载通常用于 foreach 循环读取数据时。 那么我们在...",
      "content_html": "<h1> 延时加载</h1>\n<p>FreeSql 支持导航属性延时加载，即当我们需要用到的时候才进行加载（读取），支持 1 对 1、多对 1、1 对多、多对多关系的导航属性。</p>\n<p>当我们希望浏览某条订单信息的时候，才显示其对应的订单详细记录时，我们希望使用延迟加载来实现，这样不仅加快的了 读取的效率，同时也避免加载不需要的数据。延迟加载通常用于 foreach 循环读取数据时。</p>\n<p>那么我们在定义 Model 的时候，需要在属性前面添加 virtual 关键字。如下</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>延时加载功能默认被关闭的，使用此功能之前，请在声明处开启；</p>\n</blockquote>\n<blockquote>\n<p>延时加载功能，依赖 FreeSql.Extensions.LazyLoading 包，请前往 nuget 下载；</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>控制台输出内容：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>FreeSql 延时加载支持 1 对 1、多对 1、1 对多、多对多关系的导航属性，前三者大小同异，以下我们单独介绍多对多关系。</p>\n<h2> 多对多延时加载</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如上有三个表，音乐、标签，以及他们的关系表。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>控制台输出内容：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>优点：只在需要的时候加载数据，不需要预先计划，避免了各种复杂的外连接、索引、视图操作带来的低效率问题。</p>\n<p>缺陷：多次与 DB 交互，性能降低。</p>\n<p>如果要在循环中使用数据，请使用贪婪加载，否则使用懒加载。</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-08-24T13:04:12.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "多表查询",
      "url": "https://freesql.net/guide/select-multi-table.html",
      "id": "https://freesql.net/guide/select-multi-table.html",
      "summary": "1、导航属性联表 提示：正确配置 【导航关系】后，不需要手工调用 LeftJoin 2、复杂联表 经验：一对多，分表只取最后一条记录 (https://github.com/dotnetcore/FreeSql/issues/430) 3、WithSql 提示：ISelect.ToSql 可与 WithSql 配合使用 4、SQL联表 延伸问题：SQL...",
      "content_html": "<h1> 多表查询</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 1、导航属性联表</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：正确配置 【导航关系】后，不需要手工调用 LeftJoin</p>\n</blockquote>\n<h2> 2、复杂联表</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>经验：<a href=\"https://github.com/dotnetcore/FreeSql/issues/430\" target=\"_blank\" rel=\"noopener noreferrer\">一对多，分表只取最后一条记录</a></p>\n</blockquote>\n<h2> 3、WithSql</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：ISelect.ToSql 可与 WithSql 配合使用</p>\n</blockquote>\n<h2> 4、SQL联表</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>延伸问题：SQL联表 b 表的字段如何在 ToList 中指定？</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5、子表Exists</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：由于子查询的实体类与上层相同，使用 As(\"b\") 指明别名，以便区分</p>\n</blockquote>\n<h2> 6、子表In</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7、子表Join</h2>\n<p>v1.8.0+ string.Join + ToList 实现将子查询的多行结果，拼接为一个字符串，如：\"1,2,3,4\"</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>提示：子查询 string.Join + ToList 适配了 sqlserver/pgsql/oracle/mysql/sqlite/firebird/达梦/金仓/南大/翰高 <a href=\"https://github.com/dotnetcore/FreeSql/issues/405\" target=\"_blank\" rel=\"noopener noreferrer\">#405</a></p>\n</blockquote>\n<h2> 8、子表First/Count/Sum/Max/Min/Avg</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9、子表ToList</h2>\n<blockquote>\n<p>v3.2.650+ 以下最多执行3次 SQL</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 10、集合属性</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果等同于：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>将集合属性快速转换为 ISelect 进行子查询操作。</p>\n<h2> 11、WhereCascade</h2>\n<p>多表查询时，像isdeleted每个表都给条件，挺麻烦的。WhereCascade使用后生成sql时，所有表都附上这个条件。</p>\n<p>如：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>得到的 SQL：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实体可附加表达式时才生效，支持子表查询。单次查询使用的表数目越多收益越大。</p>\n<p>可应用范围：</p>\n<ul>\n<li>子查询，一对多、多对多、自定义的子查询；</li>\n<li>Join 查询，导航属性、自定义的Join查询；</li>\n<li>Include/<a href=\"/guide/select-include.html\" target=\"blank\">IncludeMany</a> 的子集合查询；</li>\n</ul>\n<blockquote>\n<p>暂时不支持【延时属性】的广播；</p>\n</blockquote>\n<blockquote>\n<p>此功能和【过滤器】不同，用于单次多表查询条件的传播；</p>\n</blockquote>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-26T08:25:25.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "返回数据 ✨",
      "url": "https://freesql.net/guide/select-return-data.html",
      "id": "https://freesql.net/guide/select-return-data.html",
      "summary": "FreeSql 采用 ExpressionTree 优化读取速度，如果懂技术的你一定知道 .NET Core 技术下除了原生代码，最快就是 Emit 和 ExpressionTree。项目在初期使用的反射 + 缓存，虽然 .NET Core 优化了反射性能，但经过与 Dapper 性能测试对比之后，发现仍然有一定差距，改成 ExpresstionTre...",
      "content_html": "<h1> 返回数据 ✨</h1>\n<p>FreeSql 采用 ExpressionTree 优化读取速度，如果懂技术的你一定知道 .NET Core 技术下除了原生代码，最快就是 Emit 和 ExpressionTree。项目在初期使用的反射 + 缓存，虽然 .NET Core 优化了反射性能，但经过与 Dapper 性能测试对比之后，发现仍然有一定差距，改成 ExpresstionTree 后才与 Dapper 性能相当。FreeSql 支持的类型较多，实现 ExpressionTree 的复杂度较大，有兴趣的朋友可以翻阅源代码。</p>\n<h2> 1、返回单条记录</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>FreeSql 约定，ToOne/First 永远返回 null 或 有数据的实体对象，ToList 永远返回非 null 的 List&lt;实体类型&gt;</p>\n</blockquote>\n<h2> 2、返回 List</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 3、返回 TreeList</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>查询数据加工为树型，注意：实体需要配置父子导航属性</p>\n</blockquote>\n<h2> 4、返回 List + 导航属性的数据</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>更多导航属性的数据返回：<a href=\"/guide/select-include.html\" target=\"blank\">贪婪加载</a></p>\n<h2> 5、指定字段返回</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>常量机制早期留给了原生 SQL，如果真的需要返回该字符串：\"'xxx'\"</p>\n</blockquote>\n<h2> 6、忽略字段返回</h2>\n<p>参考实现：<a href=\"https://github.com/dotnetcore/FreeSql/issues/528\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/issues/528</a></p>\n<h2> 7、Dto 映射返回</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>请仔细处理区别，请仔细处理区别，请仔细处理区别</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>GroupBy 所有方法不使用 DTO 映射规则</p>\n</blockquote>\n<p>这种映射支持单表/多表，在查询数据之前映射（不是先查询所有字段再到内存映射）</p>\n<p>查找规则，查找属性名，会循环内部对象 _tables（join 查询后会增长），以 主表优先查，直到查到相同的字段。</p>\n<p>如：</p>\n<p>A, B, C 都有 id，Dto { id, a1, a2, b1, b2 }，A.id 被映射。也可以指定 id = C.id 映射。</p>\n<p>DTO 查询只映射默认字段（普通属性），映射对象请使用：</p>\n<blockquote>\n<p>导航对象：ToList(a =&gt; new Dto { Catalog = a.Catalog })</p>\n</blockquote>\n<blockquote>\n<p>多表对象：ToList((a, b) =&gt; new Dto { Catalog = b })</p>\n</blockquote>\n<h2> 8、ToChunk 分段返回</h2>\n<p>执行查询，分块返回数据，可减少内存开销。比如读取 10 万条数据，每次返回 100 条处理。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9、ToSql</h2>\n<p>每个 ToList 都可以使用 ToSql 返回 SQL String，有两个选项：</p>\n<ul>\n<li>FieldAliasOptions.AsIndex(默认) 自动产生 as1, as2, as3 .... 字段别名，可以最大程度防止多表，存在相同字段的问题；</li>\n<li>FieldAliasOptions.AsProperty 使用属性名作为字段别名，合适使用二次构造 SQL 再次执行；</li>\n</ul>\n<blockquote>\n<p>v3.2.666 开启参数化查询功能后，使用 WithParameters 共享参数化，避免多个查询对象产生相同的参数名称，例如：<a href=\"%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2\">UnionAll 联合查询</a></p>\n</blockquote>\n<h2> 10、执行 SQL</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注意：Ado.Query 的实体特性是无效的，比如 [Column(Name = \"xxx\")] 无效</p>\n</blockquote>\n<h2> 11、WithSql</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>WithSql 使用多次为 UNION ALL 查询</p>\n</blockquote>\n<blockquote>\n<p>v3.2.666 <a href=\"/guide/unionall.html\" target=\"blank\">UnionAll 联合查询</a>、<a href=\"/guide/withtempquery.html\" target=\"blank\">WithTempQuery + FromQuery 嵌套查询</a></p>\n</blockquote>\n<blockquote>\n<p>v3.2.666 WithMemory 使用内存数据进行查询</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 12、API</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的SQL语句</td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行SQL查询，返回 T1 实体所有字段的记录，若存在导航属性则一起查询返回，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>ToList&lt;Dto&gt;</td>\n<td>List&lt;Dto&gt;</td>\n<td>Lambda</td>\n<td>执行SQL查询，返回指定字段或Dto映射的记录，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>执行SQL查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表</td>\n</tr>\n<tr>\n<td>ToOne</td>\n<td>T1</td>\n<td></td>\n<td>执行SQL查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null</td>\n</tr>\n<tr>\n<td>ToChunk</td>\n<td>&lt;空&gt;</td>\n<td>int size, Action&lt;FetchCallbackArgs&lt;List&lt;T1&gt;&gt;&gt; done</td>\n<td>执行SQL查询，分块返回数据，可减少内存开销。比如读取10万条数据，每次返回100条处理。</td>\n</tr>\n<tr>\n<td>Any</td>\n<td>bool</td>\n<td></td>\n<td>执行SQL查询，是否有记录</td>\n</tr>\n<tr>\n<td>Sum</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求和</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最小值</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最大值</td>\n</tr>\n<tr>\n<td>Avg</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求平均值</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-11-14T11:23:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "单表查询",
      "url": "https://freesql.net/guide/select-single-table.html",
      "id": "https://freesql.net/guide/select-single-table.html",
      "summary": "单表 WithSql (withsql.md) 关于WithSql (withsql.md)的详情文档， 使用多次为 UNION ALL 查询 v3.2.666 UnionAll 联合查询 (unionall.md)、WithTempQuery + FromQuery 嵌套查询 (withtempquery.md) v3.2.666 WithMemor...",
      "content_html": "<h1> 单表查询</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 单表</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <a href=\"/guide/withsql.html\" target=\"blank\">WithSql</a></h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>关于<a href=\"/guide/withsql.html\" target=\"blank\">WithSql</a>的详情文档， 使用多次为 UNION ALL 查询</p>\n</blockquote>\n<blockquote>\n<p>v3.2.666 <a href=\"/guide/unionall.html\" target=\"blank\">UnionAll 联合查询</a>、<a href=\"/guide/withtempquery.html\" target=\"blank\">WithTempQuery + FromQuery 嵌套查询</a></p>\n</blockquote>\n<blockquote>\n<p>v3.2.666 WithMemory 使用内存数据进行查询</p>\n</blockquote>\n<blockquote>\n<p>假设跨数据库服务器，或者数据表被缓存过，WithMemory 便可以实现数据表与内存关联查询。</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-08-26T09:39:37.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "查询",
      "url": "https://freesql.net/guide/select.html",
      "id": "https://freesql.net/guide/select.html",
      "summary": "FreeSql 在查询数据下足了功夫，链式查询语法、多表查询、表达式函数支持得非常到位。 --- --- --- 《分页查询》 (paging.md) 《仓储层 Repository》 (repository.md) 《读写分离》 (read-write-splitting.md) 《单表查询》 (select-single-table.md) 《过滤...",
      "content_html": "<h1> 查询</h1>\n<p>FreeSql 在查询数据下足了功夫，链式查询语法、多表查询、表达式函数支持得非常到位。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"/guide/paging.html\" target=\"blank\">《分页查询》</a></td>\n<td><a href=\"/guide/repository.html\" target=\"blank\">《仓储层 Repository》</a></td>\n<td><a href=\"/guide/read-write-splitting.html\" target=\"blank\">《读写分离》</a></td>\n</tr>\n<tr>\n<td><a href=\"/guide/select-single-table.html\" target=\"blank\">《单表查询》</a></td>\n<td><a href=\"/guide/filters.html\" target=\"blank\">《过滤器》</a></td>\n<td><a href=\"/guide/linq-to-sql.html\" target=\"blank\">《LinqToSql》</a></td>\n</tr>\n<tr>\n<td><a href=\"/guide/select-multi-table.html\" target=\"blank\">《多表查询》</a></td>\n<td><a href=\"/guide/select-lazy-loading.html\" target=\"blank\">《延时加载》</a></td>\n<td><a href=\"/guide/performance.html\" target=\"blank\">《性能》</a></td>\n</tr>\n<tr>\n<td><a href=\"/guide/withtempquery.html\" target=\"blank\">《嵌套查询》</a></td>\n<td><a href=\"/guide/select-include.html\" target=\"blank\">《贪婪加载》</a></td>\n<td><a href=\"/guide/sharding.html\" target=\"blank\">《分表分库》</a></td>\n</tr>\n<tr>\n<td><a href=\"/guide/select-group-by.html\" target=\"blank\">《分组聚合查询》</a></td>\n<td><a href=\"/guide/expression-function.html\" target=\"blank\">《表达式函数》</a></td>\n<td><a href=\"/guide/multi-tenancy.html\" target=\"blank\">《多租户》</a></td>\n</tr>\n<tr>\n<td><a href=\"/guide/select-return-data.html\" target=\"blank\">《返回数据》</a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2> 表达式函数</h2>\n<table>\n<thead>\n<tr>\n<th>说明</th>\n<th>Lambda 表达式</th>\n<th>SQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>in</td>\n<td>Where(a =&gt; new [] { 1,2,3 }.Contains(a.Id))</td>\n<td>[Id] in (1,2,3)</td>\n</tr>\n<tr>\n<td>not in</td>\n<td>Where(a =&gt; !new [] { 1,2,3 }.Contains(a.Id))</td>\n<td>[Id] not in (1,2,3)</td>\n</tr>\n<tr>\n<td>多列in</td>\n<td>Where(a =&gt; list.Any(b =&gt; b.Item1 == a.Id &amp;&amp; b.Item2 == a.ct1))</td>\n<td>([Id]=1 and [ct1]=1) or ([Id]=2 and [ct1]=2)</td>\n</tr>\n<tr>\n<td>like '%xxx%'</td>\n<td>Where(a =&gt; a.Title.Contains(\"xxx\"))</td>\n<td>[Title] like '%xxx%'</td>\n</tr>\n<tr>\n<td>like 'xxx%'</td>\n<td>Where(a =&gt; a.Title.StartsWith(\"xxx\"))</td>\n<td>[Title] like 'xxx%'</td>\n</tr>\n<tr>\n<td>like '%xxx'</td>\n<td>Where(a =&gt; a.Title.EndsWith(\"xxx\"))</td>\n<td>[Title] like '%xxx'</td>\n</tr>\n<tr>\n<td>日期范围</td>\n<td>Where(a =&gt; a.Time.Between(time1, time2))</td>\n<td>[Time] between @time1 and @time2</td>\n</tr>\n<tr>\n<td>是否存在</td>\n<td>.Any()</td>\n<td>select 1 from ...</td>\n</tr>\n<tr>\n<td>总数</td>\n<td>.Count()</td>\n<td>select count(*) from ...</td>\n</tr>\n<tr>\n<td>求和</td>\n<td>.Sum(a =&gt; a.Score)</td>\n<td>select sum([Score]) from ...</td>\n</tr>\n<tr>\n<td>平均</td>\n<td>.Avg(a =&gt; a.Score)</td>\n<td>select avg([Score]) from ...</td>\n</tr>\n<tr>\n<td>最大值</td>\n<td>.Max(a =&gt; a.Score)</td>\n<td>select max([Score]) from ...</td>\n</tr>\n<tr>\n<td>最小值</td>\n<td>.Min(a =&gt; a.Score)</td>\n<td>select min([Score]) from ...</td>\n</tr>\n</tbody>\n</table>\n<p>更详细请前往<a href=\"/guide/expression-function.html\" target=\"blank\">《表达式函数》</a></p>\n<h2> SqlServer WithLock/WithIndex</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>多表：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>全局设置 NoLock：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 特别介绍 WhereDynamicFilter</h2>\n<p><a href=\"https://www.cnblogs.com/FreeSql/p/16485310.html\" target=\"_blank\" rel=\"noopener noreferrer\">《高效理解 FreeSql WhereDynamicFilter，深入了解设计初衷》</a></p>\n<p>ISelect.WhereDynamicFilter 方法实现动态过滤条件（与前端交互），支持的操作符：</p>\n<ul>\n<li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith：包含/不包含，like '%xx%'，或者 like 'xx%'，或者 like '%xx'</li>\n<li>Equal/NotEqual：等于/不等于</li>\n<li>GreaterThan/GreaterThanOrEqual：大于/大于等于</li>\n<li>LessThan/LessThanOrEqual：小于/小于等于</li>\n<li>Range：范围查询</li>\n<li>DateRange：日期范围，有特殊处理 value[1] + 1</li>\n<li>Any/NotAny：是否符合 value 中任何一项（直白的说是 SQL IN）</li>\n<li>Custom：<a href=\"https://github.com/dotnetcore/FreeSql/discussions/1550\" target=\"_blank\" rel=\"noopener noreferrer\">自定义解析</a></li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>动态表名：ISelect.AsTable((t, old) =&gt; $\"{old}_201903\")</p>\n</blockquote>\n<blockquote>\n<p>动态排序：ISelect.OrderByPropertyName(\"Parent.Code\")</p>\n</blockquote>\n<blockquote>\n<p>动态返回：ISelect.ToDataTableByPropertyName(new string[] { \"Parent.Code\", \"Id\" })</p>\n</blockquote>\n<blockquote>\n<p>动态贪婪加载：ISelect.IncludeByPropertyName(\"Parent.Parent\").IncludeByPropertyName(\"Parent.Childs\")</p>\n</blockquote>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n<td></td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 查询，返回 T1 实体所有字段的记录，若存在导航属性则一起查询返回，记录不存在时返回 Count 为 0 的列表</td>\n<td></td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>执行 SQL 查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表</td>\n<td></td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>执行 SQL 查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表</td>\n<td></td>\n</tr>\n<tr>\n<td>ToOne</td>\n<td>T1</td>\n<td></td>\n<td>执行 SQL 查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null</td>\n<td></td>\n</tr>\n<tr>\n<td>ToAggregate&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>执行 SQL 查询，返回指定字段的聚合结果（适合不需要 GroupBy 的场景）</td>\n<td></td>\n</tr>\n<tr>\n<td>Any</td>\n<td>bool</td>\n<td></td>\n<td>执行 SQL 查询，是否有记录</td>\n<td></td>\n</tr>\n<tr>\n<td>Sum</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求和</td>\n<td></td>\n</tr>\n<tr>\n<td>Min</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最小值</td>\n<td></td>\n</tr>\n<tr>\n<td>Max</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最大值</td>\n<td></td>\n</tr>\n<tr>\n<td>Avg</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求平均值</td>\n<td></td>\n</tr>\n<tr>\n<td>【分页】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>long</td>\n<td></td>\n<td>查询的记录数量</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>&lt;this&gt;</td>\n<td>out long</td>\n<td>查询的记录数量，以参数 out 形式返回</td>\n<td></td>\n</tr>\n<tr>\n<td>Skip</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>查询向后偏移行数</td>\n<td></td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>查询向后偏移行数</td>\n<td></td>\n</tr>\n<tr>\n<td>Limit</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>查询多少条数据</td>\n<td></td>\n</tr>\n<tr>\n<td>Take</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>查询多少条数据</td>\n<td></td>\n</tr>\n<tr>\n<td>Page</td>\n<td>&lt;this&gt;</td>\n<td>int pageIndex, int pageSize</td>\n<td>分页</td>\n<td></td>\n</tr>\n<tr>\n<td>【条件】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>支持多表查询表达式，多次使用相当于 AND</td>\n<td></td>\n</tr>\n<tr>\n<td>WhereIf</td>\n<td>&lt;this&gt;</td>\n<td>bool, Lambda</td>\n<td>支持多表查询表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>原生 sql 语法条件，Where(\"id = @id\", new { id = 1 } ,<a href=\"/guide/ado.html#%E5%8F%82%E6%95%B0%E5%8C%96\" target=\"blank\">注意前缀@,根据具体数据库决定</a> 其他地方不再说明。同理 )</td>\n<td></td>\n</tr>\n<tr>\n<td>WhereIf</td>\n<td>&lt;this&gt;</td>\n<td>bool, string, parms</td>\n<td>原生 sql 语法条件，WhereIf(true, \"id = @id\", new { id = 1 }</td>\n<td></td>\n</tr>\n<tr>\n<td>WhereCascade</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>实现多表查询时，向每个表中附加条件</td>\n<td></td>\n</tr>\n<tr>\n<td>WhereDynamicFilter</td>\n<td>&lt;this&gt;</td>\n<td>DynamicFilterInfo</td>\n<td>动态过滤条件(与前端交互)</td>\n<td></td>\n</tr>\n<tr>\n<td>【分组】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按选择的列分组，GroupBy(a =&gt; a.Name)</td>\n<td>GroupBy(a =&gt; new{a.Name,a.Time})</td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生 sql 语法分组，GroupBy(\"concat(name, @cc)\", new { cc = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>Having</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生 sql 语法聚合条件过滤，Having(\"count(name) = @cc\", new { cc = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>Disdinct</td>\n<td>&lt;this&gt;</td>\n<td></td>\n<td>.Distinct().ToList(x =&gt; x.GroupName) 是对指定字段</td>\n<td></td>\n</tr>\n<tr>\n<td>【排序】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OrderBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按列排序，OrderBy(a =&gt; a.Time)，可多次使用</td>\n<td></td>\n</tr>\n<tr>\n<td>OrderByDescending</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按列倒向排序，OrderByDescending(a =&gt; a.Time)</td>\n<td></td>\n</tr>\n<tr>\n<td>OrderBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生 sql 语法排序，OrderBy(\"count(name) + @cc\", new { cc = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>OrderByPropertyName</td>\n<td>string, bool</td>\n<td>按属性名字符串排序（支持导航属性）</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>【联表】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>LeftJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>左联查询，可使用导航属性，或指定关联的实体类型</td>\n<td></td>\n</tr>\n<tr>\n<td>InnerJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>联接查询，可使用导航属性，或指定关联的实体类型</td>\n<td></td>\n</tr>\n<tr>\n<td>RightJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>右联查询，可使用导航属性，或指定关联的实体类型</td>\n<td></td>\n</tr>\n<tr>\n<td>LeftJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>左联查询，使用原生 sql 语法，LeftJoin(\"type b on b.id = a.id and b.clicks &gt; @clicks\", new { clicks = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>InnerJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>联接查询，使用原生 sql 语法，InnerJoin(\"type b on b.id = a.id and b.clicks &gt; @clicks\", new { clicks = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>RightJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>右联查询，使用原生 sql 语法，RightJoin(\"type b on b.id = a.id and b.clicks &gt; @clicks\", new { clicks = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>From</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>多表查询，3 个表以上使用非常方便，目前设计最大支持 10 个表</td>\n<td></td>\n</tr>\n<tr>\n<td>FromQuery</td>\n<td>ISelect&lt;T1, T2&gt;</td>\n<td>ISelect&lt;T2&gt;</td>\n<td>单表连成双表查询</td>\n<td></td>\n</tr>\n<tr>\n<td>WithTempQuery</td>\n<td>ISelect&lt;T1&gt;</td>\n<td>Lambda</td>\n<td>将单表或多表查询嵌套成单表查询</td>\n<td></td>\n</tr>\n<tr>\n<td>WithMemory</td>\n<td>ISelect&lt;T1&gt;</td>\n<td>List&lt;T1&gt;</td>\n<td>使用内存数据查询</td>\n<td></td>\n</tr>\n<tr>\n<td>UnionAll</td>\n<td>ISelect&lt;T1&gt;</td>\n<td>ISelect&lt;T1&gt;[]</td>\n<td>联合查询</td>\n<td></td>\n</tr>\n<tr>\n<td>【其他】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>As</td>\n<td>&lt;this&gt;</td>\n<td>string alias = \"a\"</td>\n<td>指定别名</td>\n<td></td>\n</tr>\n<tr>\n<td>Master</td>\n<td>&lt;this&gt;</td>\n<td></td>\n<td>指定从主库查询（默认查询从库）</td>\n<td></td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n<td></td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n<td></td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n<td></td>\n</tr>\n<tr>\n<td>WithLock</td>\n<td>&lt;this&gt;</td>\n<td>Enum</td>\n<td>SqlServer NoLock 等特有的设置</td>\n<td></td>\n</tr>\n<tr>\n<td>ForUpdate</td>\n<td>&lt;this&gt;</td>\n<td>bool</td>\n<td>排他更新锁，对不同的数据库已作适配，详细说明见注释</td>\n<td></td>\n</tr>\n<tr>\n<td>AsQueryable</td>\n<td>IQueryable</td>\n<td></td>\n<td>将 ISelect 转换为 IQueryable，此方法主要用于扩展，比如：abp IRepository GetAll() 接口方法需要返回 IQueryable 对象。注意：IQueryable 方法污染较为严重，请尽量避免此转换</td>\n<td></td>\n</tr>\n<tr>\n<td>ToTreeList()</td>\n<td>List&lt;TEntity&gt;</td>\n<td>无</td>\n<td>将父子关系的数据以 TreeList 的形式返回</td>\n<td></td>\n</tr>\n<tr>\n<td>AsTreeCte()</td>\n<td>ISelect</td>\n<td>(up, pathSelector, level)</td>\n<td>递归查询父子关系表</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-17T05:25:11.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "分表分库",
      "url": "https://freesql.net/guide/sharding.html",
      "id": "https://freesql.net/guide/sharding.html",
      "summary": "理论知识 分表 - 从表面意思上看呢，就是把一张表分成 N 多个小表，每一个小表都是完整的一张表。分表后数据都是存放在分表里，总表只是一个外壳，存取数据发生在一个一个的分表里面。分表后单表的并发能力提高了，磁盘 I/O 性能也提高了。并发能力为什么提高了呢，因为查寻一次所花的时间变短了，如果出现高并发的话，总表可以根据不同 的查询，将并发压力分到不同的...",
      "content_html": "<h1> 分表分库</h1>\n<h2> 理论知识</h2>\n<p>分表 - 从表面意思上看呢，就是把一张表分成 N 多个小表，每一个小表都是完整的一张表。分表后数据都是存放在分表里，总表只是一个外壳，存取数据发生在一个一个的分表里面。分表后单表的并发能力提高了，磁盘 I/O 性能也提高了。并发能力为什么提高了呢，因为查寻一次所花的时间变短了，如果出现高并发的话，总表可以根据不同 的查询，将并发压力分到不同的小表里面。</p>\n<p>分库 - 把原本存储于一个库的数据分块存储到多个库上，把原本存储于一个表的数据分块存储到多个表上。数据库中的数据量不一定是可控的，在未进行分表分库的情况下，随着时间和业务的发展，库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作，增删改查的开销也会越来越大；另外，一台服务器的资源（CPU、磁盘、内存、IO 等）是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。</p>\n<h2> 手工分表 AsTable</h2>\n<p>FreeSql 原生用法、FreeSql.Repository 仓储用法 都提供了 AsTable 方法对分表进行 CRUD 操作，例如：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>跨库，但是在同一个数据库服务器下，也可以使用 AsTable(oldname =&gt; $\"db2.dbo.{oldname}\")</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>分表总结：</p>\n<ul>\n<li>分表、相同服务器跨库 可以使用 AsTable 进行 CRUD；</li>\n<li>AsTable CodeFirst 会自动创建不存在的分表；</li>\n<li>不可在分表分库的实体类型中使用《延时加载》；</li>\n</ul>\n<p>SqlServer 跨库事务 可以使用 TransactionScope，如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>分布式数据库 TCC/SAGA 方案请移步：https://github.com/2881099/FreeSql.Cloud</p>\n<h2> 自动分表 AsTable (beta)</h2>\n<p>【自动分表】不同于 CURD.AsTable 方法，目前第一期完成按【时间】自动分表（不支持分库）。</p>\n<p>欢迎积极参与测试、反馈，请优先使用源代码进行测试，方便反馈定位问题，谢谢。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>从 2022-1-1 开始至当前时间，每月创建一个分表，按 createtime 字段分表</p>\n</blockquote>\n<blockquote>\n<p>若最大日期大于当前时间，可手工扩容分表：</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>示范</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AsTable = \"createtime=2022-1-1(1 year)\"</td>\n<td>一年一个分表</td>\n</tr>\n<tr>\n<td>AsTable = \"createtime=2022-1-1(2 year)\"</td>\n<td>两年一个分表</td>\n</tr>\n<tr>\n<td>AsTable = \"createtime=2022-1-1(1 month)\"</td>\n<td>一月一个分表</td>\n</tr>\n<tr>\n<td>AsTable = \"createtime=2022-1-1(3 month)\"</td>\n<td>三月一个分表</td>\n</tr>\n<tr>\n<td>AsTable = \"createtime=2022-1-1(1 day)\"</td>\n<td>一天一个分表</td>\n</tr>\n<tr>\n<td>AsTable = \"createtime=2022-1-1(7 day)\"</td>\n<td>七天一个分表</td>\n</tr>\n<tr>\n<td>AsTable = \"createtime=2022-1-1(12 hour)\"</td>\n<td>12小时一个分表</td>\n</tr>\n</tbody>\n</table>\n<p>第一个表12个月，后面的表按1个月：</p>\n<blockquote>\n<p>AsTable = \"createtime=2022-1-1(12,1 month)\"</p>\n</blockquote>\n<p>第一个表非时间命名：</p>\n<blockquote>\n<p>fsql.CodeFirst.GetTableByEntity(typeof(AsTableLog)).AsTableImpl.SetTableName(0, \"自定义表名\")</p>\n</blockquote>\n<p>每个月1日10点分表：</p>\n<blockquote>\n<p>[Table(Name = \"as_table_log_{yyyyMMddHH}\", AsTable = \"createtime=2022-1-1 10(1 month)\")]</p>\n</blockquote>\n<p>未设置时间条件时，只命中最新的 3个分表：</p>\n<blockquote>\n<p>fsql.CodeFirst.GetTableByEntity(typeof(AsTableLog)).AsTableImpl.SetDefaultAllTables(value =&gt; value.Take(3).ToArray());</p>\n</blockquote>\n<p>详细介绍：<a href=\"https://github.com/dotnetcore/FreeSql/discussions/1066\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/discussions/1066</a></p>\n<h2> 【分库】常规技巧</h2>\n<p>1、Sqlite 跨库</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>SQLite 跨库操作是 FreeSql 独有的功能，连接串 attachs 参数值逗号分割。</p>\n<p>2、SqlServer 跨库</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不同数据库实例，可使用 SQLServer linkserver 技术，具体请百度了解。</p>\n<p>3、其他</p>\n<p>几乎每种数据库都支持 dbo.table 的方式访问：</p>\n<ul>\n<li>MySql -&gt; dbname.tabname</li>\n<li>PostgreSQL/SqlServer -&gt; dbname.schema.tbname</li>\n</ul>\n<p>可将其设置到 <code>[Table(Name = ...)]</code> 特性，或者使用 <code>.AsTable</code> 方法设置本次生效。</p>\n<h2> 【分库】使用 FreeSql.Cloud</h2>\n<p>为 FreeSql 提供跨数据库访问，分布式事务TCC、SAGA解决方案，支持 .NET Core 2.1+, .NET Framework 4.0+.</p>\n<p>开源地址：https://github.com/2881099/FreeSql.Cloud</p>\n<blockquote>\n<p>dotnet add package FreeSql.Cloud</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>Install-Package FreeSql.Cloud</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>FreeSqlCloud 必须定义成单例模式</p>\n</blockquote>\n<blockquote>\n<p>new FreeSqlCloud() 多连接管理</p>\n</blockquote>\n<blockquote>\n<p>new FreeSqlCloud(\"myapp\") 开启 TCC/SAGA 事务生效</p>\n</blockquote>\n<p>FreeSqlCloud 的访问方式和 IFreeSql 一样：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>1、切换数据库（多线程安全）：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2、自动定向数据库配置：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>3、静态仓储对象</p>\n<p>FreeSql.Repository/UnitOfWorkManager 对象创建时固定了 IFreeSql，因此无法跟随 FreeSqlCloud 切换数据库。</p>\n<blockquote>\n<p>注意：是同一个对象实例创建之后，无法跟随切换，创建新对象实例不受影响。</p>\n</blockquote>\n<p>租户分库场景 Repository/UnitOfWorkManager 创建之前，先调用 fsql.Change 切换好数据库。</p>\n<p><a href=\"/guide/unitofwork-manager.html#freesql-cloud-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-unitofworkmanager\" target=\"blank\">《FreeSql.Cloud 如何使用 UnitOfWorkManager 实现 AOP 事务？》</a></p>\n<p>4、动态创建对象（不推荐）</p>\n<p>但是。。。仍然有一种特殊需求，Repository 在创建之后，仍然能跟随 fsql.Change 切换数据库。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这种机制太不可控，所以只做了简单的扩展方法创建，并不推荐 Ioc 注入。</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-14T11:24:34.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "事务Transaction",
      "url": "https://freesql.net/guide/transaction.html",
      "id": "https://freesql.net/guide/transaction.html",
      "summary": "本文所有内容基于单机数据库事务，分布式数据库 TCC/SAGA 方案请移步：https://github.com/2881099/FreeSql.Cloud (https://github.com/2881099/FreeSql.Cloud) 0、UnitOfWorkManager跨方法异步 AOP + FreeSql 基于特性标签实现跨方法异步事务 ...",
      "content_html": "<h1> 事务Transaction</h1>\n<p>本文所有内容基于单机数据库事务，分布式数据库 TCC/SAGA 方案请移步：<a href=\"https://github.com/2881099/FreeSql.Cloud\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeSql.Cloud</a></p>\n<h2> 0、UnitOfWorkManager跨方法异步</h2>\n<ul>\n<li><a href=\"/guide/unitofwork-manager.html\" target=\"blank\">AOP + FreeSql 基于特性标签实现跨方法异步事务</a></li>\n</ul>\n<h2> 1、UnitOfWork 事务</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2、DbContext 事务</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3、同线程事务</h2>\n<p>同线程事务，由 fsql.Transaction 管理事务提交回滚（缺点：不支持异步），比较适合 WinForm/WPF UI 主线程使用事务的场景。</p>\n<p>用户购买了价值 100 元的商品：扣余额、扣库存。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>同线程事务使用简单，需要注意的限制：</p>\n<ul>\n<li>\n<p>事务对象在线程挂载，每个线程只可开启一个事务连接，嵌套使用的是同一个事务；</p>\n</li>\n<li>\n<p>事务体内代码不可以切换线程，因此不可使用任何异步方法，包括 FreeSql 提供的数据库异步方法（可以使用任何 Curd 同步方法）；</p>\n</li>\n</ul>\n<h2> 4、外部事务</h2>\n<p>在与其他开源项目一起使用时，事务由外部开启，使用 WithTransaction 将事务对象传入执行。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>ISelect、IInsert、IUpdate、IDelete，都支持 WithTransaction 方法。</p>\n<h3> 获取DbTransaction</h3>\n<ul>\n<li>异步方法</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>同步方法(using新语法)</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>同步方法(using旧语法)</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 示例</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5、更新排他锁</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>for update 在 Oracle/PostgreSQL/MySql 是通用的写法，我们对 SqlServer 做了特别适配，执行的 SQL 语句大致如下：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 6、示范代码</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>IFreeSql Curd 方法若不是使用同线程事务，需要指定 WithTransaction 传入事务；</li>\n<li>IUnitOfWork Orm 与工作单元事务一致；</li>\n<li>FreeSql.IBaseRepository curd 方法需要指定 UnitOfWork 传递工作单元事务；</li>\n<li>FreeSql.DbContext 自带事务；</li>\n<li>UnitOfWorkManager 适合做跨方法事务；</li>\n</ul>\n<p><a href=\"https://github.com/dotnetcore/FreeSql/issues/322\" target=\"_blank\" rel=\"noopener noreferrer\">扩展阅读 1：IFreeSql 事务另类玩法，理解上面各种事务场景之后再看会更佳</a></p>\n<p><a href=\"https://www.cnblogs.com/kellynic/p/13551855.html\" target=\"_blank\" rel=\"noopener noreferrer\">扩展阅读 2：对以上各种事务的理解及演变</a></p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-01-14T16:07:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "类型映射",
      "url": "https://freesql.net/guide/type-mapping.html",
      "id": "https://freesql.net/guide/type-mapping.html",
      "summary": "自定义类型映射(MapType) v3.2.701 版本自定义类型转换 使用 MapType 枚举 -> string/int 等等如下： 应该不需要解释了吧？ BigInteger 都可以映射使用了，但请注意：仅仅是 CURD 方便， Equals == 判断可以使用，无法实现 + - \\* / 等操作； v0.9.15 版本还可以将值对象映射成 t...",
      "content_html": "<h1> 类型映射</h1>\n<h2> 自定义类型映射(MapType)</h2>\n<h3> v3.2.701 版本自定义类型转换</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 使用 MapType 枚举 -&gt; string/int 等等如下：</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>应该不需要解释了吧？</p>\n<p>BigInteger 都可以映射使用了，但请注意：仅仅是 CURD 方便， Equals == 判断可以使用，无法实现 + - * / 等操作；</p>\n<p>v0.9.15 版本还可以将值对象映射成 typeof(string)，安装扩展包：</p>\n<blockquote>\n<p>dotnet add package FreeSql.Extensions.JsonMap</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 默认类型映射</h2>\n<table>\n<thead>\n<tr>\n<th>csharp</th>\n<th>MySql</th>\n<th>SqlServer</th>\n<th>PostgreSQL</th>\n<th>Oracle</th>\n<th>Sqlite</th>\n<th>达梦</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool | bool?</td>\n<td>bit(1)</td>\n<td>bit</td>\n<td>bool</td>\n<td>number(1)</td>\n<td>boolean</td>\n<td>number(1)</td>\n</tr>\n<tr>\n<td>sbyte | sbyte?</td>\n<td>tinyint(3)</td>\n<td>smallint</td>\n<td>int2</td>\n<td>number(4)</td>\n<td>smallint</td>\n<td>number(4)</td>\n</tr>\n<tr>\n<td>short | short?</td>\n<td>smallint(6)</td>\n<td>smallint</td>\n<td>int2</td>\n<td>number(6)</td>\n<td>smallint</td>\n<td>number(6)</td>\n</tr>\n<tr>\n<td>int | int?</td>\n<td>int(11)</td>\n<td>int</td>\n<td>int4</td>\n<td>number(11)</td>\n<td>integer</td>\n<td>number(11)</td>\n</tr>\n<tr>\n<td>long | long?</td>\n<td>bigint(20)</td>\n<td>bigint</td>\n<td>int8</td>\n<td>number(21)</td>\n<td>integer</td>\n<td>number(21)</td>\n</tr>\n<tr>\n<td>byte | byte?</td>\n<td>tinyint(3) unsigned</td>\n<td>tinyint</td>\n<td>int2</td>\n<td>number(3)</td>\n<td>int2</td>\n<td>number(3)</td>\n</tr>\n<tr>\n<td>ushort | ushort?</td>\n<td>smallint(5) unsigned</td>\n<td>int</td>\n<td>int4</td>\n<td>number(5)</td>\n<td>unsigned</td>\n<td>number(5)</td>\n</tr>\n<tr>\n<td>uint | uint?</td>\n<td>int(10) unsigned</td>\n<td>bigint</td>\n<td>int8</td>\n<td>number(10)</td>\n<td>decimal(10,0)</td>\n<td>number(10)</td>\n</tr>\n<tr>\n<td>ulong | ulong?</td>\n<td>bigint(20) unsigned</td>\n<td>decimal(20,0)</td>\n<td>numeric(20,0)</td>\n<td>number(20)</td>\n<td>decimal(21,0)</td>\n<td>number(20)</td>\n</tr>\n<tr>\n<td>double | double?</td>\n<td>double</td>\n<td>float</td>\n<td>float8</td>\n<td>float(126)</td>\n<td>double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>float | float?</td>\n<td>float</td>\n<td>real</td>\n<td>float4</td>\n<td>float(63)</td>\n<td>float</td>\n<td>real</td>\n</tr>\n<tr>\n<td>decimal | decimal?</td>\n<td>decimal(10,2)</td>\n<td>decimal(10,2)</td>\n<td>numeric(10,2)</td>\n<td>number(10,2)</td>\n<td>decimal(10,2)</td>\n<td>number(10,2)</td>\n</tr>\n<tr>\n<td>Guid | Guid?</td>\n<td>char(36)</td>\n<td>uniqueidentifier</td>\n<td>uuid</td>\n<td>char(36 CHAR)</td>\n<td>character(36)</td>\n<td>char(36)</td>\n</tr>\n<tr>\n<td>TimeSpan | TimeSpan?</td>\n<td>time</td>\n<td>time</td>\n<td>time</td>\n<td>interval day(2) to second(6)</td>\n<td>bigint</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DateTime | DateTime?</td>\n<td>datetime</td>\n<td>datetime</td>\n<td>timestamp</td>\n<td>timestamp(6)</td>\n<td>datetime</td>\n<td>timestamp(6)</td>\n</tr>\n<tr>\n<td>DateTimeOffset | DateTimeOffset?</td>\n<td>-</td>\n<td>datetimeoffset</td>\n<td>-</td>\n<td>timestamp(6) with local time zone</td>\n<td>-</td>\n<td>timestamp(6)</td>\n</tr>\n<tr>\n<td>Enum | Enum?</td>\n<td>enum</td>\n<td>int</td>\n<td>int4</td>\n<td>number(16)</td>\n<td>mediumint</td>\n<td>number(16)</td>\n</tr>\n<tr>\n<td>FlagsEnum | FlagsEnum?</td>\n<td>set</td>\n<td>bigint</td>\n<td>int8</td>\n<td>number(32)</td>\n<td>bigint</td>\n<td>number(32)</td>\n</tr>\n<tr>\n<td>byte[]</td>\n<td>varbinary(255)</td>\n<td>varbinary(255)</td>\n<td>bytea</td>\n<td>blob</td>\n<td>blob</td>\n<td>blob</td>\n</tr>\n<tr>\n<td>string</td>\n<td>varchar(255)</td>\n<td>nvarchar(255)</td>\n<td>varchar(255)</td>\n<td>nvarchar2(255)</td>\n<td>nvarchar(255)</td>\n<td>nvarchar2(255)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>以上类型和长度是默认值，可手工设置 Column 特性 DbType 值</p>\n</blockquote>\n<blockquote>\n<p>string 指定长度 [Column(DbType = \"varchar(max)\")] 或者 [MaxLength(-1)] 或者 [Column(StringLength = -1)]，当长度 -1 时产生的映射如下：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>MySql</th>\n<th>PostgreSQL</th>\n<th>SqlServer</th>\n<th>Oracle</th>\n<th>Sqlite</th>\n<th>Firebird</th>\n<th>MsAccess</th>\n<th>达梦</th>\n<th>金仓</th>\n<th>神通</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>text</td>\n<td>varchar(max)</td>\n<td>nclob</td>\n<td>text</td>\n<td>blob sub_type 1</td>\n<td>longtext</td>\n<td>text</td>\n<td>text</td>\n<td>text</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：Oracle nclob 需要 v1.3.2+ 版本才支持，否则将映射 nvarchar2(4000)</p>\n</blockquote>\n<blockquote>\n<p>注意：MySql [MaxLength(-2)] 或者 [Column(StringLength = -2)] 映射类型 longtext，其他数据库的映射规则与 -1 相同</p>\n</blockquote>\n<blockquote>\n<p>decimal 指定长度 [Column(Precision = 10, Scale = 2)]</p>\n</blockquote>\n<h2> MySql 特别类型映射</h2>\n<table>\n<thead>\n<tr>\n<th>csharp</th>\n<th>MySql</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MygisPoint</td>\n<td>point</td>\n</tr>\n<tr>\n<td>MygisLineString</td>\n<td>linestring</td>\n</tr>\n<tr>\n<td>MygisPolygon</td>\n<td>polygon</td>\n</tr>\n<tr>\n<td>MygisMultiPoint</td>\n<td>multipoint</td>\n</tr>\n<tr>\n<td>MygisMultiLineString</td>\n<td>multilinestring</td>\n</tr>\n<tr>\n<td>MygisMultiPolygon</td>\n<td>multipolygon</td>\n</tr>\n</tbody>\n</table>\n<h2> Mysql注意事项</h2>\n<p>如果<code>int、byte</code>类型，指定了 <code>DbType=\"tinyint(1)\"</code>,请注意，<code>tinyint(1)</code>在ado.net中默认将此值映射为<code>bool</code>类型，可在链接串中指定<code>TreatTinyAsBoolean=false</code>,使映射 <code>tinyint(1) </code>为 <code>SByte</code> 而非 <code>bool</code>。</p>\n<h2> PostgreSQL 特别类型映射</h2>\n<table>\n<thead>\n<tr>\n<th>csharp</th>\n<th>PostgreSQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BitArray</td>\n<td>varbit(64)</td>\n</tr>\n<tr>\n<td>NpgsqlPoint | NpgsqlPoint?</td>\n<td>point</td>\n</tr>\n<tr>\n<td>NpgsqlLine | NpgsqlLine?</td>\n<td>line</td>\n</tr>\n<tr>\n<td>NpgsqlLSeg | NpgsqlLSeg?</td>\n<td>lseg</td>\n</tr>\n<tr>\n<td>NpgsqlBox | NpgsqlBox?</td>\n<td>box</td>\n</tr>\n<tr>\n<td>NpgsqlPath | NpgsqlPath?</td>\n<td>path</td>\n</tr>\n<tr>\n<td>NpgsqlPolygon | NpgsqlPolygon?</td>\n<td>polygon</td>\n</tr>\n<tr>\n<td>NpgsqlCircle | NpgsqlCircle?</td>\n<td>circle</td>\n</tr>\n<tr>\n<td>(IPAddress Address, int Subnet) | (IPAddress Address, int Subnet)?</td>\n<td>cidr</td>\n</tr>\n<tr>\n<td>IPAddress</td>\n<td>inet</td>\n</tr>\n<tr>\n<td>PhysicalAddress</td>\n<td>macaddr</td>\n</tr>\n<tr>\n<td>NpgsqlRange&lt;int&gt; | NpgsqlRange&lt;int&gt;?</td>\n<td>int4range</td>\n</tr>\n<tr>\n<td>NpgsqlRange&lt;long&gt; | NpgsqlRange&lt;long&gt;?</td>\n<td>int8range</td>\n</tr>\n<tr>\n<td>NpgsqlRange&lt;decimal&gt; | NpgsqlRange&lt;decimal&gt;?</td>\n<td>numrange</td>\n</tr>\n<tr>\n<td>NpgsqlRange&lt;DateTime&gt; | NpgsqlRange&lt;DateTime&gt;?</td>\n<td>tsrange</td>\n</tr>\n<tr>\n<td>PostgisPoint</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>PostgisLineString</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>PostgisPolygon</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>PostgisMultiPoint</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>PostgisMultiLineString</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>PostgisMultiPolygon</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>PostgisGeometry</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>PostgisGeometryCollection</td>\n<td>geometry</td>\n</tr>\n<tr>\n<td>Dictionary&lt;string, string&gt;</td>\n<td>hstore</td>\n</tr>\n<tr>\n<td>JToken</td>\n<td>jsonb</td>\n</tr>\n<tr>\n<td>JObject</td>\n<td>jsonb</td>\n</tr>\n<tr>\n<td>JArray</td>\n<td>jsonb</td>\n</tr>\n<tr>\n<td>数组</td>\n<td>以上所有类型都支持，包括默认类型</td>\n</tr>\n</tbody>\n</table>\n<h2> 自定义重写(RewriteSql)、重读(RereadSql)</h2>\n<p>写入时重写 SQL、读取时重写 SQL，适合 geography 类型的读写场景。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 优先级</h2>\n<p>从数据库导入特性 &gt; 实体特性 &gt; FluentApi &gt; Aop</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-09-08T06:46:06.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "UnitOfWork",
      "url": "https://freesql.net/guide/unit-of-work.html",
      "id": "https://freesql.net/guide/unit-of-work.html",
      "summary": "UnitOfWork 可将多个仓储放在一个单元管理执行，最终通用 Commit 执行所有操作，内部使用了数据库事务； 如何使用 参考：在 asp.net core 中使用 TransactionalAttribute + UnitOfWorkManager 实现多种事务传播 (unitofwork-manager.md) 接口定义 uow.GetOrB...",
      "content_html": "<h1> UnitOfWork</h1>\n<p>UnitOfWork 可将多个仓储放在一个单元管理执行，最终通用 Commit 执行所有操作，内部使用了数据库事务；</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 如何使用</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>参考：<a href=\"/guide/unitofwork-manager.html\" target=\"blank\">在 asp.net core 中使用 TransactionalAttribute + UnitOfWorkManager 实现多种事务传播</a></p>\n<h2> 接口定义</h2>\n<p>uow.GetOrBeginTransaction() 方法可获取事务对象。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 实体变化事件</h2>\n<p>全局设置：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>单独设置：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>参数 report 是一个 List 集合，集合元素的类型定义如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>变化类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Insert</td>\n<td>实体对象被插入</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>实体对象被更新</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>实体对象被删除</td>\n</tr>\n<tr>\n<td>SqlRaw</td>\n<td>执行了 SQL 语句</td>\n</tr>\n</tbody>\n</table>\n<p>SqlRaw 目前有两处地方比较特殊：</p>\n<ul>\n<li>多对多联级更新导航属性的时候，对中间表的全部删除操作；</li>\n<li>通用仓储类 BaseRepository 有一个 Delete 方法，参数为表达式，而并非实体；</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>DbContext.SaveChanges，或者 Repository 对实体的 Insert/Update/Delete，或者 UnitOfWork.Commit 操作都会最多触发一次该事件。</p>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-06T22:09:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "修改",
      "url": "https://freesql.net/guide/update.html",
      "id": "https://freesql.net/guide/update.html",
      "summary": "FreeSql 提供丰富的数据库更新功能，支持单条或批量更新，在特定的数据库执行还可以返回更新后的记录。 动态条件 dywhere 支持： 主键值; new[] { 主键值1, 主键值2 }; Topic 对象; new[] { Topic对象1, Topic对象2 }; new { id = 1 }; 动态表名 1、更新指定列 支持 Set() 多次...",
      "content_html": "<h1> 修改</h1>\n<p><code>FreeSql</code> 提供丰富的数据库更新功能，支持单条或批量更新，在特定的数据库执行还可以返回更新后的记录。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 动态条件</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>dywhere</code> 支持：</p>\n<ul>\n<li>主键值</li>\n<li><code>new[] { 主键值1, 主键值2 }</code></li>\n<li>Topic 对象</li>\n<li><code>new[] { Topic对象1, Topic对象2 }</code></li>\n<li><code>new { id = 1 }</code></li>\n</ul>\n<h2> 动态表名</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 1、更新指定列</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>支持 <code>Set()</code> 多次，相当于拼接</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2、更新条件</h2>\n<blockquote>\n<p>除了上面介绍的 <code>dywhere</code> 构造参数外，还支持 <code>Where lambda/sql</code> 方法</p>\n</blockquote>\n<blockquote>\n<p>出于安全考虑，没有条件不执行更新动作，避免误更新全表数据。更新全表数据：<code>fsql.Update&lt;T&gt;().Where(\"1=1\").Set(a =&gt; a.Xxx == xxx).ExecuteAffrows()</code></p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3、更新实体</h2>\n<p>方法 1：(推荐)</p>\n<blockquote>\n<p>只更新变化的属性，依赖 <code>FreeSql.Repository</code></p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>是不是觉得先查询再更新，啰嗦？</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>方法 2：(原始)</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>指定 <code>Set</code> 列更新后，<code>SetSource</code> 将失效</p>\n</blockquote>\n<blockquote>\n<p>SetSource 默认依赖实体 IsPrimary 特性，临时主键可使用 SetSource(items, a =&gt; a.Code)</p>\n</blockquote>\n<blockquote>\n<p>Oracle CASE when N'' 字符集不匹配，</p>\n</blockquote>\n<ul>\n<li>原因：实体主键 Column DbType 与表类型不一致造成，</li>\n<li>解决：[Column(DbType = \"varchar2\", StingLength = 255)]</li>\n</ul>\n<h2> 4、自定义 SQL</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5、根据 Dto 更新</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6、Set/SetSource/SetDto 区别</h2>\n<p>他们三个是平级功能，分别对应：</p>\n<ul>\n<li>\n<p><code>Set/SetRaw</code> 在知道实体的时候使用，对应 <code>update t set x = x</code></p>\n</li>\n<li>\n<p><code>SetSource</code> 更新整个实体，可以配合 <code>UpdateColumns</code> 或 <code>IgnoreColumns</code> 指定或忽略字段</p>\n</li>\n<li>\n<p><code>SetDto</code> 是 <code>Set</code> 的批量操作</p>\n</li>\n</ul>\n<h2> 7、字典更新</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 8、乐观锁</h2>\n<p>更新整个实体数据时，在并发情况下极容易造成旧数据将新的记录更新。</p>\n<p>乐观锁的原理，是利用实体某字段，如：<code>long version</code>，更新前先查询数据，此时 <code>version</code> 为 <code>1</code>，更新时产生的 SQL 会附加 <code>where version = 1</code>，当修改失败时（即 <code>Affrows == 0</code>）抛出异常（DbUpdateVersionException）。</p>\n<p>每个实体只支持一个乐观锁属性，在属性前标记特性：<code>[Column(IsVersion = true)]</code> 即可。</p>\n<blockquote>\n<p>适用 <code>SetSource</code> 更新，每次更新 <code>version</code> 的值都会增加 <code>1</code></p>\n</blockquote>\n<h2> 9、悲观锁</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>ForUpdate</code> 在 Oracle/PostgreSQL/MySql 是通用的写法，我们对 SqlServer 做了特别适配，执行的 SQL 语句大致如下：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 10、ISelect.ToUpdate 高级更新</h2>\n<p><code>IUpdate</code> 默认不支持导航对象，多表关联等。<code>ISelect.ToUpdate</code> 可将查询转为 <code>IUpdate</code>，以便使用导航对象更新数据，如下：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：此方法不是将数据查询到内存再更新，上面的代码产生如下 SQL 执行：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>复杂更新使用该方案的好处：</p>\n<ul>\n<li>更新前可预览测试数据，防止错误更新操作；</li>\n<li>支持复杂的更新操作，例如：<code>ISelect</code> 上使用 <code>Limit(10)</code> 更新附合条件的前 10 条记录；</li>\n</ul>\n<h2> 11、联表更新 UpdateJoin</h2>\n<p>v3.2.692+（高风险操作，高风险操作，高风险操作，请谨慎谨慎谨慎使用，测试并核对 ToSql 返回的内容）</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不同数据库产生的 SQL 不一样，以 MySql 为例：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>更复杂的联表更新：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 12、BulkCopy 批量更新</h2>\n<table>\n<thead>\n<tr>\n<th>程序包</th>\n<th>扩展方法</th>\n<th>说明 (v3.2.693)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FreeSql.Provider.SqlServer</td>\n<td>ExecuteSqlBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MySqlConnector</td>\n<td>ExecuteMySqlBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Oracle</td>\n<td>ExecuteOracleBulkCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Dameng</td>\n<td>ExecuteDmBulkCopy</td>\n<td>达梦</td>\n</tr>\n<tr>\n<td>FreeSql.Provider.PostgreSQL</td>\n<td>ExecutePgCopy</td>\n<td></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.KingbaseES</td>\n<td>ExecuteKdbCopy</td>\n<td>人大金仓</td>\n</tr>\n</tbody>\n</table>\n<p>原理：使用 BulkCopy 将数据插入到临时表，再使用 UPDATE FROM JOIN 联表更新。</p>\n<p>提示：当更新的字段数量超过 3000 时，收益较大。</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h1> API</h1>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SetSource</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>更新数据，设置更新的实体</td>\n</tr>\n<tr>\n<td>IgnoreColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>忽略的列</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>&lt;this&gt;</td>\n<td>Lambda, value</td>\n<td>设置列的新值，<code>Set(a =&gt; a.Name, \"newvalue\")</code></td>\n</tr>\n<tr>\n<td>Set</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>设置列的的新值为基础上增加，<code>Set(a =&gt; a.Clicks + 1)</code>，相当于 clicks=clicks+1</td>\n</tr>\n<tr>\n<td>SetDto</td>\n<td>&lt;this&gt;</td>\n<td>object</td>\n<td>根据 DTO 更新的方法</td>\n</tr>\n<tr>\n<td>SetRaw</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>设置值，自定义 SQL 语法，<code>SetRaw(\"title = @title\", new { title = \"newtitle\" })</code></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>表达式条件，仅支持实体基础成员（不包含导航对象）</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>原生 sql 语法条件，<code>Where(\"id = @id\", new { id = 1 })</code></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>传入实体或集合，将其主键作为条件</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回影响的行数</td>\n</tr>\n<tr>\n<td>ExecuteUpdated</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 语句，返回更新后的记录</td>\n</tr>\n<tr>\n<td>Join</td>\n<td>IUpdateJoin</td>\n<td></td>\n<td>联表更新</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-12-14T11:52:02.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "API 文档",
      "url": "https://freesql.net/reference/api.html",
      "id": "https://freesql.net/reference/api.html",
      "summary": "http://101.34.7.82:8082/api/FreeSql.html (http://101.34.7.82:8082/api/FreeSql.html); FreeSqlBuilder 方法 返回值 说明 -- -- -- UseConnectionString this 设置连接串 UseAdoConnectionPool this 设...",
      "content_html": "<h1> API 文档</h1>\n<ul>\n<li><a href=\"http://101.34.7.82:8082/api/FreeSql.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://101.34.7.82:8082/api/FreeSql.html</a></li>\n</ul>\n<h2> FreeSqlBuilder</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>UseConnectionString</td>\n<td>this</td>\n<td>设置连接串</td>\n</tr>\n<tr>\n<td>UseAdoConnectionPool</td>\n<td>this</td>\n<td>设置连接池方案（默认 false，远程访问建议设置 true）</td>\n</tr>\n<tr>\n<td>UseSlave</td>\n<td>this</td>\n<td>设置从数据库，支持多个</td>\n</tr>\n<tr>\n<td>UseSlaveWeight</td>\n<td>this</td>\n<td>设置从数据库权重</td>\n</tr>\n<tr>\n<td>UseConnectionFactory</td>\n<td>this</td>\n<td>设置自定义数据库连接对象（放弃内置对象连接池技术）</td>\n</tr>\n<tr>\n<td>UseAutoSyncStructure</td>\n<td>this</td>\n<td>【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体创建或修改表结构</td>\n</tr>\n<tr>\n<td>UseNoneCommandParameter</td>\n<td>this</td>\n<td>不使用命令参数化执行，针对 Insert/Update，也可临时使用 IInsert/IUpdate.NoneParameter()</td>\n</tr>\n<tr>\n<td>UseGenerateCommandParameterWithLambda</td>\n<td>this</td>\n<td>生成命令参数化执行，针对 lambda 表达式解析</td>\n</tr>\n<tr>\n<td>UseLazyLoading</td>\n<td>this</td>\n<td>开启延时加载功能</td>\n</tr>\n<tr>\n<td>UseMonitorCommand</td>\n<td>this</td>\n<td>监视全局 SQL 执行前后</td>\n</tr>\n<tr>\n<td>UseMappingPriority</td>\n<td>this</td>\n<td>指定映射优先级（默认 Aop &lt; FluentApi &lt; Attribute）</td>\n</tr>\n<tr>\n<td><strong>UseNameConvert</strong></td>\n<td>this</td>\n<td>自动转换名称 Entity -&gt; Db</td>\n</tr>\n<tr>\n<td>UseQuoteSqlName</td>\n<td>this</td>\n<td>SQL名称是否使用 [] `` \"\"</td>\n</tr>\n<tr>\n<td>UseExitAutoDisposePool</td>\n<td>this</td>\n<td>监听 AppDomain.CurrentDomain.ProcessExit/Console.CancelKeyPress 事件自动释放连接池 (默认true)</td>\n</tr>\n<tr>\n<td>Build&lt;T&gt;</td>\n<td>IFreeSql&lt;T&gt;</td>\n<td>创建一个 IFreeSql 对象，注意：单例设计，不要重复创建</td>\n</tr>\n</tbody>\n</table>\n<h2> IFreeSql</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"/guide/ado.html\" target=\"blank\">Ado</a></td>\n<td>IAdo</td>\n<td>数据库访问对象，封装了类似 SqlHelper 操作：ExecuteNonQuery/ExecuteScalar/ExecuteConnectTest 等</td>\n</tr>\n<tr>\n<td><a href=\"/guide/aop.html\" target=\"blank\">Aop</a></td>\n<td>IAop</td>\n<td>所有 AOP 拦截方法都在这里</td>\n</tr>\n<tr>\n<td><a href=\"/guide/code-first.html\" target=\"blank\">CodeFirst</a></td>\n<td>ICodeFirst</td>\n<td>封装 CodeFirst 模式开发相关方法</td>\n</tr>\n<tr>\n<td><a href=\"/guide/db-first.html\" target=\"blank\">DbFirst</a></td>\n<td>IDbFirst</td>\n<td>封装 DbFirst 模式开发相关方法</td>\n</tr>\n<tr>\n<td><a href=\"/guide/filters.html\" target=\"blank\">GlobalFilter</a></td>\n<td>GlobalFilter</td>\n<td>全局过滤设置，可默认附加为 Select/Update/Delete 条件</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Select&lt;TEntity&gt;</td>\n<td>ISelect&lt;TEntity&gt;</td>\n<td>无</td>\n<td>准备查询数据</td>\n</tr>\n<tr>\n<td>Insert&lt;TEntity&gt;</td>\n<td>IInsert&lt;TEntity&gt;</td>\n<td>无/TEntity/TEntity[]</td>\n<td>准备插入</td>\n</tr>\n<tr>\n<td>Update&lt;TEntity&gt;</td>\n<td>IUpdate&lt;TEntity&gt;</td>\n<td>无</td>\n<td>准备更新数据</td>\n</tr>\n<tr>\n<td>Delete&lt;TEntity&gt;</td>\n<td>IDelete&lt;TEntity&gt;</td>\n<td>无</td>\n<td>准备删除</td>\n</tr>\n<tr>\n<td>InsertOrUpdate&lt;TEntity&gt;</td>\n<td>IInsertOrUpdate&lt;TEntity&gt;</td>\n<td>无</td>\n<td>插入或更新数据</td>\n</tr>\n<tr>\n<td>Transaction</td>\n<td>void</td>\n<td>Action</td>\n<td>开启事务（不支持异步），<a href=\"/guide/transaction.html\" target=\"blank\">其他事务</a></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>扩展方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Select&lt;T1, T2, ... T10&gt;</td>\n<td>ISelect</td>\n<td>无</td>\n<td>准备多表查询</td>\n</tr>\n<tr>\n<td><a href=\"/guide/db-context.html\" target=\"blank\">CreateDbContext</a></td>\n<td>DbContext</td>\n<td>无</td>\n<td>创建普通数据上下文档对象，该对象功能类似于 EFCore</td>\n</tr>\n<tr>\n<td>SetDbContextOptions</td>\n<td>-</td>\n<td>Action</td>\n<td>设置此 IFreeSql 下 DbContext 选项设置</td>\n</tr>\n<tr>\n<td><a href=\"/guide/repository.html\" target=\"blank\">GetRepository</a>&lt;TEntity, TKey&gt;</td>\n<td>BaseRepository</td>\n<td>无</td>\n<td>返回默认仓库功能实现</td>\n</tr>\n<tr>\n<td><a href=\"/guide/unit-of-work.html\" target=\"blank\">CreateUnitOfWork</a></td>\n<td>IUnitOfWork</td>\n<td>无</td>\n<td>创建基于仓储功能的工作单元，务必使用 using 包含使用</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2> BaseRepository&lt;TEntity, TKey&gt;</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EntityType</td>\n<td>Type</td>\n<td>仓储正在操作的实体类型，注意它不一定是 TEntity</td>\n</tr>\n<tr>\n<td>UnitOfWork</td>\n<td>IUnitOfWork</td>\n<td>正在使用的工作单元</td>\n</tr>\n<tr>\n<td>Orm</td>\n<td>IFreeSql</td>\n<td>正在使用的 Orm</td>\n</tr>\n<tr>\n<td>DbContextOptions</td>\n<td>DbContextOptions</td>\n<td>正在使用的 DbContext 设置，修改设置不影响其他</td>\n</tr>\n<tr>\n<td>DataFilter</td>\n<td>IDataFilter&lt;TEntity&gt;</td>\n<td>仓储过滤器，本对象内生效</td>\n</tr>\n<tr>\n<td>Select</td>\n<td>ISelect&lt;TEntity&gt;</td>\n<td>准备查询数据</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AsType</td>\n<td>void</td>\n<td>Type</td>\n<td>改变仓储正在操作的实体类型</td>\n</tr>\n<tr>\n<td>Get</td>\n<td>TEntity</td>\n<td>TKey</td>\n<td>根据主键，查询数据</td>\n</tr>\n<tr>\n<td>Find</td>\n<td>TEntity</td>\n<td>TKey</td>\n<td>根据主键，查询数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>TKey</td>\n<td>根据主键删除数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>Lambda</td>\n<td>根据 lambda 条件删除数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>TEntity</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量删除数据</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>-</td>\n<td>TEntity</td>\n<td>插入数据，若实体有自增列，插入后的自增值会填充到实体中</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量插入数据</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>-</td>\n<td>TEntity</td>\n<td>更新数据</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量更新数据</td>\n</tr>\n<tr>\n<td>InsertOrUpdate</td>\n<td>-</td>\n<td>TEntity</td>\n<td>插入或更新数据</td>\n</tr>\n<tr>\n<td>FlushState</td>\n<td>-</td>\n<td>无</td>\n<td>清除状态管理数据</td>\n</tr>\n<tr>\n<td>Attach</td>\n<td>-</td>\n<td>TEntity</td>\n<td>附加实体到状态管理，可用于不查询就更新或删除</td>\n</tr>\n<tr>\n<td>Attach</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>批量附加实体到状态管理</td>\n</tr>\n<tr>\n<td>AttachOnlyPrimary</td>\n<td>-</td>\n<td>TEntity</td>\n<td>只附加实体的主键数据到状态管理</td>\n</tr>\n<tr>\n<td>SaveMany</td>\n<td>-</td>\n<td>TEntity, string</td>\n<td>保存实体的指定 ManyToMany/OneToMany 导航属性（完整对比）</td>\n</tr>\n<tr>\n<td>BeginEdit</td>\n<td>-</td>\n<td>List&lt;TEntity&gt;</td>\n<td>准备编辑一个 List 实体</td>\n</tr>\n<tr>\n<td>EndEdit</td>\n<td>int</td>\n<td>无</td>\n<td>完成编辑数据，进行保存动作</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>状态管理，可实现 Update 只更新变化的字段（不更新所有字段），灵活使用 Attach 和 Update 用起来非常舒服。</p>\n</blockquote>\n<p>DbContext 与 BaseRepository 功能大致类似。</p>\n<p>DbContext 自身 = 完整事务，BaseRepository 不一定有事务（可通过设置其 UnitOfWork 属性）。</p>\n<hr>\n<h2> ICodeFirst</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IsAutoSyncStructure</td>\n<td>bool</td>\n<td>【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改</td>\n</tr>\n<tr>\n<td>IsSyncStructureToLower</td>\n<td>bool</td>\n<td>是否转小写映射，适合 pgsql</td>\n</tr>\n<tr>\n<td>IsSyncStructureToUpper</td>\n<td>bool</td>\n<td>是否转大写映射，适合 oracle、dameng</td>\n</tr>\n<tr>\n<td>IsNoneCommandParameter</td>\n<td>bool</td>\n<td>是否不使用命令参数化执行，针对 Insert/Update</td>\n</tr>\n<tr>\n<td>IsGenerateCommandParameterWithLambda</td>\n<td>bool</td>\n<td>是否生成命令参数化执行，针对 where lambda 表达式解析</td>\n</tr>\n<tr>\n<td>IsLazyLoading</td>\n<td>bool</td>\n<td>是否开启延时加载导航属性对象，导航属性需要声明 virtual</td>\n</tr>\n<tr>\n<td>IsConfigEntityFromDbFirst</td>\n<td>bool</td>\n<td>将数据库的主键、自增、索引设置导入，适合 DbFirst 模式，无须在实体类型上设置 [Column(IsPrimary)]。此功能目前可用于 mysql/sqlserver/postgresql/oracle，此功能会影响 IFreeSql 首次访问的速度。若使用 CodeFirst 创建索引后，又直接在数据库上建了索引，若无本功能下一次 CodeFirst 迁移时数据库上创建的索引将被删除</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GetComparisonDDLStatements&lt;TEntity&gt;</td>\n<td>string</td>\n<td>无</td>\n<td>将实体类型与数据库对比，返回 DDL 语句</td>\n</tr>\n<tr>\n<td>GetComparisonDDLStatements</td>\n<td>string</td>\n<td>Type[]</td>\n<td>将多个实体类型与数据库对比，返回 DDL 语句</td>\n</tr>\n<tr>\n<td>GetComparisonDDLStatements</td>\n<td>string</td>\n<td>Type, string</td>\n<td>将实体类型与数据库对比，返回 DDL 语句(指定表名)</td>\n</tr>\n<tr>\n<td>SyncStructure&lt;TEntity&gt;</td>\n<td>bool</td>\n<td>无</td>\n<td>同步实体类型到数据库</td>\n</tr>\n<tr>\n<td>SyncStructure</td>\n<td>bool</td>\n<td>Type[]</td>\n<td>同步实体类型集合到数据库</td>\n</tr>\n<tr>\n<td>SyncStructure</td>\n<td>bool</td>\n<td>Type, string</td>\n<td>同步实体类型到数据库（指定表名）</td>\n</tr>\n<tr>\n<td>ConfigEntity</td>\n<td>ICodeFirst</td>\n<td>Action&lt;TableFluent&lt;T&gt;&gt;</td>\n<td>FluentAPI 配置实体的特性</td>\n</tr>\n<tr>\n<td>GetTableByEntity</td>\n<td>TableInfo</td>\n<td>Type</td>\n<td>获取类型在 ORM 内部的元数据</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2> IDbFirst</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GetDatabases</td>\n<td>List&lt;string&gt;</td>\n<td>无</td>\n<td>获取所有数据库</td>\n</tr>\n<tr>\n<td>GetTablesByDatabase</td>\n<td>List&lt;DbTableInfo&gt;</td>\n<td>string[]</td>\n<td>获取指定数据库的表信息，包括表、列详情、主键、唯一键、索引、外键、备注</td>\n</tr>\n<tr>\n<td>GetTableByName</td>\n<td>DbTableInfo</td>\n<td>string</td>\n<td>获取指定单表信息，包括列详情、主键、唯一键、索引、备注</td>\n</tr>\n<tr>\n<td>ExistsTable</td>\n<td>bool</td>\n<td>string</td>\n<td>判断表名是否存在</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2> ISelect</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n<td></td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 查询，返回 T1 实体所有字段的记录，若存在导航属性则一起查询返回，记录不存在时返回 Count 为 0 的列表</td>\n<td></td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>执行 SQL 查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表</td>\n<td></td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>执行 SQL 查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表</td>\n<td></td>\n</tr>\n<tr>\n<td>ToOne</td>\n<td>T1</td>\n<td></td>\n<td>执行 SQL 查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null</td>\n<td></td>\n</tr>\n<tr>\n<td>Any</td>\n<td>bool</td>\n<td></td>\n<td>执行 SQL 查询，是否有记录</td>\n<td></td>\n</tr>\n<tr>\n<td>Sum</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求和</td>\n<td></td>\n</tr>\n<tr>\n<td>Min</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最小值</td>\n<td></td>\n</tr>\n<tr>\n<td>Max</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求最大值</td>\n<td></td>\n</tr>\n<tr>\n<td>Avg</td>\n<td>T</td>\n<td>Lambda</td>\n<td>指定一个列求平均值</td>\n<td></td>\n</tr>\n<tr>\n<td>【分页】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>long</td>\n<td></td>\n<td>查询的记录数量</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>&lt;this&gt;</td>\n<td>out long</td>\n<td>查询的记录数量，以参数 out 形式返回</td>\n<td></td>\n</tr>\n<tr>\n<td>Skip</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>查询向后偏移行数</td>\n<td></td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>查询向后偏移行数</td>\n<td></td>\n</tr>\n<tr>\n<td>Limit</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>查询多少条数据</td>\n<td></td>\n</tr>\n<tr>\n<td>Take</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>查询多少条数据</td>\n<td></td>\n</tr>\n<tr>\n<td>Page</td>\n<td>&lt;this&gt;</td>\n<td>int pageIndex, int pageSize</td>\n<td>分页</td>\n<td></td>\n</tr>\n<tr>\n<td>【条件】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>支持多表查询表达式，多次使用相当于 AND</td>\n<td></td>\n</tr>\n<tr>\n<td>WhereIf</td>\n<td>&lt;this&gt;</td>\n<td>bool, Lambda</td>\n<td>支持多表查询表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>原生 sql 语法条件，Where(\"id = ?id\", new { id = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>WhereIf</td>\n<td>&lt;this&gt;</td>\n<td>bool, string, parms</td>\n<td>原生 sql 语法条件，WhereIf(true, \"id = ?id\", new { id = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>WhereCascade</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>实现多表查询时，向每个表中附加条件</td>\n<td></td>\n</tr>\n<tr>\n<td>【分组】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按选择的列分组，GroupBy(a =&gt; a.Name)、GroupBy(a =&gt; new{a.Name,a.Time})</td>\n<td></td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生 sql 语法分组，GroupBy(\"concat(name, ?cc)\", new { cc = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>Having</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生 sql 语法聚合条件过滤，Having(\"count(name) = ?cc\", new { cc = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>Distinct</td>\n<td>&lt;this&gt;</td>\n<td></td>\n<td>.Distinct().ToList(x =&gt; x.GroupName) 是对指定字段</td>\n<td></td>\n</tr>\n<tr>\n<td>【排序】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OrderBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按列排序，OrderBy(a =&gt; a.Time)，可多次使用</td>\n<td></td>\n</tr>\n<tr>\n<td>OrderByDescending</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按列倒向排序，OrderByDescending(a =&gt; a.Time)</td>\n<td></td>\n</tr>\n<tr>\n<td>OrderBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生 sql 语法排序，OrderBy(\"count(name) + ?cc\", new { cc = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>OrderByPropertyName</td>\n<td>string, bool</td>\n<td>按属性名字符串排序（支持导航属性）</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>【联表】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>LeftJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>左联查询，可使用导航属性，或指定关联的实体类型</td>\n<td></td>\n</tr>\n<tr>\n<td>InnerJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>联接查询，可使用导航属性，或指定关联的实体类型</td>\n<td></td>\n</tr>\n<tr>\n<td>RightJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>右联查询，可使用导航属性，或指定关联的实体类型</td>\n<td></td>\n</tr>\n<tr>\n<td>LeftJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>左联查询，使用原生 sql 语法，LeftJoin(\"type b on b.id = a.id and b.clicks &gt; ?clicks\", new { clicks = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>InnerJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>联接查询，使用原生 sql 语法，InnerJoin(\"type b on b.id = a.id and b.clicks &gt; ?clicks\", new { clicks = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>RightJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>右联查询，使用原生 sql 语法，RightJoin(\"type b on b.id = a.id and b.clicks &gt; ?clicks\", new { clicks = 1 })</td>\n<td></td>\n</tr>\n<tr>\n<td>From</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>多表查询，3 个表以上使用非常方便，目前设计最大支持 10 个表</td>\n<td></td>\n</tr>\n<tr>\n<td>【其他】</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>As</td>\n<td>&lt;this&gt;</td>\n<td>string alias = \"a\"</td>\n<td>指定别名</td>\n<td></td>\n</tr>\n<tr>\n<td>Master</td>\n<td>&lt;this&gt;</td>\n<td></td>\n<td>指定从主库查询（默认查询从库）</td>\n<td></td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n<td></td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n<td></td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n<td></td>\n</tr>\n<tr>\n<td>WithLock</td>\n<td>&lt;this&gt;</td>\n<td>Enum</td>\n<td>SqlServer NoLock 等特有的设置</td>\n<td></td>\n</tr>\n<tr>\n<td>ForUpdate</td>\n<td>&lt;this&gt;</td>\n<td>bool</td>\n<td>排他更新锁，对不同的数据库已作适配，详细说明见注释</td>\n<td></td>\n</tr>\n<tr>\n<td>AsQueryable</td>\n<td>IQueryable</td>\n<td></td>\n<td>将 ISelect 转换为 IQueryable，此方法主要用于扩展，比如：abp IRepository GetAll() 接口方法需要返回 IQueryable 对象。注意：IQueryable 方法污染较为严重，请尽量避免此转换</td>\n<td></td>\n</tr>\n<tr>\n<td>ToTreeList()</td>\n<td>List&lt;TEntity&gt;</td>\n<td>无</td>\n<td>将父子关系的数据以 TreeList 的形式返回</td>\n<td></td>\n</tr>\n<tr>\n<td>AsTreeCte()</td>\n<td>ISelect</td>\n<td>(up, pathSelector, level)</td>\n<td>递归查询父子关系表</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2> IInsert</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AppendData</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>追加准备插入的实体</td>\n</tr>\n<tr>\n<td>InsertIdentity</td>\n<td>&lt;this&gt;</td>\n<td>无</td>\n<td>指明插入自增列</td>\n</tr>\n<tr>\n<td>InsertColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>只插入的列</td>\n</tr>\n<tr>\n<td>IgnoreColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>忽略的列</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>OnDuplicateKeyUpdate</td>\n<td>OnDuplicateKeyUpdate&lt;T1&gt;</td>\n<td>无</td>\n<td>MySql 特有的功能，On Duplicate Key Update</td>\n</tr>\n<tr>\n<td>OnConflictDoUpdate</td>\n<td>OnConflictDoUpdate&lt;T1&gt;</td>\n<td>无</td>\n<td>PostgreSQL 特有的功能，On Conflict Do Update</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回影响的行数</td>\n</tr>\n<tr>\n<td>ExecuteIdentity</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回自增值</td>\n</tr>\n<tr>\n<td>ExecuteInserted</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 语句，返回插入后的记录</td>\n</tr>\n<tr>\n<td>ExecuteSqlBulkCopy</td>\n<td>void</td>\n<td></td>\n<td>SqlServer 特有的功能，执行 SqlBulkCopy 批量插入的封装</td>\n</tr>\n<tr>\n<td>ExecutePgCopy</td>\n<td>void</td>\n<td></td>\n<td>PostgreSQL 特有的功能，执行 Copy 批量导入数据</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2> IUpdate</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SetSource</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>更新数据，设置更新的实体</td>\n</tr>\n<tr>\n<td>IgnoreColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>忽略的列</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>&lt;this&gt;</td>\n<td>Lambda, value</td>\n<td>设置列的新值，Set(a =&gt; a.Name, \"newvalue\")</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>设置列的的新值为基础上增加，Set(a =&gt; a.Clicks + 1)，相当于 clicks=clicks+1</td>\n</tr>\n<tr>\n<td>SetDto</td>\n<td>&lt;this&gt;</td>\n<td>object</td>\n<td>根据 dto 更新的方法</td>\n</tr>\n<tr>\n<td>SetRaw</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>设置值，自定义 SQL 语法，SetRaw(\"title = ?title\", new { title = \"newtitle\" })</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>表达式条件，仅支持实体基础成员（不包含导航对象）</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>原生 sql 语法条件，Where(\"id = ?id\", new { id = 1 })</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>传入实体或集合，将其主键作为条件</td>\n</tr>\n<tr>\n<td>WhereExists</td>\n<td>&lt;this&gt;</td>\n<td>ISelect</td>\n<td>子查询是否存在</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回影响的行数</td>\n</tr>\n<tr>\n<td>ExecuteUpdated</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 语句，返回更新后的记录</td>\n</tr>\n<tr>\n<td>Join</td>\n<td>IUpdateJoin</td>\n<td></td>\n<td>联表更新</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2> IDelete</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>表达式条件，仅支持实体基础成员（不包含导航对象）</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>原生 sql 语法条件，Where(\"id = ?id\", new { id = 1 })</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>传入实体或集合，将其主键作为条件</td>\n</tr>\n<tr>\n<td>WhereExists</td>\n<td>&lt;this&gt;</td>\n<td>ISelect</td>\n<td>子查询是否存在</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>命令超时设置(秒)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>设置事务对象</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>设置连接对象</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>返回即将执行的 SQL 语句</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>执行 SQL 语句，返回影响的行数</td>\n</tr>\n<tr>\n<td>ExecuteDeleted</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>执行 SQL 语句，返回被删除的记录</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-01-30T13:55:37.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "更新日志",
      "url": "https://freesql.net/reference/change-log.html",
      "id": "https://freesql.net/reference/change-log.html",
      "summary": "大约每月一次版本号，暂时以修复 bug 为主 v3.2.820 增加 DynamicEntity TypeBuilder 只读属性；; 修复 .NET9 TimeSpan.FromSeconds Reflect bug；#1748; 修复 IBaseRepository.IncludePropertyName 可能报错的问题；#1740; 修复 弱类型...",
      "content_html": "<h1> 更新日志</h1>\n<p>大约每月一次版本号，暂时以修复 bug 为主</p>\n<h2> v3.2.820</h2>\n<ul>\n<li>增加 DynamicEntity TypeBuilder 只读属性；</li>\n<li>修复 .NET9 TimeSpan.FromSeconds Reflect bug；#1748</li>\n<li>修复 IBaseRepository.IncludePropertyName 可能报错的问题；#1740</li>\n<li>修复 弱类型 IBaseRepository&lt;object&gt; 级联操作问题；#1740</li>\n<li>修复 Where(HzyTuple) 参数为 null 时的错误；#1744</li>\n<li>修复 IUpdate.SetSource SqlServer 批量更新 Cast 问题；#1755</li>\n<li>修复 SqlServer 导航属性 .Any 布尔子条件解析问题；</li>\n<li>优化 DbSet/Repository Attach 与 CanUpdate AuditValue 状态不同步问题；#1746</li>\n<li>优化 QuestDb BulkCopy 重命名为：ExecuteQuestDbBulkCopy；#1758</li>\n<li>优化 Clickhouse BulkCopy 重命名为：ExecuteClickHouseBulkCopy；#1758</li>\n</ul>\n<h2> v3.2.815</h2>\n<ul>\n<li>修复 MySqlEnum CHAR/BYTE 替换后前面多个空格的问题；#1737</li>\n<li>修复 Clickhouse ToInt32/ToInt64 解析错误；</li>\n<li>修复 WithMemory 对 InsertValueSql 属性无效的问题；</li>\n<li>修复 ZeroDbContext GroupBy BUG；</li>\n<li>修复 聚合根仓储 InsertOrUpdate OneToMany 只插入一条记录的 bug；</li>\n<li>优化 TypeHandlers 支持 Enum 枚举映射规则；#1634</li>\n</ul>\n<h2> v3.2.812</h2>\n<ul>\n<li>增加 DbContextOptions.AuditValue 基于 Ioc Scoped 审计值；</li>\n<li>优化 ManyToMany 导航属性约定命名匹配嵌套类；</li>\n<li>修复 MySql AsTreeCte pathSelector 别名问题；</li>\n<li>修复 ClickHouse UpdateDict 报错问题；#1712</li>\n<li>修复 MsAccess 日期问题；#1724 #1725</li>\n</ul>\n<h2> v3.2.810</h2>\n<ul>\n<li>修复 GroupBy + WithTempQuery 别名问题；</li>\n<li>修复 DbContext/Repository InsertOrUpdate 无变化时触发 Insert 逻辑报错；#1700</li>\n<li>修复 ClickHouse 数组类型 hasAny 与 In 解析冲突问题；#1699</li>\n<li>补充 WithMemory null/Empty 参数判断；</li>\n<li>优化 表达式树解析；</li>\n</ul>\n<h2> v3.2.808</h2>\n<ul>\n<li><strong>增加 低代码扩展包 <a href=\"/guide/lowcode.html\" target=\"blank\">FreeSql.Extensions.ZeroEntity</a>；</strong></li>\n<li><strong>增加 Clickhouse Bool/Array 类型适配；（感谢 d4ilys）#1568</strong></li>\n<li>增加 Clickhouse BulkCopy；</li>\n<li>增加 IBaseRepository.AsTable 重载方法支持多表表名设置；</li>\n<li><strong>增加 IAsTable 自动分表支持不规则时间间隔；</strong></li>\n<li><strong>增加 IAsTable.SetTableName 自动分表设置分表名；</strong></li>\n<li><strong>增加 IAsTable.SetDefaultAllTables 自动分表拦截未使用 where 条件的场景；</strong></li>\n<li>增加 IUpdate.ExecuteUpdated 指定字段返回；#1681</li>\n<li>增加 IUpdate.SetDtoIgnore 忽略Dto更新方法；#1688</li>\n<li>增加 ICodeFirst.SyncStructure(TableInfo) 重载方法迁移表结构；</li>\n<li>增加 IUpdate/IDelete WhereDynamicFilter API；#1521</li>\n<li>增加 WithSql(..).WhereDynamicFilter 的支持；</li>\n<li>增加 pgsql 扩展方法 ISelect.DistinctOn；#1680</li>\n<li>修复 Column DbType 与 StringLength 多次替换问题；</li>\n<li>修复 Where(a =&gt; a.bool) 当使用了 MapType(int) 时出现 bug；</li>\n<li>修复 SqlServer 批量更新 bool? null 值生成多余的 case when SQL；</li>\n<li>修复 Xugu 批量插入/更新 SQL 报错；</li>\n<li>修复 OledbOracle 参数化处理 bug；</li>\n<li>修复 多表子查询参数化共享问题；</li>\n<li>修复 嵌套查询 DTO 映射可能触发循环引用 bug；</li>\n<li>补充 达梦 IDbFirst datetime 处理；</li>\n<li>补充 FluentApi AsTable 方法；</li>\n<li><strong>优化 自动分表 join 分表（自动贴合）；</strong></li>\n<li>优化 UnionAll + WithTempQuery 嵌套的 SQL；</li>\n<li>优化 Update 无字段时不做任何处理；</li>\n<li>优化 IUpdate 未使用 .Set 时忽略执行；#1694</li>\n<li>优化 表达式解析变量或常量 ToString；</li>\n</ul>\n<h2> v3.2.805</h2>\n<ul>\n<li>更新 支持到 .net8.0，FreeSql.DbContext 放弃 .netcoreapp2.1 依赖注入；</li>\n<li>调整 DataType.SqlServer/MySql/PostgreSQL 默认使用 Ado 连接池；</li>\n<li>增加 InsertDict ExecuteIdentity 重载指定自增列；</li>\n<li>修复 Expression 导致 AOT 运行失败的问题；</li>\n<li>修复 MySql 8.0 索引 DESC 的判断；#1664</li>\n<li>修复 Xugu Insert + AsTable + ExecuteIdentity bug；</li>\n<li>修复 虚谷日期格式化函数映射；</li>\n<li>优化 RereadSql 支持表的其他字段使用；#1655</li>\n</ul>\n<h2> v3.2.802</h2>\n<ul>\n<li>增加 Aop.AuditDataReader 参数属性 PropertyInfo，实现自定义拦截；</li>\n<li>修复 v3.2.801 AsTreeCte cte_path 别名问题；</li>\n<li>修复 UpdateJoin SetIf 逻辑判断问题；</li>\n<li>修复 UpdateJoin IsVersion 字段的别名问题；</li>\n<li>修复 RawJoin 可能生成错误的 SQL；</li>\n<li>修复 Repository.InsertOrUpdate 更新未变化时的 SQL 错误；#1630</li>\n<li>修复 IncludeMany 变异 Where + ToList dto 无法级联；</li>\n<li>修复 Ado.net 扩展方法 SqliteCore 支持；#1638</li>\n<li>修复 Xugu 有关 bug；</li>\n<li>优化 TypeHandlers 支持 DateTime 映射规则；#1634</li>\n<li>优化 IUpdateJoin AsTable 同时对多表名设置；</li>\n<li>优化 多实例情况下 TableInfo 集合缓存；</li>\n</ul>\n<h2> v3.2.801</h2>\n<ul>\n<li>增加 FreeSql.Internal.Utils.TypeHandlers 自定义类型映射；</li>\n<li>增加 IInsertOrUpdate BatchOptions 选项；</li>\n<li><strong>修复 v3.2.700 oracle/达梦子查询 BUG；</strong></li>\n<li>修复 FreeSql.Geneartor 无法生成人大金仓数据库问题；</li>\n<li>修复 ClickHouse CodeFirst 多主键问题；</li>\n<li>修复 QuestDB BulkCopy 自定义表名无效的问题；</li>\n<li>修复 QuestDb And Or 优先级解析问题；</li>\n<li>修复 DynamicEntity 特性构造函数实例化问题；</li>\n<li>修复 IInsertOrUpdate BulkCopy 临时表名的问题；#1603</li>\n<li>修复 IUpdateJoin + 全局过滤器 + 从表不生效问题；#1612</li>\n<li>修复 JsonMap 进行 null 或非 null 查询；#1613</li>\n<li>修复 GroupBy + WithTempQuery + .Key.xx + 特性名与实体不同 + 三元表达式解析问题；</li>\n<li>修复 MySql AsTreeCte cte_path 可能长度过短问题；</li>\n<li>修复 MySql + InsertOrUpdateDict + IfExistsDoNothing 错误；#1601</li>\n<li>优化 MySql/Sqlite InsertOrUpdate + IfExistsDoNothing 简化 SQL insert ignore into；#1601</li>\n<li>优化 WithLock/WithIndex 非 SqlServer 时忽略；</li>\n<li>优化 MySql ServerTime = DateTimeKind.Utc 不支持 utc_timestamp 默认值问题；#1604</li>\n<li>优化 ObjectPool 恢复可用的时机；</li>\n</ul>\n<h2> v3.2.700 (oracle/达梦子查询有 BUG)</h2>\n<ul>\n<li>增加 GlobalFilter.Apply before 参数将过滤条件插入 where 之前；#1566 #1492</li>\n<li>增加 多表 As 设置别名的方法 fsql.Select&lt;T1, T2&gt;().As(\"t1\", \"t2\")；</li>\n<li>优化 WithTempQuery + SqlServer 未指定 OrderBy 的分页；</li>\n<li>优化 GetPropertiesDictIgnoreCase 不返回没有 get 的属性；</li>\n<li>修复 QuestDB Guid 类型的问题；</li>\n<li>修复 BaseEntity 子查询 .Where 问题；#1586</li>\n</ul>\n<h2> v3.2.698</h2>\n<ul>\n<li>增加 FreeSqlBuilder UseAdoConnectionPool 更换连接池方案；#1524 #1343 #1283 #755</li>\n<li>增加 InsertOrUpdateDict WhereIdentityPrimary 方法；</li>\n<li>增加 pgsql 索引 B_Tree, Hash, GiST, GIN, SP_GiST, BRIN；</li>\n<li>修复 pgsql jsonb poco 方案联表查询问题；#1549 #1071</li>\n<li>修复 pgsql Geo 函数自定义解析深度问题；#1422</li>\n<li>修复 PgCopy 处理 jsonb 类型的问题；#1532</li>\n<li>修复 Enum.ToString() 即使 MapType=int 也应解析成 string；#1252 #806</li>\n<li>修复 repository/dbset AddRange AuditValue IEnumable 失败的 bug；#1545</li>\n<li>修复 达梦某情况连接串解析 user id 问题；</li>\n<li>修复 QuestDB 表达式解析 DateTime.UtcNow bug；</li>\n<li>修复 QuestDb BulkCopy在特定情况下无法解析表名问题；</li>\n<li>优化 QuestDB Guid 映射；</li>\n<li>优化 QuestDB 类型映射，表达式函数解析，新增 QuestFunc 函数解析；</li>\n<li>优化 uow + ISelect.ToUpdate 事务传播；#1562</li>\n<li>调整 QuestDB SampleUnits 命名，去掉 s；</li>\n</ul>\n<h2> v3.2.697</h2>\n<ul>\n<li>增加 IInsertOrUpdate.UpdateSet 指定更新；</li>\n<li>修复 3.2.696 自动分表 bug；#1527 e79860164d5d12e4f7df747f0e29503dff301cb7</li>\n</ul>\n<h2> v3.2.696</h2>\n<ul>\n<li>修复 &lt;object&gt; + AsType + (a as BaseEntity) 解析问题；#1427</li>\n<li>修复 IUpdateJoin 联表更新表达式赋值解析报错；</li>\n<li>修复 MySqlProvider .NetFramework 下可能报初始化类型错误；</li>\n<li>修复 自动分表 IUpdate/IDelete AsTable 不生效的问题；</li>\n<li>修复 FromQuery + WithTempQuery 嵌套查询多层后别名问题；#1510</li>\n<li>修复 WithTempQuery + Oracle 分页问题；#1519</li>\n<li>修复 Oracle 插入 LONG RAW 类型的问题；</li>\n<li>修复 BulkCopyUpdate 临时表名大小写问题；</li>\n<li>优化 IUpdate 批量 case when 同值的 SQL 生成；#1393</li>\n</ul>\n<h2> v3.2.695</h2>\n<ul>\n<li>增加 虚谷数据库 FreeSql.Provider.Xugu；</li>\n<li>增加 IInsert IgnoreInsertValueSql 方法临时忽略 InsertValueSql 设置；</li>\n<li>增加 部分 LocalExecuteScalar Aop.CommandAfter 事件；#1481</li>\n<li>增加 QuestDB SampleBy 对准日历参数；</li>\n<li>增加 动态操作创建实体API，fsql.CodeFirst.DynamicEntity；（感谢 Daily 贡献）</li>\n<li>修复 OracleOledb 引起的读取类型问题；</li>\n</ul>\n<h2> v3.2.693</h2>\n<ul>\n<li>添加 IInsertOrUpdate 高性能插入或更新 SqlServer/MySql/Oracle/Pgsql/达梦/人大金仓；</li>\n<li>增加 IUpdate 高性能批量更新 Oracle/达梦/人大金仓；</li>\n<li>增加 TableInfo.SetAsTable 自动分表的设置；</li>\n<li><strong>修复 SqlServer 自增 BulkUpdate bug；#1476</strong></li>\n<li>修复 表达式树解析 string.Concat 多于3个时的 bug；</li>\n<li>修复 UpdateJoin null 错误；</li>\n<li>优化 UpdateJoin Set 固定值解析；</li>\n<li>优化 .Select&lt;object&gt;().WithSql(sql).ToList() 体验；</li>\n</ul>\n<h2> v3.2.692</h2>\n<ul>\n<li>增加 IUpdate.Join 联表更新功能；(高风险操作，请谨慎使用)</li>\n<li>修复 InsertOrUpdateDict Oracle byte[] 长度判断问题；#1462</li>\n<li>修复 InsertDict 等字典操作在 SqlServer 下的问题；</li>\n<li>修复 ISelect&lt;T&gt; FromQuery 多表重载可能出现 null 报错；</li>\n</ul>\n<h2> v3.2.691</h2>\n<ul>\n<li>增加 ISelect&lt;T&gt; FromQuery 重载多表嵌套；</li>\n<li>增加 实体备注从 Description/Display/DisplayName 等特性兼容读取；</li>\n<li>增加 ISelectGrouping First 方法；</li>\n<li>增加 IInsertOrUpdate SetSource 重载方法；</li>\n<li>优化 WithTempQuery + ToList 使用子查询；</li>\n<li>优化 IInsertOrUpdate SetSource tempPrimary 自增的忽略插入；</li>\n<li>修复 Clickhouse 自动分表 where 条件分析问题；</li>\n<li>修复 DBFirst 延迟加载 ManyToOne 返回总是NULL；#1451</li>\n<li>修复 QuestDB CodeFirst AutoSubtableAttribute/ColumnAttribute判断bug</li>\n</ul>\n<h2> v3.2.690</h2>\n<ul>\n<li>增加 [Navigate(xx, TempPrimary = xx)] 与非主键关联；（仅支持查询）</li>\n<li><strong>修复 3.2.689/3.2.688 WithTempQuery DTO 映射查询遗留问题；</strong></li>\n<li>优化 AsTable 自动分表，提供超始小时的设置；</li>\n</ul>\n<h2> v3.2.688</h2>\n<ul>\n<li><strong>增加 QuestDB 时序数据库支持；（感谢 Daily 贡献）</strong></li>\n<li>修复 Array.Any OR 表达式树解析 bug；</li>\n<li>修复 GroupBy 之后 WithTempQuery 参数化时未传递的问题；</li>\n<li>修复 BulkUpdate 触发 Aop.AuditValue Insert 类型的问题；</li>\n<li>修复 Ado.ExecuteNonQuery 超时参数未生效的问题；#1441</li>\n<li>修复 Firebird CodeFirst 索引 DESC 问题；#1413</li>\n<li>优化 Firebird CodeFirst 迁移代码；</li>\n<li>优化 Firebird 表达式树位运算的适配解析；#1413</li>\n<li>优化 SqlServer timestamp 行版本的支持；#1412</li>\n<li>优化 pgsql15.0 部分类型兼容；#1436</li>\n<li>完善 Sqlite DbFirst 获取索引信息；#1425</li>\n<li>优化 适配达梦最新驱动；</li>\n<li>优化 IUpdate 组合更新方式；</li>\n<li>优化 IUpdate.Set(xx, null) 的情况；</li>\n<li>优化 ISelect&lt;object&gt; AsType 的父子类转换时的情况；#1427</li>\n<li>优化 支持动态操作 IncludeByPropertyName then.WhereDynamicFilter 操作；</li>\n<li>优化 WithTempQuery 场景的 DTO 映射查询；</li>\n</ul>\n<h2> v3.2.687</h2>\n<ul>\n<li><strong>修复 3.2.686 JsonMap bug；</strong></li>\n<li>优化 参数化增加 ExpandoObject 支持；#1403</li>\n<li>优化 pgsql15.0 Version 版本号处理；</li>\n<li>优化 pgsql CodeFirst Syncsture CREATE INDEX code；</li>\n</ul>\n<h2> v3.2.686</h2>\n<ul>\n<li>增加 FreeSqlBuilder UseQuoteSqlName 设置不使用 [] `` \"\" 限定符号；</li>\n<li>增加 Aop.CommandBefore 设置 .CommandText = null 可拦截某次执行；</li>\n<li>增加 IAdo.ExecuteNonQuery 重载方法（虚谷数据库）；</li>\n<li><strong>修复 UseSlaveWeight 异步下可能无效的问题；#1382</strong></li>\n<li>修复 HzyTuple 嵌套解析问题；#1390</li>\n<li>修复 AsType 表达式解析问题；#1389</li>\n<li>修复 pgsql OnConflictDoUpdate 临时主键问题；#1393</li>\n<li>修复 ClickHouse 联表查询 GLOBAL left join、Ado.Query * 问题；#1383</li>\n<li>优化 ClickHouse like 为 positionCaseInsensitive #1386</li>\n<li>优化 JsonMap 对基础类型的无效判断；#1385</li>\n<li>优化 IUpdate 批量 case when 同值的 SQL 生成；#1393</li>\n<li>优化 IAdo.ConnectionString 使用 UseConnectionFactory 时值为 NULL 的问题；</li>\n</ul>\n<h2> v3.2.685</h2>\n<ul>\n<li><strong>增加 IUpdate&lt;T&gt; BulkCopy 批量更新扩展方法；（暂时支持 SqlServer/MySql/PostgreSQL）</strong></li>\n<li>修复 ClickHouse CodeFirst 表结构同步问题；</li>\n<li>修复 ISelectGrouping ToSql AsProperty 别名无效问题；</li>\n<li>优化 UnitOfWork 与 ForUpdate 事务开启逻辑；</li>\n<li>优化 MySqlConnector MySqlDataTime 读取；</li>\n<li>优化 linq.dynamic Expression Invoke 解析；#1378</li>\n</ul>\n<h2> v3.2.684</h2>\n<ul>\n<li><strong>修复 Firebird CodeFirst.SyncStructure 自增主键错误；(受影响版本 3.2.666-3.2.683)</strong></li>\n<li>修复 Firebird [Index(\"{tablename}_Name\" 分表索引名未处理的 bug；#1346</li>\n<li>修复 InsertDict DBNull.Value 值无法插入的问题；#1336</li>\n<li>修复 fsql.InsertOrUpdate SetSource(sql) 无效的 bug；</li>\n<li>优化 string[].Any(..) 表达式树解析；ReplaceParameterVisitor</li>\n<li>优化 ISelect&lt;T1, T2&gt; 对象 .LeftJoin&lt;T2&gt; 表别名；#1348</li>\n</ul>\n<h2> v3.2.683</h2>\n<ul>\n<li><strong>修复 Repository/DbContext 同一实例执行报错后续无法再 CRUD；</strong></li>\n<li><strong>修复 UnitOfWorkManager + Repository.SaveMany 事务切换问题；</strong></li>\n<li>修复 导航属性 PgArrayToMany 数组字段为空时的 bug；</li>\n<li>修复 导航属性 PgArrayToMany DTO 异步查询报错的 bug（同步方法正常）；</li>\n<li>修复 SqlExt count/avg 开窗函数参数；#1321</li>\n<li>修复 Sqlite TimeSpan 类型映射错误；</li>\n<li>修复 Sqlite Attachs 多库索引 {tablename} 问题；</li>\n<li>修复 EndEdit 未触发 OnEntityChange；</li>\n<li>修复 fsql.InsertOrUpdate CanInsert=false,CanUpdate=true (mysql/pgsql）不生效的 bug；</li>\n<li>修复 聚合根仓储（实验） InsertOrUpdate 重复插入的 bug；</li>\n<li>修复 聚合根仓储（实验） Update 未更新自增状态管理的 bug；</li>\n<li>修复 SqlServer WithSql + WithLock bug；</li>\n<li>修复 ClickHouse Ado 参数化无效的问题；#1340</li>\n<li>修复 Odbc 自定义 N'' 无效；#1332</li>\n<li>修复 DbContext DbSet 属性初始并发时未触发 OnModelCreating；#1333</li>\n<li>修复 Utils.ReplaceSqlConstString bug；</li>\n<li>扩展 UseMessagePackMap 示例；</li>\n<li>优化 UpdateDict 支持 .IsVersion 乐观锁设置；</li>\n<li>优化 InsertDict DBNull.Value 值处理；#1336</li>\n<li>优化 表达式树解析 w =&gt; (w as TBase).Id；</li>\n<li>优化 导航属性集合 .Exists 效果与 .Any 相同；</li>\n<li>优化 MySql CodeFirst 判断表是否存在的查询语句性能；</li>\n<li>优化 SqlServer2005 TOP 1 查询；</li>\n<li>完善 SqlServer WithLock + WithIndex 扩展方法；</li>\n</ul>\n<h2> v3.2.682</h2>\n<ul>\n<li>优化 人大金仓 KingbaseES 兼容 V8R3/V8R6；#931 #325</li>\n</ul>\n<h2> v3.2.681</h2>\n<ul>\n<li><strong>修复 3.2.666-3.2.680 子查询的特殊 bug；</strong></li>\n<li>增加 fsql.Ado.QuerySingle(() =&gt; new {}) 扩展方法实现无表查询 SELECT now(), utc_timestamp()</li>\n<li>优化 min pool size 与 max pool size 连接串设置；</li>\n<li>优化 导航属性未配置关系先 Where 后 InnerJoin 的问题；</li>\n</ul>\n<h2> v3.2.680</h2>\n<ul>\n<li><strong>优化 WithTempQuery 多对象选择同别名问题；</strong> #1192</li>\n<li>修复 WithTempQuery + Column + GroupBy + Key 指定列名的问题；</li>\n<li>修复 GlobalFilter.ApplyIf + Repository.DataFilter.DisableAll 可能不生效的问题；</li>\n<li>修复 UpdateDict 不支持 SET NULL 的更新；#1257</li>\n<li>修复 ClickHuse DBFrist ExistsTable；</li>\n<li>增加 ClickHouse LimitBy/Sample 查询方法；</li>\n<li><strong>增加 所有<a href=\"https://freesql.net/guide/freesql-provider-custom.html\" target=\"_blank\" rel=\"noopener noreferrer\">国产数据库</a>支持 CustomMySql、CustomPostgreSQL、CustomOracle、CustomSqlServer 自定义适配；</strong></li>\n<li>优化 DbSet/Repository 防止 Aop.AuditValue 触发两次；</li>\n<li>优化 表达式树解析为 NULL 的提示；</li>\n<li>优化 UseMappingPriority 与实体元数据逻辑；#1247</li>\n<li>优化 ServerTime 与 IUpdate.Set 指定更新的重复问题；#1251</li>\n</ul>\n<h2> v3.2.669</h2>\n<ul>\n<li>修复 WithTempQuery + RereadSql 无别名的问题；</li>\n<li>修复 WithTempQuery + FromQuery + 子查询的 bug；</li>\n<li>修复 WithTempQuery + Column(Name 别名问题；</li>\n<li>优化 CheckAvailable retry 重试一次；</li>\n</ul>\n<h2> v3.2.666</h2>\n<ul>\n<li><strong>增加 WithTempQuery + FromQuery 嵌套查询功能；</strong> #1192</li>\n<li><strong>增加 FreeSql.Provider.OracleOledb 解决 US7ASCII 中文乱码问题；</strong></li>\n<li><strong>增加 UnionALL 联合查询；</strong> #1106 #1104 #668 #478 #432 #213 #138</li>\n<li>增加 WithMemory 基于内存查询，对标 WithSql；</li>\n<li>增加 AuditValue ObjectAuditBreak 实现对象只触发一次审计事件；</li>\n<li>增加 IncludeByPropertyName 重载 then 参数；#1214</li>\n<li>增加 IInsertOrUpdate.SetSource(sql) 重载方法；</li>\n<li>增加 DynamicFilterCustom 增加支持 Expression 返回值；</li>\n<li>修复 UseGenerateCommandParameterWithLambda(true) 与 GroupBy 查询不生效 bug；</li>\n<li>修复 ToList 子查询开启参数化重复参数的 bug；#1205</li>\n<li><strong>修复 string[] JsonMap bug；</strong> #653</li>\n<li>修复 ManyToMany 不会触发 AsTable 的 bug；</li>\n<li>修复 Clickhouse Insert AsTable 表名处理 bug；</li>\n<li>修复 ClickHouse 单条记录插入\\t \\n /失败的 bug；</li>\n<li>修复 子查询使用基类 + AsType 可能产生的 bug；#1215</li>\n<li>修复 SqlServer2005/2008 Skip 问题（未设置 Take 时）；</li>\n<li>修复 MySql/SqlServer DbFirst 获取字段位置的问题；</li>\n<li>修复 DbContext/Repository Primary decimal 状态管理 key 精度处理 bug；</li>\n<li>修复 DbContext/Repository 无构造函数的实体对象不跟踪问题；</li>\n<li>修复 ToSql AsProperty 大小别名问题；</li>\n<li>优化 IncludeByPropertyName + AsType；</li>\n<li>优化 字典crud TableInfo 合并规则；#1180</li>\n<li>优化 IUpdate.Set 字符串累加本身为 NULL 的情况；#1209</li>\n<li>优化 WhereDynamicFilter DateRange 情况；</li>\n<li>优化 Oracle IN :ids 值传入 IList 时报错；</li>\n<li>优化 Dameng 单独适配 netcore3.1；#1094</li>\n<li><strong>优化 PrevReheatConnectionPool 预热；</strong></li>\n<li>优化 全局过滤器禁用时子查询传播问题；#1208</li>\n<li><strong>优化 子查询别名为 a 的情况；#1201</strong></li>\n</ul>\n<h2> v3.2.665</h2>\n<ul>\n<li>增加 IsVersion string 字符串乐观锁；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1178\" target=\"_blank\" rel=\"noopener noreferrer\">#1178</a></li>\n<li>增加 IUpdate.SetSource ignoreVersion 参数可实现忽略乐观锁；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1161\" target=\"_blank\" rel=\"noopener noreferrer\">#1161</a></li>\n<li>增加 IInsertOrUpdate.SetSource(items, tempPrimarys) 指定临时主键参数；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1160\" target=\"_blank\" rel=\"noopener noreferrer\">#1160</a></li>\n<li>增加 DbContext/Repository 审计日志 ChangeInfo 增加属性 EntityType；</li>\n<li>修复 SqlServer WithLock 子查询不生效的 bug；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1159\" target=\"_blank\" rel=\"noopener noreferrer\">#1159</a></li>\n<li>修复 AsTreeCte + AsTable 无效的 bug；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1176\" target=\"_blank\" rel=\"noopener noreferrer\">#1176</a></li>\n<li>修复 UseGenerateCommandParameterWithLambda(true) 问题；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1173\" target=\"_blank\" rel=\"noopener noreferrer\">#1173</a> <a href=\"https://github.com/dotnetcore/FreeSql/issues/900\" target=\"_blank\" rel=\"noopener noreferrer\">#900</a></li>\n<li>修复 SetSource 临时主键重载方法 + Column 设置 Name 后无效的 bug；</li>\n<li>修复 Dto 映射查询 Negate 表达式解析 bug；</li>\n<li>修复 pgsql OldName + XML 注释迁移代码顺序问题；</li>\n<li>优化 string Contains 模糊查找 % 的情况；</li>\n</ul>\n<h2> v3.2.664</h2>\n<ul>\n<li><strong>修复 UseGenerateCommandParameterWithLambda 子查询并发 bug；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1155\" target=\"_blank\" rel=\"noopener noreferrer\">#1155</a> （重要）</strong></li>\n<li>修复 pgsql Dto 映射使用常量 false 转换失败；</li>\n<li>修复 IIF 三元表达式树解析 bool HasValue 问题；</li>\n<li>修复 MySqlConnector BulkCopy 映射顺序问题；</li>\n<li>优化 XML 注释读取支持 interface；</li>\n<li>support provider、Extensions Exceptions 多语言</li>\n</ul>\n<h2> v3.2.662</h2>\n<ul>\n<li><strong>调整 pgsql10 自增映射使用 GENERATED BY DEFAULT AS IDENTITY，低版本仍然使用 serial；</strong></li>\n<li><strong>增加 PgArrayToMany 专属导航属性；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1145\" target=\"_blank\" rel=\"noopener noreferrer\">#1145</a></strong></li>\n<li>增加 ObservableCollection 级联加载和保存；</li>\n<li>优化 FluentApi 继承关系可直接 ConfigEntity&lt;BaseEntity&gt; 生效；#1144</li>\n<li>修复 达梦 min pool size 预热数量匹配 bug；</li>\n<li>修复 v3.2.620 - v3.2.661 子查询 sum/min/max/avg 默认加 isnull 防止为 NULL 情况，日期类型处理错误 #1140 1b84a0069679c92ccaff9aa8c33023e4d34262cd</li>\n<li>修复 AsTable 子查询未传播的问题；#1103</li>\n<li>修复 IncludeByPropertyName fromFirstTable 判断错误；#278</li>\n<li>修复 GroupBy 特殊情况下 AsProperty 无效的 bug；#1141</li>\n<li>修复 MySql CodeFirst OldName + Comment 迁移问题；#1147</li>\n<li>修复 pgsql DbFirst 未正确获取 Position 值；#1154</li>\n</ul>\n<h2> v3.2.661</h2>\n<ul>\n<li>增加 UseMappingPriority 指定映射优先级；<a href=\"https://github.com/dotnetcore/FreeSql/issues/387\" target=\"_blank\" rel=\"noopener noreferrer\">#387</a> <a href=\"https://github.com/dotnetcore/FreeSql/issues/69\" target=\"_blank\" rel=\"noopener noreferrer\">#69</a> <a href=\"https://github.com/dotnetcore/FreeSql/issues/99\" target=\"_blank\" rel=\"noopener noreferrer\">#99</a></li>\n<li>增加 AuditValueEventArgs Object 参数；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1128\" target=\"_blank\" rel=\"noopener noreferrer\">#1128</a></li>\n<li>修复 pgsql varchar(120) CodeFirst 迁移不修改长度；</li>\n<li>修复 ISelect.InsertInto 未执行自动迁移；</li>\n<li>修复 UseCommandParameterWithLambda IN 参数化判断 的逻辑 bug；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1137\" target=\"_blank\" rel=\"noopener noreferrer\">#1137</a></li>\n<li>优化 连接池不可用、定时检查；</li>\n<li>优化 Limit + Sum/Avg/Max/Min 为嵌套查询；</li>\n<li>优化 GroupBy Page 未排序的查询；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1126\" target=\"_blank\" rel=\"noopener noreferrer\">#1126</a></li>\n</ul>\n<h2> v3.2.651</h2>\n<ul>\n<li><strong>增加 DTO 映射非导航属性的子表查询 ToList，可直接返回集合；</strong></li>\n<li>增加 Array.Any(x =&gt; x.id == a.Id &amp;&amp; ..) 表达式树解析；<a href=\"https://github.com/dotnetcore/FreeSql/issues/243\" target=\"_blank\" rel=\"noopener noreferrer\">#243</a></li>\n<li>增加 pgsql numeric -&gt; BigInteger 映射；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1100\" target=\"_blank\" rel=\"noopener noreferrer\">#1100</a></li>\n<li>增加 <a href=\"https://github.com/dotnetcore/FreeSql/issues/1108\" target=\"_blank\" rel=\"noopener noreferrer\">#1108</a> Exception 国际化；</li>\n<li>增加 DynamicFilterCustom 参数 object sender；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1113\" target=\"_blank\" rel=\"noopener noreferrer\">#1113</a></li>\n<li>增加 Fluent API 以继承接口的形式配置实体；<a href=\"https://github.com/dotnetcore/FreeSql/issues/937\" target=\"_blank\" rel=\"noopener noreferrer\">#937</a></li>\n<li>修复 Oracle AsTable 分表嵌套 SQL 拼错错误；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1098\" target=\"_blank\" rel=\"noopener noreferrer\">#1098</a></li>\n<li>修复 AsTable ManyToMany IncludeMany 无效的问题；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1103\" target=\"_blank\" rel=\"noopener noreferrer\">#1103</a></li>\n<li>修复 AsTable 分表 ToAggregate 无法得到汇总；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1115\" target=\"_blank\" rel=\"noopener noreferrer\">#1115</a></li>\n<li>修复 Repository.DataFilter 对 GlobalFilter 控制无效的 bug；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1028\" target=\"_blank\" rel=\"noopener noreferrer\">#1028</a> <a href=\"https://github.com/dotnetcore/FreeSql/issues/846\" target=\"_blank\" rel=\"noopener noreferrer\">#846</a></li>\n<li>修复 IN 查询区分 varchar/nvarchar；</li>\n<li>修复 Oracle clob 参数化类型设置问题；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1116\" target=\"_blank\" rel=\"noopener noreferrer\">#1116</a></li>\n<li>修复 MySql 子查询 Enum MapType(int) 表达式判断解析 bug；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1118\" target=\"_blank\" rel=\"noopener noreferrer\">#1118</a></li>\n<li>优化 AsTable 自动分表 Where Equal 判断；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1104\" target=\"_blank\" rel=\"noopener noreferrer\">#1104</a></li>\n<li>优化 子查询 sum/min/max/avg 默认加 isnull 防止为 NULL 情况；</li>\n<li>优化 EnableCascadeSave 级联保存执行逻辑，提升性能；</li>\n<li>优化 RawJoin 支持 FULL JOIN 等自定义联表映射；</li>\n<li>优化 IncludeMany 三级导航对象自动 _included；<a href=\"https://github.com/dotnetcore/FreeSql/issues/1113\" target=\"_blank\" rel=\"noopener noreferrer\">#1113</a></li>\n</ul>\n<h2> v3.2.100 - v3.2.640</h2>\n<ul>\n<li><strong>增加 InsertDict/UpdateDict/DeleteDict/InsertOrUpdateDict 针对字典的 CUD 方法；#481</strong></li>\n<li>增加 UseSlaveWeight 读权重设置；#1046</li>\n<li><strong>增加 [Table(AsTable = xx)] 自动分表特性，待完善；#1066</strong></li>\n<li>增加 <a href=\"https://freesql.net/guide/freesql-provider-sqlitecore.html\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql.Provider.SqliteCore</a> 支持 Sqlite 加密；</li>\n<li>增加 IList&lt;T&gt; IncludeByPropertyName 扩展方法，支持字符串参数；</li>\n<li><strong>增加 DbSet/Repository DeleteCascadeByDatabase 级联删除(基于数据库)</strong>；</li>\n<li>调整 DbSet/Repository EnableAddOrUpdateNavigateList 支持 OneToOne 级联保存、级联删除(基于对象)；</li>\n<li>修复 Delete.Where in 查询为空时，异步操作仍然执行删除；#1068 <strong>【受影响版本 v3.2.302】</strong></li>\n<li>修复 InsertOrUpdateDict 异常；#1067 <strong>【受影响版本 v3.2.301、v3.2.300、v3.2.200】</strong></li>\n<li>修复 InsertDict 部分新功能遗留问题(特别是 Oracle)；<strong>【受影响版本 v3.2.301、v3.2.300、v3.2.200】</strong></li>\n<li>修复 InsertDict/UpdateDict 等字典操作在 DbContext.Orm 下无法使用的 bug；#1064 <strong>【受影响版本 v3.2.300、v3.2.200】</strong></li>\n<li>修复 MapType 复杂表达式树解析 bug；#1062</li>\n<li>修复 UseGenerateCommandParameterWithLambda 对不可参数化的数据类型冲突的 bug；#1061 #900</li>\n<li>修复 MySql Set 类型空格处理问题；#1059</li>\n<li>修复 SaveManyAsync 多对多历史漏改的问题（同步无问题）；</li>\n<li>修复 OR 表达式处理情况；#1047</li>\n<li>修复 ClickHouse 设置 NoneParameter 会报错问题；</li>\n<li>修复 Clickhouse 连接池使用问题；#646 #968 #969 #943</li>\n<li>修复 pgsql IList -&gt; JArray 映射；#1092</li>\n<li>修复 pgsql DbFirst IsPrimary bug；</li>\n<li>修复 JsonMap 与导航属性的联表查询报错的 bug；#996</li>\n<li>修复 子查询 WhereIf 可能失败的 bug；</li>\n<li>修复 StringLength 设置后 IsNullable = false 无生效的问题；</li>\n<li>修复 UseConnectionFactory 参数化问题；</li>\n<li>修复 参数值为原始 DbParameter 时转换类型报错；</li>\n<li>修复 UseGenerateCommandParameterWithLambda 子查询 IN bug；#900</li>\n<li>修复 InsertValueSql 在仓储插入后不返回最新值；</li>\n<li>完善 SqlServer BulkCopy 插入 DateTime 最小值问题；</li>\n<li><strong>优化 导航集合属性访问，可省略 AsSelect；</strong></li>\n<li>优化 DbContext/Repository Update 实体有 ServerTime 既使无状态变化也必然更新的逻辑；</li>\n<li>优化 DbContext/Repository 插入非主键自增回填；</li>\n<li>优化 ToList&lt;Dto&gt; jsonb 映射；</li>\n<li>优化 dywhere IN 查询按 500 元素分割；#1091</li>\n<li>优化 IIF 表达式解析；</li>\n</ul>\n<h2> v3.0.100（2021/12/17）</h2>\n<ul>\n<li><strong>增加 南大通用 Gbase 国产数据库支持；</strong></li>\n<li><strong>增加 ClickHouse 数据库语法支持；</strong></li>\n<li>增加 DbContext/Repository 比较变化方法 CompareState；</li>\n<li><strong>增加 DynamicFilter Custom 自定义解析；</strong></li>\n<li>增加 ToDataTableByPropertyName 动态查询功能；</li>\n<li>优化 兼容排序 OrderBy(a =&gt; new {}) 语法；</li>\n<li>优化 pgsql jsonb 映射，支持 List，mysql limit in 子查询；</li>\n<li>优化 InsertOrUpdate&lt;&gt; 使用 InsertOrUpdate&lt;list&lt;&gt;&gt;时，提示友好异常。</li>\n<li>修复 BulkCopy 与线程事务未传播的 bug；#962</li>\n<li>修复 AsTreeCte + RereadSql 不能同时使用的 bug；#964</li>\n<li>修复 FreeSql.Generator 工具生成 model 失败 <a href=\"https://github.com/dotnetcore/FreeSql/issues/882\" target=\"_blank\" rel=\"noopener noreferrer\">#882</a></li>\n</ul>\n<blockquote>\n<p>更多历史更新日志，请访问：https://github.com/dotnetcore/FreeSql/wiki/%e6%9b%b4%e6%96%b0%e6%97%a5%e5%bf%97</p>\n</blockquote>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2024-03-26T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "常见问题",
      "url": "https://freesql.net/reference/faq.html",
      "id": "https://freesql.net/reference/faq.html",
      "summary": "1、如何监视 SQL？ 方法一：UseMonitorCommand + UseNoneCommandParameter 方法二：Aop.CurdBefore/CurdAfter 2、MySql Enum 映射 默认情况 c# 枚举会映射为 MySql Enum 类型，如果想映射为 int 在 FreeSqlBuilder Build 之后执行以下 Ao...",
      "content_html": "<h1> 常见问题</h1>\n<h3> 1、如何监视 SQL？</h3>\n<p>方法一：UseMonitorCommand + UseNoneCommandParameter</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>方法二：Aop.CurdBefore/CurdAfter</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h3> 2、MySql Enum 映射</h3>\n<p>默认情况 c# 枚举会映射为 MySql Enum 类型，如果想映射为 int 在 FreeSqlBuilder Build 之后执行以下 Aop 统一处理：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h3> 3、多个 IFreeSql 实例，如何注入使用？</h3>\n<p><a href=\"https://github.com/dotnetcore/FreeSql/issues/44\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnetcore/FreeSql/issues/44</a></p>\n<hr>\n<h3> 4、怎么执行 SQL 返回实体列表？</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<h3> 5、错误：【主库】状态不可用，等待后台检查程序恢复方可使用。xxx</h3>\n<p>一般是数据库连接失败，才会出现，请检查程序与数据库之间的网络。具体按 xxx 给出的提示进行排查。</p>\n<hr>\n<h3> 6、错误：【主库】对象池已释放，无法访问。</h3>\n<p>原因一：手工调用了 fsql.Dispose，之后仍然使用它</p>\n<p>原因二：使用了 IdleBus 管理 IFreeSql，错误的方式如下：</p>\n<ul>\n<li>a) 不要构建了 IFreeSql 再丢去注册</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>b) 尽量每次都使用 ib.Get 获得 IFreeSql 对象(避免存对象引用)，IdleBus 内部超时释机制一时触发，再使用引用对象，就会报这个报错</li>\n</ul>\n<p>原因三：检查项目的系统事件，是否在异常之前触发</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果确定问题，可以在 FreeSqlBuilder 构建对象的时候 UseExitAutoDisposePool(false) 关闭这个机制</p>\n<hr>\n<h3> 7、错误：ObjectPool.Get 获取超时（10 秒）。</h3>\n<p>原因一：UnitOfWork 使用未释放，请保证程序内使用 UnitOfWork 的地方会执行 Dispose</p>\n<p>原因二：Max Pool Size 设置过小，程序访问量过高</p>\n<p>监视 fsql.Ado.MasterPool.Statistics，它的值：Pool: 5/100, Get wait: 0, GetAsync await: 0</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>监视 FreeSql.UnitOfWork.DebugBeingUsed 这个静态字典，存储正在使用事务的工作单元</p>\n<p>注意：尽量不要使用 fsql.Ado.MasterPool.Get() 或 GetAsync() 方法，否则请检查姿势。</p>\n<hr>\n<h3> 8、多平台代码参考,使用自定义 SqliteProvider,例如 Sqlite 用 Microsoft.Data.Sqlite 或者反射 Mono.Data.Sqlite.</h3>\n<p><a href=\"https://github.com/densen2014/FreeSqlDemos/tree/master/ARM_ConsoleApp\" target=\"_blank\" rel=\"noopener noreferrer\">arm/树莓派</a></p>\n<p><strong>有条件的同学直接试试 FreeSql.Provider.SqliteCore 包,使用的就是 Microsoft.Data.Sqlite 驱动.</strong></p>\n<p>1.添加包</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>2.代码</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://github.com/densen2014/FreeSqlDemos/tree/master/UWP1\" target=\"_blank\" rel=\"noopener noreferrer\">UWP</a></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://github.com/densen2014/FreeSqlDemos/tree/master/xamarinFormApps\" target=\"_blank\" rel=\"noopener noreferrer\">Xamarin Forms,代码较多</a>\n主程序,接口获取 rovider,各个平台自己实现.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://github.com/densen2014/FreeSqlDemos/blob/master/xamarinFormApps/xamarinFormApp.iOS/SQLite_iOS.cs\" target=\"_blank\" rel=\"noopener noreferrer\">iOS 部分</a></p>\n<p><a href=\"https://github.com/densen2014/FreeSqlDemos/blob/master/xamarinFormApps/xamarinFormApp.Android/SQLite_droid.cs\" target=\"_blank\" rel=\"noopener noreferrer\">安卓部分</a></p>\n<hr>\n<h3> 9、 2.6.100 升级到 3.0.100 后无法连接 sqlserver 提示证书无效, 提示证书链是由不受信任的颁发机构颁发的.</h3>\n<p>请尝试:</p>\n<p>1.连接字符串里加入 \"Encrypt=True; TrustServerCertificate=True;\"</p>\n<p>2.使用 FreeSql.Provider.SqlServerForSystem 替换 FreeSql.Provider.SqlServer</p>\n<p>深入讨论请转到 https://github.com/dotnetcore/FreeSql/issues/992#issuecomment-1005305027</p>\n<hr>\n<h3> 10、 怎么样设置数据库超时时间?</h3>\n<p><strong>全局设置</strong>\n在连接字符串里设置。每个数据库写法不一样, 可以在 https://www.connectionstrings.com/ 查找\n或者\n在freesql声明中的build里<br>\n.UseMonitorCommand(cmd =&gt; cmd.CommandTimeout = 9999, null) 这样设置</p>\n<p><strong>单个设置</strong></p>\n<ul>\n<li>fsql.Insert(list).CommandTimeout(500).xxxxxx</li>\n<li>fsql.Update&lt;Entities.SysAdmin&gt;().CommandTimeout(400).xxxxxx</li>\n<li>fsql.Select&lt;Entities.SysAdmin&gt;().CommandTimeout(300).xxxxxx</li>\n<li>fsql.Delete&lt;Entities.SysAdmin&gt;().CommandTimeout(400).xxxxxx</li>\n</ul>\n<hr>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-04-07T06:23:28.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "与 Dapper 比较",
      "url": "https://freesql.net/reference/vs-dapper.html",
      "id": "https://freesql.net/reference/vs-dapper.html",
      "summary": "众所周知 Dapper 是 .NET 下最轻最快的 ORM，它是喜欢写 SQL 码农的福音，相对于 SqlHelper 它更加方便，据统计 10 个 .NETer 有 9 个 用过 Dapper。 这篇文章为准备使用 FreeSql 的朋友解惑，对比 Dapper 有何优势，为什么要使用 FreeSql？希望本文内容对大家有所帮助。 关于性能（输了） ...",
      "content_html": "<h1> 与 Dapper 比较</h1>\n<p>众所周知 Dapper 是 .NET 下最轻最快的 ORM，它是喜欢写 SQL 码农的福音，相对于 SqlHelper 它更加方便，据统计 10 个 .NETer 有 9 个 用过 Dapper。</p>\n<p>这篇文章为准备使用 FreeSql 的朋友解惑，对比 Dapper 有何优势，为什么要使用 FreeSql？希望本文内容对大家有所帮助。</p>\n<h2> 关于性能（输了）</h2>\n<p>Dapper + SQL 是大家一般所用的方式，性能对比主要体现在两个阶段：</p>\n<p>1、执行前，表达式树解析，拼接 SQL 的消耗：</p>\n<ul>\n<li>Dapper 几乎没有消耗；</li>\n<li>FreeSql 会存在递归解析、对象拆箱等操作；</li>\n</ul>\n<p>从项目工程可维护性角度看，这一点性能损失是能被容忍的，请看下面的测试结果。</p>\n<p>2、执行后，返回数据转换为 List：</p>\n<ul>\n<li>Dapper 采用 Emit 构造委托并缓存，性能接近原生代码；</li>\n<li>FreeSql 采用 ExpressionTree 构造委托并缓存，为了映射类型更加易用使用了一点装箱操作，性能比 Dapper 略低；</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>Method</th>\n<th>size</th>\n<th style=\"text-align:right\">Mean</th>\n<th style=\"text-align:right\">Error</th>\n<th style=\"text-align:right\">StdDev</th>\n<th style=\"text-align:right\">Median</th>\n<th style=\"text-align:right\">Rank</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FreeSqlSelect</td>\n<td>1</td>\n<td style=\"text-align:right\">271.6 us</td>\n<td style=\"text-align:right\">14.03 us</td>\n<td style=\"text-align:right\">41.16 us</td>\n<td style=\"text-align:right\">272.6 us</td>\n<td style=\"text-align:right\">2</td>\n</tr>\n<tr>\n<td>SqlSugarSelect</td>\n<td>1</td>\n<td style=\"text-align:right\">323.5 us</td>\n<td style=\"text-align:right\">15.75 us</td>\n<td style=\"text-align:right\">45.18 us</td>\n<td style=\"text-align:right\">314.9 us</td>\n<td style=\"text-align:right\">3</td>\n</tr>\n<tr>\n<td>EfCoreSelect</td>\n<td>1</td>\n<td style=\"text-align:right\">392.8 us</td>\n<td style=\"text-align:right\">17.61 us</td>\n<td style=\"text-align:right\">49.39 us</td>\n<td style=\"text-align:right\">376.2 us</td>\n<td style=\"text-align:right\">4</td>\n</tr>\n<tr>\n<td>DapperSelete</td>\n<td>1</td>\n<td style=\"text-align:right\">215.9 us</td>\n<td style=\"text-align:right\">11.88 us</td>\n<td style=\"text-align:right\">33.52 us</td>\n<td style=\"text-align:right\">213.8 us</td>\n<td style=\"text-align:right\">1</td>\n</tr>\n<tr>\n<td>FreeSqlSelect</td>\n<td>500</td>\n<td style=\"text-align:right\">811.8 us</td>\n<td style=\"text-align:right\">18.86 us</td>\n<td style=\"text-align:right\">55.02 us</td>\n<td style=\"text-align:right\">798.5 us</td>\n<td style=\"text-align:right\">5</td>\n</tr>\n<tr>\n<td>SqlSugarSelect</td>\n<td>500</td>\n<td style=\"text-align:right\">1,148.6 us</td>\n<td style=\"text-align:right\">53.94 us</td>\n<td style=\"text-align:right\">157.34 us</td>\n<td style=\"text-align:right\">1,116.3 us</td>\n<td style=\"text-align:right\">7</td>\n</tr>\n<tr>\n<td>EfCoreSelect</td>\n<td>500</td>\n<td style=\"text-align:right\">1,310.2 us</td>\n<td style=\"text-align:right\">89.90 us</td>\n<td style=\"text-align:right\">262.25 us</td>\n<td style=\"text-align:right\">1,219.3 us</td>\n<td style=\"text-align:right\">8</td>\n</tr>\n<tr>\n<td>DapperSelete</td>\n<td>500</td>\n<td style=\"text-align:right\">942.1 us</td>\n<td style=\"text-align:right\">18.46 us</td>\n<td style=\"text-align:right\">42.05 us</td>\n<td style=\"text-align:right\">931.1 us</td>\n<td style=\"text-align:right\">6</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如上测试 Top1、Top500 单表查询水平结果</p>\n</blockquote>\n<blockquote>\n<p>测试注意 IFreeSql 是单例模式设计，请勿重复创建，测试前请预热</p>\n</blockquote>\n<p>测试结果是 us 级别的慢，能接受，因为数据库的上限并发瓶颈比较低（几万的水平），应用程序中的这一点消耗远不是问题。</p>\n<p>最怕方法或设计错了导致的慢，那慢就是秒级以上的慢了，无力回天。</p>\n<h2> 关于功能（赢了）</h2>\n<p>Dapper 几乎只有执行 SQL 的功能，市面上有一些基于 Dapper 做的轻量级 ORM，可以对实体对象进行 CRUD 操作，支持的数据库有限。</p>\n<p>Dapper 在功能方面几乎完败于 FreeSql，例如：</p>\n<ul>\n<li>CodeFirst：Dapper 不支持；</li>\n<li>类型映射：Dapper 在不同数据库之间的类型映射容易报错。比如实体类属性是 string，但是数据库类型是 int，非常容易报错，这不是杠，真实项目中有很多非等映射类型存在；</li>\n<li>表达式树：Dapper 不支持导航属性、自定义解析、以及特别的解析；</li>\n<li>导航属性：Dapper 不支持；</li>\n<li>批量插入：Dapper 需要自己写 SQL 或者引入第三方包，FreeSql 自带集成；</li>\n<li>批量更新：Dapper 需要自己写 SQL，FreeSql 自带集成；</li>\n<li>工作单元：Dapper 需要引入第三方包，FreeSql 自带集成；</li>\n<li>读写分离：？？</li>\n<li>全局过滤：？？</li>\n</ul>\n<p>等等。。。</p>\n<p>FreeSql 赢在功能丰富，给使用者提供最大便利，你准备好入坑了吗？</p>\n<h2> 如何接入（老项目）</h2>\n<p>如果你的项目正在使用 Dapper，请看以下成本最低的接入方法。</p>\n<p>FreeSql 支持调用 SQL/存储过程，同时也为 IDbConnection/IDbTransaction 提供扩展方法 Select/Delete/Insert/Update/InsertOrUpdate。</p>\n<p>第一步：以数据库 SqlServer 访问为例，只需要安装已经划分好的小包：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>or</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>第二步：建立实体类</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第三步：开始 CRUD</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>添加或更新：</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如上添加、删除、修改、查询，已经支持实体类操作，并且支持批量插入、批量更新、批量删除、多表查询、导航属性查询。</p>\n<p>可以享用 FreeSql 几乎所有功能。</p>\n<p>思考：使用这种 API 貌似可以很轻松的接入到 abp vnext 中？</p>\n<h2> 学习指南</h2>\n<p>FreeSql 是一款功能强大的对象关系映射（O/RM）组件，支持 .NET Core 2.1+、.NET Framework 4.0+ 以及 Xamarin。</p>\n<ul>\n<li>🛠 支持 CodeFirst 模式，即便使用 Access 数据库也支持数据迁移；</li>\n<li>💻 支持 DbFirst 模式，支持从数据库导入实体类，或使用实体类生成工具生成实体类；</li>\n<li>⛳ 支持 深入的类型映射，比如 PgSql 的数组类型等；</li>\n<li>✒ 支持 丰富的表达式函数，以及灵活的自定义解析；</li>\n<li>🏁 支持 导航属性一对多、多对多贪婪加载，以及延时加载；</li>\n<li>📃 支持 读写分离、分表分库、过滤器、乐观锁、悲观锁；</li>\n<li>🌳 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite/Firebird/达梦/人大金仓/神舟通用/南大通用/虚谷/翰高/Access/ClickHouse/QuestDB 等数据库；</li>\n</ul>\n<h4> 基础</h4>\n<ul>\n<li><a href=\"/guide/insert.html\" target=\"blank\">《学习 FreeSql 之一：添加数据》</a></li>\n<li><a href=\"/guide/delete.html\" target=\"blank\">《学习 FreeSql 之二：删除数据》</a></li>\n<li><a href=\"/guide/update.html\" target=\"blank\">《学习 FreeSql 之三：修改数据》</a></li>\n<li><a href=\"/guide/select.html\" target=\"blank\">《学习 FreeSql 之四：查询数据》</a></li>\n<li><a href=\"/guide/repository.html\" target=\"blank\">《仓储层 Repository》</a></li>\n</ul>\n<h4> 进阶</h4>\n<ul>\n<li><a href=\"/guide/code-first.html\" target=\"blank\">《CodeFirst 模式开发介绍》</a>\n<ul>\n<li><a href=\"/guide/entity-attribute.html\" target=\"blank\">《CodeFirst 模式之一：实体特性》</a></li>\n<li><a href=\"/guide/fluent-api.html\" target=\"blank\">《CodeFirst 模式之二：FluentApi》</a></li>\n<li><a href=\"/guide/custom-attribute.html\" target=\"blank\">《CodeFirst 模式之三：自定义特性》</a></li>\n<li><a href=\"/guide/type-mapping.html\" target=\"blank\">《CodeFirst 模式之四：类型映射》</a></li>\n<li><a href=\"/guide/code-first.html#%E8%BF%81%E7%A7%BB%E7%BB%93%E6%9E%84\" target=\"blank\">《CodeFirst 模式之五：迁移结构》</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"/guide/db-first.html\" target=\"blank\">《DbFirst 模式开发介绍》</a></li>\n</ul>\n<h4> 高级</h4>\n<ul>\n<li><a href=\"/guide/transaction.html\" target=\"blank\">《数据库事务》</a></li>\n<li><a href=\"/guide/read-write-splitting.html\" target=\"blank\">《使用读写分离》</a></li>\n<li><a href=\"/guide/sharding.html\" target=\"blank\">《分表分库》</a></li>\n<li><a href=\"/guide/multi-tenancy.html\" target=\"blank\">《多租户》</a></li>\n<li><a href=\"/guide/select-return-data.html\" target=\"blank\">《返回数据》</a></li>\n<li><a href=\"/guide/select-lazy-loading.html\" target=\"blank\">《优化之：延时加载》</a></li>\n<li><a href=\"/guide/select-include.html\" target=\"blank\">《优化之：贪婪加载》</a></li>\n<li><a href=\"/guide/expression-function.html\" target=\"blank\">《Expression 表达式函数》</a></li>\n<li><a href=\"/guide/aop.html\" target=\"blank\">《AOP》</a></li>\n</ul>\n",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-03-10T02:58:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "与 EntityFramework 比较",
      "url": "https://freesql.net/reference/vs-entity-framework.html",
      "id": "https://freesql.net/reference/vs-entity-framework.html",
      "summary": "为什么要写这篇文章？ 2020 年 写下这篇完整一点的 .NET ORM 比较，为准备使用 FreeSql 的朋友解惑。 基础信息比较 功能项 FreeSql EFCore ------------- ------------------------------------------------ ----------- 出生时间 2018 年 12 ...",
      "content_html": "<h1> 与 EntityFramework 比较</h1>\n<p>为什么要写这篇文章？</p>\n<p>2020 年 写下这篇完整一点的 .NET ORM 比较，为准备使用 FreeSql 的朋友解惑。</p>\n<h2> 基础信息比较</h2>\n<table>\n<thead>\n<tr>\n<th>功能项</th>\n<th>FreeSql</th>\n<th>EFCore</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>出生时间</td>\n<td>2018 年 12 月</td>\n<td>2015 年(约)</td>\n</tr>\n<tr>\n<td>开源协议</td>\n<td>MIT</td>\n<td>Apache-2.0</td>\n</tr>\n<tr>\n<td>所属机构</td>\n<td><a href=\"https://github.com/dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">dotnetcore(NCC)</a></td>\n<td>dotnet</td>\n</tr>\n<tr>\n<td>单元测试数量</td>\n<td>5500+</td>\n<td>很多</td>\n</tr>\n<tr>\n<td>github star</td>\n<td>2.1k+</td>\n<td>9.5k+</td>\n</tr>\n<tr>\n<td>github issues</td>\n<td>活跃</td>\n<td>活跃</td>\n</tr>\n<tr>\n<td>支持平台</td>\n<td>.NET4.0+、.NETCore</td>\n<td>.NETCore</td>\n</tr>\n<tr>\n<td>支持数据库</td>\n<td>很多，并且行为一致</td>\n<td>很多</td>\n</tr>\n<tr>\n<td>生命周期</td>\n<td>Singleton</td>\n<td>Scoped</td>\n</tr>\n<tr>\n<td>使用方式</td>\n<td>IFreeSql、Repository</td>\n<td>DbContext</td>\n</tr>\n</tbody>\n</table>\n<p>FreeSql .NET ORM 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite/Firebird/达梦/人大金仓/神舟通用/南大通用/虚谷/翰高/Access/ClickHouse/QuestDB，以及自定义适配。</p>\n<p>.NET ORM 各有自已看家本领，本文主要按 FreeSql 提供的功能进行列举比较，如有冒犯请见谅，也欢迎向 FreeSql 提出功能建议。</p>\n<p>每个功能实现的深度层次不一样（比如 EFCore 支持 SqlServer 2012，FreeSql 支持 SqlServer 2005），很难彻底比较，提示：</p>\n<ul>\n<li>本文比较的功能 FreeSql 每种数据库基本都有提供，不像 EFCore 偏向 SqlServer</li>\n<li>本文只比较官方提供的功能（不包含第三方扩展）</li>\n</ul>\n<figure><img src=\"https://img2020.cnblogs.com/blog/31407/202009/31407-20200914063104631-2088330287.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://img2020.cnblogs.com/blog/31407/202009/31407-20200914063148941-1489586974.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> .NET ORM 整体功能比较</h2>\n<table>\n<thead>\n<tr>\n<th>功能项</th>\n<th>FreeSql</th>\n<th>EFCore</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET ORM CodeFirst 根据实体类型，创建表结构</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM CodeFirst 根据实体类型，对比表结构</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM CodeFirst 根据实体类型注释，迁移表结构备注</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM CodeFirst FluentApi</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM CodeFirst FluentApi 语法兼容 EFCore</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM CodeFirst 实体特性兼容 EFCore</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM CodeFirst 自定义实体特性(Aop)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM CodeFirst 类型转换映射(MapType)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM DbFirst 根据数据库，生成实体类</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 导航属性(OneToOne)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 导航属性(ManyToOne)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 导航属性(OneToMany)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 导航属性(ManyToMany)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 导航属性(Parent) <a href=\"/reference/select-as-tree.html\" target=\"blank\">父子关系的实体类</a></td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 导航属性延时加载、贪婪加载、级联保存</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 自定义表达式树解析</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 全局过滤器</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 事务</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 读写分离</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 分表分库</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 仓储 Repository</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 工作单元 UnitOfWork</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 工作单元管理器 UnitOfWorkManager</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM DbContext 状态管理</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n</tbody>\n</table>\n<h2> .NET ORM CRUD 功能比较</h2>\n<table>\n<thead>\n<tr>\n<th>功能项</th>\n<th>FreeSql</th>\n<th>EFCore</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET ORM CRUD 时，映射动态表名</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM CRUD 时，使用参数化 SQL 执行</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM CRUD 时，不使用参数化 SQL 执行(NoneParameter)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM CRUD 时，获取对应的 SQL(ToSql)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM CRUD 时，统一审计实体属性值(Aop.AuditValue)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET ORM 插入(单条)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 插入时，忽略/指定列</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 插入时，返回影响的行数</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 插入时，返回插入后的自增值</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 插入时，返回插入后的记录</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 插入时，Insert Ignore Into</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 插入时，On Duplicate Key Update</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 插入时，On Conflict Do Update</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 批量插入 <a href=\"https://www.cnblogs.com/kellynic/p/10557882.html\" target=\"_blank\" rel=\"noopener noreferrer\">性能测试结果参考文档</a></td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 批量插入时，自动分批 <a href=\"/reference/insert.html\" target=\"blank\">参考文档</a></td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 批量插入时，使用 BulkCopy</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET ORM 更新(单条)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，动态条件(WhereDynamic)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，根据实体对象更新</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，根据状态管理只更新有变化的属性</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，忽略/指定列</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，原子性 set num=num+1</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，指定条件</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，自动附加全局过滤器条件</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，不需要先查询</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，使用乐观行锁</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，使用悲观锁</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，返回影响的行数</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 更新时，返回更新后的记录</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 批量更新</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET ORM 删除(单条)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 删除时，动态条件(WhereDynamic)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 删除时，指定条件</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 删除时，自动附加全局过滤器条件</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 删除时，不需要先查询</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 删除时，返回影响的行数</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 删除时，返回插入后的记录</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 级联保存</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 添加或更新</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 添加或更新，自动适配 merge into <a href=\"/reference/insert-or-update.html\" target=\"blank\">参考文档</a></td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 批量编辑保存 <a href=\"/reference/insert-or-update.html\" target=\"blank\">参考文档</a></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET ORM 查询(单条)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，分页</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，分页支持 SqlServer2008</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，动态条件(WhereDynamic)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，动态过滤条件(WhereDynamicFilter) <a href=\"/reference/select.html\" target=\"blank\">参考文档</a></td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，自动附加全局过滤器条件</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，多表条件传播(WhereCascade)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，在 lambda 中使用导航属性</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，用 Dto 映射只需要查询的字段</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，传 Sql 作二次查询(WithSql)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，子查询(Exists)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，子查询(In)</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，子查询拼接结果(string.Join) <a href=\"/reference/select-multi-table.html\" target=\"blank\">参考文档</a></td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，使用分组聚合(GroupBy/Having)</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，使用 Linq To Sql 语法</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>.NET ORM 查询时，针对树形结构表 <a href=\"/reference/select-as-tree.html\" target=\"blank\">父子关系的实体类</a></td>\n<td>✔</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://img2020.cnblogs.com/blog/31407/202009/31407-20200914063104631-2088330287.png",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2023-03-10T02:59:47.000Z",
      "authors": [],
      "tags": []
    }
  ]
}