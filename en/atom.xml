<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://freesql.net/en/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
  <id>https://freesql.net/en/</id>
  <title>FreeSql Documents</title>
  <subtitle>FreeSql Documents</subtitle>
  <updated>2024-08-08T13:09:57.841Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://freesql.net/en/atom.xml"/>
  <link rel="alternate" href="https://freesql.net/en/"/>
  <entry>
    <title type="text">Introduction</title>
    <id>https://freesql.net/en/guide/BaseEntity.html</id>
    <link href="https://freesql.net/en/guide/BaseEntity.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Introduction</h1>
<p>Having tried ado.net, dapper, ef, and the Repository pattern, and even writing my own generator tools for common CRUD operations, I've encountered some inconveniences:</p>
<ul>
<li>Each time before use, it needs to be declared and then operated on.</li>
<li>Many people have one operation class (or DAL, DbContext, Repository) for each entity class.</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> Introduction</h1>
<p>Having tried ado.net, dapper, ef, and the Repository pattern, and even writing my own generator tools for common CRUD operations, I've encountered some inconveniences:</p>
<ul>
<li>Each time before use, it needs to be declared and then operated on.</li>
<li>Many people have one operation class (or DAL, DbContext, Repository) for each entity class.</li>
</ul>
<p>This document introduces a minimalist CRUD operation approach using <code>BaseEntity</code>.</p>
<h2> Features</h2>
<ul>
<li>Automatic migration of entity structure (CodeFirst) to the database.</li>
<li>Direct CRUD operations using entity methods.</li>
<li>Simplified entity type definition, eliminating the need to configure primary keys and common fields (such as <code>CreateTime</code>, <code>UpdateTime</code>).</li>
<li>Implements soft delete logic for single-table and multi-table queries.</li>
</ul>
<h2> Declaration</h2>
<p>Refer to the <code>BaseEntity.cs</code> source code (about 100 lines), copy it into your project, and then add the NuGet packages:</p>
<blockquote>
<p><code>dotnet add package FreeSql.DbContext</code></p>
</blockquote>
<blockquote>
<p><code>dotnet add package FreeSql.Provider.Sqlite</code></p>
</blockquote>
<ol>
<li>Define an entity type with an <code>int</code> primary key that is auto-incremented. When <code>BaseEntity&lt;TKey&gt;</code> is specified as <code>int/long</code>, it will assume the primary key is auto-incremented:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you do not want the primary key to be auto-incremented, you can override the property:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>For more entity attribute configurations, see <a href="/en/guide/entity-attribute.html" target="blank">Entity Attributes</a></p>
</blockquote>
<ol start="2">
<li>Define an entity type with a <code>Guid</code> primary key. The Guid value will be automatically generated and ordered, so you don't need to specify <code>Guid.NewGuid()</code> yourself:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>Define an entity type with multiple primary keys. You can override the field names in the static constructor:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> CRUD Operations</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EntityType.Select</code> is a query object and operates similarly to <code>FreeSql.ISelect</code>.</p>
<p>When performing multi-table queries, the soft delete condition will be appended to each table.</p>
<blockquote>
<p>For more query methods, refer to <a href="/en/guide/select.html" target="blank">Queries</a></p>
</blockquote>
<p>Example project: <a href="https://github.com/dotnetcore/FreeSql/tree/master/Examples/base_entity" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/FreeSql/tree/master/Examples/base_entity</a></p>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Ado</title>
    <id>https://freesql.net/en/guide/ado.html</id>
    <link href="https://freesql.net/en/guide/ado.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Ado</h1>
<p>Ado is one of the important objects under <code>IFreeSql</code>, encapsulating all SQL operations and providing methods such as <code>ExecuteReader</code>, <code>ExecuteDataSet</code>, <code>ExecuteDataTable</code>, <code>ExecuteNonQuery</code>, and <code>ExecuteScalar</code>. It works similarly to the traditional <code>SqlHelper</code>.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Ado</h1>
<p>Ado is one of the important objects under <code>IFreeSql</code>, encapsulating all SQL operations and providing methods such as <code>ExecuteReader</code>, <code>ExecuteDataSet</code>, <code>ExecuteDataTable</code>, <code>ExecuteNonQuery</code>, and <code>ExecuteScalar</code>. It works similarly to the traditional <code>SqlHelper</code>.</p>
<h2> Query SQL</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Parameter</h2>
<p>All parameters for <code>Ado</code> can accept anonymous objects or dictionaries:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Regarding <strong>parameter prefixes</strong>:</p>
<ul>
<li><code>odbc</code> uses <strong>?</strong> and does not have a specific identifier, so <code>freesql</code> disables <code>odbc</code> parameterization.</li>
</ul>
<table>
<thead>
<tr>
<th>Type</th>
<th>Prefix Symbol</th>
</tr>
</thead>
<tbody>
<tr>
<td>oracle</td>
<td><strong>:</strong></td>
</tr>
<tr>
<td>mysql.data</td>
<td><strong>?</strong></td>
</tr>
<tr>
<td>mysqlconnector</td>
<td><strong>@</strong></td>
</tr>
<tr>
<td>Others</td>
<td><strong>@</strong></td>
</tr>
</tbody>
</table>
<p>IN parameterization queries:</p>
<blockquote>
<p>Currently, only <code>Array</code> and <code>IList</code> types are supported for binding</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> Check Connection</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> Command Fluent</h2>
<p>When there are too many overloaded methods in <code>fsql.Ado</code>, it is recommended to use <code>CommandFluent</code>, for example, with stored procedures:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Oracle stored procedure to get <code>DataTable</code>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Ado.net Extensions</h2>
<p>Provides usage similar to Dapper, <code>FreeSql</code> adds extension methods <code>Select/Insert/Update/Delete</code> for <code>IDbConnection/IDbTransaction</code> objects to implement CRUD operations.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Each <code>SqlConnection</code>'s <code>GetFreeSql()</code> returns the same <code>IFreeSql</code> instance;</li>
<li>You can set <code>Aop</code> events for <code>fsql</code>, such as monitoring SQL;</li>
<li>The <code>IDbFirst</code> and <code>Transaction</code> members of <code>IFreeSql</code> are not available;</li>
</ul>
<p>This feature allows for quick integration of <code>FreeSql</code> into a project, as long as you handle entity class attributes properly.</p>
<p>Hint: <code>FreeSql</code> is 99% compatible with EFCore entity attributes</p>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Aggregate Root</title>
    <id>https://freesql.net/en/guide/aggregateroot.html</id>
    <link href="https://freesql.net/en/guide/aggregateroot.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Aggregate Root</h1>
<p><code>FreeSql.DbContext</code> defines the <code>IBaseRepository&lt;T&gt;</code> repository interface, which, while supporting cascading save and delete functions, requires manual determination of when to enable and use these features.</p>
<p>Although this may look like EF, there are key differences, primarily in how cascading boundaries are set. For example, we allow <code>OneToMany</code> to cascade recursively from the lower layer up, but only for queries, not for insert, update, or delete operations. The goal is to eliminate pain points from a mechanism perspective and make operations more controllable.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Aggregate Root</h1>
<p><code>FreeSql.DbContext</code> defines the <code>IBaseRepository&lt;T&gt;</code> repository interface, which, while supporting cascading save and delete functions, requires manual determination of when to enable and use these features.</p>
<p>Although this may look like EF, there are key differences, primarily in how cascading boundaries are set. For example, we allow <code>OneToMany</code> to cascade recursively from the lower layer up, but only for queries, not for insert, update, or delete operations. The goal is to eliminate pain points from a mechanism perspective and make operations more controllable.</p>
<p><strong><code>AggregateRootRepository</code> is a new implementation of <code>IBaseRepository&lt;T&gt;</code></strong> that leverages the characteristics of aggregate roots to implement controllable cascading additions, updates, deletions, and queries (automatic <code>Include/IncludeMany</code> during queries).</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>dotnet add package FreeSql.Extensions.AggregateRoot</p>
</blockquote>
<p>For feedback and discussion, visit: <a href="https://github.com/dotnetcore/FreeSql/discussions/1235" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/FreeSql/discussions/1235</a></p>
<p>The following content heavily relies on the correct configuration of <a href="/en/guide/navigate-attribute.html" target="blank"><strong>Navigation Properties</strong></a>. Please learn about it before proceeding!</p>
<h2> Setting Boundaries</h2>
<p>Define a primary entity class as the aggregate root and establish a safe jurisdictional boundary. During CRUD operations, everything within the boundary is treated as a whole.</p>
<p>Navigation properties outside the boundary will be ignored during recursive <code>insert, update, delete</code> operations:</p>
<ul>
<li>ManyToOne</li>
<li>ManyToMany (external tables)</li>
<li>PgArrayToMany</li>
</ul>
<p>Navigation properties within the boundary will be cascaded during recursive <code>insert, update, delete</code> operations:</p>
<ul>
<li>OneToOne</li>
<li>OneToMany</li>
<li>ManyToMany (intermediate tables)</li>
</ul>
<p>Example 1: Recursively handling all <code>OneToOne/OneToMany</code> navigation properties within the aggregate root</p>
<ul>
<li>OneToOne: Order &lt;-&gt; OrderExt</li>
<li>OneToMany: Order &lt;== OrderDetail</li>
<li>OneToOne: OrderDetail &lt;-&gt; OrderDetailExt</li>
<li>Jurisdictional boundary of aggregate root Order: Extdata, Details, Details[?].Extdata</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example 2: Recursively handling all <code>ManyToMany</code> navigation properties corresponding to intermediate tables within the aggregate root</p>
<ul>
<li>ManyToMany: Order &lt;=&gt; Tag</li>
<li>The aggregate root Order will manage intermediate table data for <code>OrderTag</code> based on <code>Tags</code>.</li>
<li>The aggregate root Order will not manage the <code>Tag</code> entity class or navigation properties extending from Tag (external tables are outside the jurisdiction).</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Inserting Data</h2>
<p>According to the defined boundaries, cascading insertions will automatically occur within the boundary.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Inserts records into the Order table;</li>
<li>Inserts records into the OrderExt table;</li>
<li>Inserts records into the OrderDetail table;</li>
<li>Inserts records into the OrderDetailExt table;</li>
<li>Inserts records into the OrderTag table (will not insert records into the Tag table).</li>
</ul>
<blockquote>
<p>Note: Even if <code>order.Tags</code> do not exist in the database, no records will be inserted into the Tag table.</p>
</blockquote>
<h2> Querying Data</h2>
<p>According to the defined boundaries, queries will automatically <code>Include/IncludeMany</code> content within the boundaries.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is equivalent to:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Extending query boundaries:</p>
<blockquote>
<p>Hint: <code>[AggregateRootBoundary("name", Break = true)]</code> sets the boundary range; see below for more details.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Overriding <code>Select</code> can allow querying data outside the boundary (e.g., ManyToOne navigation properties), but <code>add/update/delete</code> will still follow the default boundary rules.</p>
<p>Manually using <code>SelectDiy</code> <code>Include/IncludeMany</code> to include content, if it is less than the default boundary rules, it is recommended not to enable <code>state tracking</code> (saving data may cause inconsistencies); otherwise, it should be enabled (details can be seen in <code>Updating Data</code>).</p>
<h2> Deleting Data</h2>
<p>According to the defined boundaries, cascading deletions will automatically occur within the boundary.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>Deletes records in the OrderExt table;</li>
<li>Deletes records in the OrderDetailExt table;</li>
<li>Deletes records in the OrderDetail table;</li>
<li>Deletes records in the OrderTag table (will not delete records in the Tag table);</li>
<li>Deletes records in the Order table;</li>
</ul>
<p>Data deletion is done recursively in memory for the <code>order</code> instance, so you need to query the repository in advance, which may have performance drawbacks with large amounts of data.</p>
<p>If cascading delete functionality is set in the database table's foreign key, you only need to delete records in the Order table and do not need to query in advance.</p>
<h2> Updating Data</h2>
<p>According to the defined boundaries, cascading saves will automatically occur within the boundary during updates.</p>
<p><code>repository.Attach</code> stores a snapshot of the data before the update (queries automatically create snapshots), which is called a copy. During <code>repository.Update</code>, the current state is compared with the copy to save changes.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Adds records to the OrderTag table (will not manage Tag table records);</li>
<li>Deletes records from the OrderDetail table;</li>
<li>Deletes records from the OrderDetailExt table;</li>
<li>Updates records in the OrderDetailExt table;</li>
<li>Updates records in the Order table;</li>
</ul>
<p><code>Complete Save</code> first queries and then updates, which is easier to understand and ensures data consistency. However, if the content under the aggregate root is large, performance issues may arise.</p>
<p>Here is the translation of the document into English, keeping the Markdown format unchanged:</p>
<hr>
<p>For example, the comment data under <code>Order</code> has about 1000 records, and new records are continuously added every day. Loading all records into memory and then saving them each time is too costly.</p>
<p>By leveraging the characteristics of comparison saving, we can indirectly implement <code>record appending</code>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Using fsql only queries the single table data;</li>
<li>The <code>order</code> itself has not changed, so no update is made to the <code>Order</code> table record;</li>
<li>Two <code>OrderComment</code> table records are added;</li>
</ul>
<blockquote>
<p>Why not directly perform single-table operations on <code>OrderComment</code>???</p>
</blockquote>
<blockquote>
<p>The answer is for you to figure out!!!</p>
</blockquote>
<p><code>Comparison Saving</code> Rule Explanation:</p>
<table>
<thead>
<tr>
<th>Navigation Property</th>
<th>Snapshot</th>
<th>Latest</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>OneToOne</td>
<td>NULL</td>
<td>Object</td>
<td><code>Add</code> latest record</td>
</tr>
<tr>
<td>OneToOne</td>
<td>Object</td>
<td>NULL</td>
<td><code>Delete</code> snapshot record</td>
</tr>
<tr>
<td>OneToOne</td>
<td>Object</td>
<td>Object</td>
<td>If content changes, <code>Update</code> latest record; otherwise, <code>Ignore</code></td>
</tr>
<tr>
<td>OneToMany</td>
<td>NULL/Empty</td>
<td>List</td>
<td><code>Add</code> latest list records</td>
</tr>
<tr>
<td>OneToMany</td>
<td>List</td>
<td>NULL</td>
<td><code>Ignore</code></td>
</tr>
<tr>
<td>OneToMany</td>
<td>List</td>
<td>Empty</td>
<td><code>Delete</code> snapshot list records</td>
</tr>
<tr>
<td>OneToMany</td>
<td>List</td>
<td>List</td>
<td><code>Comparison Saving</code> calculates <code>Add</code>, <code>Update</code>, and <code>Delete</code> behaviors</td>
</tr>
</tbody>
</table>
<blockquote>
<p>ManyToMany only operates on the <code>intermediate table</code> (external table is out of scope), with the comparison saving mechanism being the same as OneToMany</p>
</blockquote>
<h2> Inserting or Updating Data</h2>
<p><code>InsertOrUpdate</code> execution logic relies on the <code>primary key</code> and <code>state management</code> of the aggregate root object, where state management stores the snapshot.</p>
<ol>
<li>If the primary key is <code>auto-increment</code>:</li>
</ol>
<ul>
<li>If no value, <code>Insert data</code>;</li>
<li>If there is a value, determine state management;
<ul>
<li>If exists, compare with the snapshot to <code>Update data</code>;</li>
<li>If not exists, query the database; (performance issues with large content)
<ul>
<li>If exists, compare with the queried content to <code>Update data</code>;</li>
<li>If not exists, <code>Insert data</code>;</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li>If the primary key is not auto-increment:</li>
</ol>
<ul>
<li>If no value, <code>Throw exception</code>;</li>
<li>If there is a value, same logic as above;</li>
</ul>
<h2> Extending Boundaries</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Break: When recursing, terminate the current navigation property</li>
<li>BreakThen: When recursing, terminate further exploration</li>
</ul>
<p><code>AggregateRootBoundary</code> can set navigation properties within the boundary to narrow the range.</p>
<p>It can also set non-boundary navigation properties ManyToOne/ManyToMany/PgArrayToMany, which are only valid for queries, but will still be ignored during <code>Add</code>, <code>Delete</code>, and <code>Update</code>.</p>
<h2> Summary</h2>
<ol>
<li><strong>Understand Boundaries</strong>: Understand the boundary rules presented in this document.</li>
</ol>
<ul>
<li>ManyToOne navigation properties are <code>outside the boundary</code>;</li>
<li>ManyToMany navigation properties, <code>intermediate table</code> (OrderTag) is within the boundary, <code>external table</code> (Tag) is <code>outside the boundary</code>;</li>
<li>OneToOne navigation properties are within the boundary;</li>
<li>OneToMany navigation properties are within the boundary;</li>
</ul>
<p><code>AggregateRootRepository</code> only performs recursive CRUD operations on data within the boundary, treating the aggregate root as a whole.</p>
<p>Special cases can inherit and override the <code>Select</code> property to expand or narrow the query content:</p>
<ul>
<li>Insert/Delete/Update will not perform operations on data <code>outside</code> the expanded boundary;</li>
<li>Update with narrowed query content will not delete unqueried content due to navigation property values being NULL;</li>
</ul>
<ol start="2">
<li><strong>Use Transactions Wisely</strong>: Use transactions to solve consistency issues in operations.</li>
</ol>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Aop ✨</title>
    <id>https://freesql.net/en/guide/aop.html</id>
    <link href="https://freesql.net/en/guide/aop.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Aop ✨</h1>
<p>FreeSql AOP introduces existing features and will continue to enhance them based on user needs in the future.</p>
<h2> Audit Commands (How to Monitor SQL?)</h2>
<p>If a SQL operation is taking a long time and there is no related auditing feature, it can be challenging to troubleshoot.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Aop ✨</h1>
<p>FreeSql AOP introduces existing features and will continue to enhance them based on user needs in the future.</p>
<h2> Audit Commands (How to Monitor SQL?)</h2>
<p>If a SQL operation is taking a long time and there is no related auditing feature, it can be challenging to troubleshoot.</p>
<p>The <code>fsql.Aop.CommandBefore</code> and <code>fsql.Aop.CommandAfter</code> events trigger before and after the execution of all SQL commands, respectively.</p>
<p>The post-execution event will include exception information, execution time, and other details.</p>
<p>It is recommended to enable the non-parameterized mode in development mode using <code>new FreeSqlBuilder().UseNoneCommandParameter(true)</code>.</p>
<blockquote>
<p>Tip: <code>new FreeSqlBuilder().UseMonitorCommand</code> can also audit command execution before and after.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Audit Property Values</h2>
<p>Handle certain values uniformly during insert/update, such as a snowflake algorithm value, creation time value, or even business values.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the property's type is <code>long</code>, and it is marked with <code>[Snowflake]</code>, and the current value is <code>0</code>, its value will be set to a snowflake ID during insert/update.</p>
<blockquote>
<p>Note: <code>SnowflakeAttribute</code> is defined by you, and <code>new Snowflake().GetId()</code> should also be implemented by you.</p>
</blockquote>
<p>If naming conventions are followed, you can check in the AOP, <code>if (e.Property.Name == "createtime") e.Value = DateTime.Now;</code></p>
<blockquote>
<p>v3.2.666 allows setting <code>e.ObjectAuditBreak = true</code> to interrupt object auditing, effectively ensuring each object triggers the <code>AuditValue</code> event only once.</p>
</blockquote>
<h2> Audit Migration Scripts</h2>
<p>FreeSql comes with migration features, so you might be curious about what migration SQL statements look like.</p>
<ul>
<li>For example, when creating a table;</li>
<li>For example, when adding fields;</li>
<li>For example, when renaming tables or fields;</li>
<li>And also when changing field types;</li>
</ul>
<p>These operations are largely abstracted under <code>FreeSql.CodeFirst</code>, and we recommend using automated migration features only in development environments; in production, use other tools instead.</p>
<p>However, you might still need to keep complete logs for the project.</p>
<p>The <code>fsql.Aop.SyncStructureBefore</code> and <code>fsql.Aop.SyncStructureAfter</code> events will be useful here.</p>
<h2> ConfigEntity</h2>
<h3> Unified Configuration Architecture</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> MySql Enum Mapping</h3>
<p>By default, C# enums will be mapped to MySql Enum types. If you want to map them to <code>int</code>, execute the following AOP configuration after <code>FreeSqlBuilder Build</code>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Modify Decimal Default Properties</h3>
<p>By default, <code>decimal</code> only supports <code>decimal(10,2)</code>, which has too small a range. We can globally modify the supported range for <code>decimal</code> types, for example, to support <code>decimal(18,6)</code>.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Custom Entity Attributes</h3>
<p>For example, if the project already uses another ORM like EFCore, it means the entity might contain <code>[Key]</code>, which is different from FreeSql's <code>[Column(IsPrimary = true)]</code>.</p>
<p>Q: Why are FreeSql entity attributes so awkward?</p>
<p>A: To ensure consistency, all are encapsulated under <code>ColumnAttribute</code>, so users don’t need to remember which attribute name to use, e.g., auto-increment <code>[Column(IsIdentity = true)]</code>.</p>
<p>FreeSql provides AOP custom attribute functionality to implement a unified set of entity attributes with multiple ORMs, avoiding repetitive definitions of attributes.</p>
<blockquote>
<p>v1.4.0+ automatically recognizes EFCore entity attributes <code>Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column</code>.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Ado .NET Read Interception</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Expression Interception</h2>
<p>FreeSql's internal expression support is very rich and compatible with major databases.</p>
<blockquote>
<p>For details on expression support, refer to: <a href="/en/guide/expression-function.html" target="blank">Expression Functions</a></p>
</blockquote>
<p>Despite this richness, it may still not meet all user needs. FreeSql provides a custom expression parsing interface:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This parsing can be complex. When <code>e.Expression</code> is very complicated, we also provide the <code>e.FreeParse</code> method, which is equivalent to calling FreeSql’s built-in expression parsing engine to assist with parsing.</p>
<h2> Custom Global Type Conversions</h2>
<p>In the framework, apart from basic types, you can use <code>TypeHandlers</code> to add converters, with one specific class corresponding to one converter.</p>
<p>Suppose you have a BT requirement: convert <code>'A10'</code> from the database to the enum <code>TestType.A</code> (with int value 10).</p>
<ul>
<li>In EF, the framework traverses all entities and adds converters based on specific Enum types when <code>ctx</code> is created.</li>
<li>In FreeSql, the approach is similar. In the <code>ConfigEntityProperty</code> delegate, you can obtain the property type and then create a specific converter.</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The core idea is that <code>ITypeHandler.Type</code> becomes a variable that can be passed from outside. There are some additional issues to consider:</p>
<ol>
<li>All "xxxEnum" values will be converted using this handler. If multiple database formats are involved, handle this in the <code>Handler</code>.</li>
<li>When there are many entity classes and numerous enum properties, performance may be impacted. In such cases, it is advisable not to modify the entity classes directly. Instead, you can use partial classes to add a new property for handling conversions. Set the property to Ignore and perform the conversion in the getter and setter.</li>
</ol>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Cascade Delete</title>
    <id>https://freesql.net/en/guide/cascade-delete.html</id>
    <link href="https://freesql.net/en/guide/cascade-delete.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<p>Here is the translated document:</p>
<hr>
<h1> Cascade Delete</h1>
<p>The following content heavily relies on the correct configuration of <a href="/en/guide/navigate-attribute.html" target="blank">Navigation Properties</a>, so please ensure you understand that first before proceeding!</p>
<p>Cascade delete only applies to OneToOne, OneToMany, and ManyToMany navigation properties. The <a href="/en/guide/cascade-saving.html" target="blank">Cascade Saving</a> document has already explained this.</p>]]></summary>
    <content type="html"><![CDATA[<p>Here is the translated document:</p>
<hr>
<h1> Cascade Delete</h1>
<p>The following content heavily relies on the correct configuration of <a href="/en/guide/navigate-attribute.html" target="blank">Navigation Properties</a>, so please ensure you understand that first before proceeding!</p>
<p>Cascade delete only applies to OneToOne, OneToMany, and ManyToMany navigation properties. The <a href="/en/guide/cascade-saving.html" target="blank">Cascade Saving</a> document has already explained this.</p>
<h2> Cascade Delete Based on [Objects]</h2>
<blockquote>
<p>For example, objects retrieved using <a href="/en/guide/select-include.html#_2-navigation-properties-manytoone-onetoone" target="blank">Include/IncludeMany</a> queries can be cascade deleted using this method.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Cascade Delete Based on [Database]</h2>
<blockquote>
<p>Based on the configured navigation properties, recursively delete the corresponding data for OneToOne/OneToMany/ManyToMany and return the deleted data. This feature does not rely on database foreign keys.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Cascade Save</title>
    <id>https://freesql.net/en/guide/cascade-saving.html</id>
    <link href="https://freesql.net/en/guide/cascade-saving.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<p>Here is the translated document:</p>
<hr>
<h1> Cascade Save</h1>
<p>The following content heavily relies on the correct configuration of <a href="/en/guide/navigate-attribute.html" target="blank">Navigation Properties</a>, so please ensure you understand that first before proceeding!</p>
<ul>
<li><strong>Topic</strong>: Articles table</li>
<li><strong>Category</strong>: Categories table</li>
<li><strong>Comment</strong>: Comments table</li>
<li><strong>Tag</strong>: Tags table</li>
<li><strong>ManyToOne</strong>: Topic (many) related to Category (one)</li>
<li><strong>OneToOne</strong>: Topic (one) related to Content (one)</li>
<li><strong>OneToMany</strong>: Topic (one) related to Comments (many)</li>
<li><strong>ManyToMany</strong>: Topic (many) related to Tags (many)</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>Here is the translated document:</p>
<hr>
<h1> Cascade Save</h1>
<p>The following content heavily relies on the correct configuration of <a href="/en/guide/navigate-attribute.html" target="blank">Navigation Properties</a>, so please ensure you understand that first before proceeding!</p>
<ul>
<li><strong>Topic</strong>: Articles table</li>
<li><strong>Category</strong>: Categories table</li>
<li><strong>Comment</strong>: Comments table</li>
<li><strong>Tag</strong>: Tags table</li>
<li><strong>ManyToOne</strong>: Topic (many) related to Category (one)</li>
<li><strong>OneToOne</strong>: Topic (one) related to Content (one)</li>
<li><strong>OneToMany</strong>: Topic (one) related to Comments (many)</li>
<li><strong>ManyToMany</strong>: Topic (many) related to Tags (many)</li>
</ul>
<p>Cascade saving is not suitable for ManyToOne relationships because it is unreasonable to save the Category every time you save a Topic (consider the reasons). Therefore, only OneToOne, OneToMany, and ManyToMany cascade saving will be discussed below.</p>
<blockquote>
<p>If you do not understand the above content, please read it several times!</p>
</blockquote>
<h2> Enabling the Feature</h2>

<blockquote>
<p>This feature was implemented in 2019 (stable). You may also refer to the 2022 release of <a href="/en/guide/aggregateroot.html" target="blank">“Aggregate Root Repository”</a> (more automatic cascade saving).</p>
</blockquote>
<p>Cascade saving is disabled by default and needs to be enabled manually:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> Mechanism Rules</h2>
<ol>
<li>
<p><strong>OneToOne Cascade Saving</strong></p>
<blockquote>
<p>Supported from v3.2.606+, and also supports <a href="/en/guide/cascade-delete.html" target="blank">Cascade Delete</a> functionality.</p>
</blockquote>
</li>
<li>
<p><strong>OneToMany</strong>: Appending or updating child records without deleting existing child records</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>Existing Comment child records are not deleted</li>
<li>When <code>topic.Comments</code> is empty, no operations are performed</li>
<li>When saving <code>topic.Comments</code>, it will also save the sub-collection properties of <code>topic.Comments[0-..]</code>, recursively down 18 levels</li>
</ul>
<blockquote>
<p>Recursively down 18 levels means, for example, the Articles table has a collection property Comments, and Comments has a collection property Sub-comments. When saving the Articles table object, it will retrieve the collection property Comments, and if Comments are saved, it will further retrieve the collection property Sub-comments, and perform InsertOrUpdate operations together.</p>
</blockquote>
</li>
<li>
<p><strong>ManyToMany</strong>: Complete comparison to save the intermediate table; external tables only append, not update</p>
<p>Complete comparison saves the intermediate table by comparing existing data and performing additions, modifications, and deletions.</p>
</li>
</ol>
<h2> Examples</h2>
<h3> Test 1: Append Save OneToMany</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>Test 2: Complete Save ManyToMany</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">DbFirst</title>
    <id>https://freesql.net/en/guide/db-first.html</id>
    <link href="https://freesql.net/en/guide/db-first.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> DbFirst</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For creation details, please refer to the Getting Started documentation</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> DbFirst</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> Retrieve All Databases</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> Retrieve Table Information for a Specific Database</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> .NET Core CLI</h2>
<p>The code generator <code>FreeSql.Generator</code> is a code generator for FreeSql. It can generate entity classes and supports dynamically generating entities from database entities. By default, it includes two templates based on Razor, and you can specify custom templates.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a new directory, open the command window quickly by typing <code>cmd</code> in the address bar, and enter the following command:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The great advantage of using the command-line tool to generate entity classes is that subsequent regenerations and overwrite operations can be done with a single command, and it supports Mac/Linux platforms.</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Common Options</h3>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Razor</td>
<td>Choose a template: Entity class + attributes <code>-Razor 1</code> / Entity class + attributes + navigation properties <code>-Razor 2</code> / Custom template file <code>-Razor "d:\diy.cshtml"</code></td>
</tr>
<tr>
<td>-NameOptions</td>
<td>Naming convention for the generated entities. Set only one of the four boolean values to 1. Options are: <code>Pascal Case</code> / <code>Pascal Case, others lowercase</code> / <code>All lowercase</code> / <code>Underscore to camel case</code> (<code>-NameOptions 0,0,0,1</code>)</td>
</tr>
<tr>
<td>-NameSpace</td>
<td>Namespace</td>
</tr>
<tr>
<td>-DB</td>
<td>Refer to the -DB parameter section below</td>
</tr>
<tr>
<td>-Filter</td>
<td>Table+View+StoreProcedure (default: generates tables, views, and stored procedures). To exclude views and stored procedures, use -Filter View+StoreProcedure</td>
</tr>
<tr>
<td>-Match</td>
<td>Table name or regular expression to match specific tables, e.g., dbo.TB_.+</td>
</tr>
<tr>
<td>-FileName</td>
<td>File name, default: {name}.cs</td>
</tr>
<tr>
<td>-Output</td>
<td>Recommended to create gen.bat in the entity directory. Double-click it to regenerate all entity classes.</td>
</tr>
</tbody>
</table>
<h3> -DB Parameter</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Dynamic Operations</title>
    <id>https://freesql.net/en/guide/dynamic.html</id>
    <link href="https://freesql.net/en/guide/dynamic.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Dynamic Operations</h1>
<h2> object CRUD</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Insert</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span>EntityType<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">AppendData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Update</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span>EntityType<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">SetSource</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span>EntityType<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>a <span class="token keyword">as</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//fsql.Select&lt;object&gt;()...</span>

<span class="token comment">// Or using repository</span>
<span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span>EntityType<span class="token punctuation">)</span><span class="token punctuation">;</span>

repo<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">InsertOrUpdate</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Dynamic Operations</h1>
<h2> object CRUD</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>v3.2.695 emits dynamic entity creation</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dictionary CUD</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>InsertDict/UpdateDict/DeleteDict/InsertOrUpdateDict all support batch operations, corresponding to types <code>List&lt;Dictionary&lt;string, object&gt;&gt;</code>.</p>
<h2> Untyped CRUD (More Advanced)</h2>
<p>Does not rely on entity types, does not require dynamic compilation, pure dictionary operations, supports navigation properties, cascading saves, a blessing for AOT compilation.</p>
<p>For more details, please refer to <a href="/en/guide/lowcode.html" target="blank">《Untyped Mapping》</a>.</p>
<h2> Dynamic Table Names</h2>
<ol>
<li>Repository</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>IFreeSql</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dynamic Conditions</h2>
<ol>
<li><code>ISelect.Where(string sql)</code> uses raw conditions:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>Dynamic Lambda Expressions</li>
</ol>
<ul>
<li><code>And</code>, <code>Or</code> extension methods <a href="https://github.com/dotnetcore/FreeSql/blob/master/FreeSql/Extensions/LambadaExpressionExtensions.cs" target="_blank" rel="noopener noreferrer">LambadaExpressionExtensions.cs</a></li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><code>ISelect.WhereDynamicFilter</code> method implements dynamic filter conditions (interact with frontend), supported operators:</li>
</ol>
<ul>
<li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith: Contains/Does not contain, like '%xx%', or like 'xx%', or like '%xx%'</li>
<li>Equal/NotEqual: Equals/Not equals</li>
<li>GreaterThan/GreaterThanOrEqual: Greater than/Greater than or equal to</li>
<li>LessThan/LessThanOrEqual: Less than/Less than or equal to</li>
<li>Range: Range query</li>
<li>DateRange: Date range, with special handling for value[1] + 1</li>
<li>Any/NotAny: Matches any item in value (SQL IN)</li>
<li>Custom: Custom parsing</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example of implementing Custom:</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dynamic Sorting</h2>
<ol>
<li><code>ISelect.OrderBy(string sql)</code> uses raw sorting:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><code>ISelect.OrderByPropertyName</code> uses property names for sorting:</li>
</ol>
<ul>
<li>Supports navigation properties, e.g., <code>OrderByPropertyName("Parent.Code")</code></li>
<li>Supports multi-table queries, e.g., <code>OrderByPropertyName("b.Code")</code></li>
</ul>
<h2> Dynamic Include</h2>
<ol>
<li><code>ISelect.IncludeByPropertyName</code> method implements dynamic eager loading, corresponding to <code>Include/IncludeMany</code>:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><code>List&lt;TDto&gt;.IncludeByPropertyName</code> extension method also implements dynamic eager loading for OneToMany relationships:</li>
</ol>
<blockquote>
<p>Non-entity types can also be cascaded loaded; they do not need navigation property relationships.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dynamic Data Returns</h2>
<ol>
<li><code>ISelect.ToList</code> uses raw SQL to return data:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><code>ISelect.ToDataTableByPropertyName</code> uses property names to return data:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dynamic Fragments</h2>
<p>FreeSql provides APIs for directly using SQL fragments such as <code>Where(sql)</code>, <code>GroupBy(sql)</code>, <code>OrderBy(sql)</code>, <code>ToList(sql)</code>.</p>
<p><strong>Please be cautious of SQL injection vulnerabilities when using these APIs.</strong></p>
<p>It is not recommended to directly POST SQL from the frontend to the backend for these operations. Instead, you should map these queries on the backend. For example:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Mapping Attributes✨</title>
    <id>https://freesql.net/en/guide/entity-attribute.html</id>
    <link href="https://freesql.net/en/guide/entity-attribute.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Mapping Attributes✨</h1>
<p>v1.4.0+ automatically recognizes EF attributes such as</p>
<p>Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column.</p>
<h2> Table Name</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">"tb_topic"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Mapping Attributes✨</h1>
<p>v1.4.0+ automatically recognizes EF attributes such as</p>
<p>Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column.</p>
<h2> Table Name</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Architecture: <code>[Table(Name = "dbo.tb_topic")]</code></p>
<p>Note: For table names with dots, use <code>[Table(Name = "</code>sys.config<code>")]</code> to resolve.</p>
<p>Methods for table name mapping, from lowest to highest priority:</p>
<ul>
<li>
<ol>
<li>Entity class name</li>
</ol>
</li>
<li>
<ol start="2">
<li>Aop <code>fsql.Aop.ConfigEntity += (_, e) =&gt; e.ModifyResult.Name = "public.tabname"</code></li>
</ol>
</li>
<li>
<ol start="3">
<li>Fluent API <code>fsql.CodeFirst.ConfigEntity(a =&gt; a.Name("public.tabname"))</code></li>
</ol>
</li>
<li>
<ol start="4">
<li><code>[Table(Name = "public.tabname")]</code></li>
</ol>
</li>
<li>
<ol start="5">
<li><code>AsTable</code> <code>fsql.Select&lt;T&gt;().AsTable((_, old) =&gt; "public.tabname").ToList()</code></li>
</ol>
</li>
</ul>
<blockquote>
<p>v3.2.660 allows adjusting priority with <code>UseMappingPriority</code>.</p>
</blockquote>
<p>Property: <code>[Column(Name = "xxx")]</code></p>
<h2> Primary Key</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>If no primary key is specified, a field named <code>id</code> will be treated as the primary key (case insensitive).</li>
<li>When the primary key is of type Guid, a value will be automatically created (ordered, unique) upon insertion, so you don't need to assign it yourself (supports distributed systems).</li>
</ul>
<blockquote>
<p>Composite primary keys use attributes on multiple properties.</p>
</blockquote>
<blockquote>
<p>For Oracle, if the primary key name length exceeds 30, use <code>[OraclePrimaryKeyName(name)]</code>.</p>
</blockquote>
<h2> Auto-Increment (Identity)</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>If no primary key is specified, the auto-incremented member will be used as the primary key.</li>
<li>For DbFirst mode sequences: <code>[Column(IsIdentity = true, InsertValueSql = "seqname.nextval")]</code></li>
</ul>
<h2> Unique Key, Index</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>The third parameter <code>true</code> indicates a unique key, while <code>false</code> indicates a regular index.</li>
<li>For sharding scenarios: <code>[Index("{tablename}_idx_01", "phone")]</code></li>
</ul>
<h2> Database Type (DbType)</h2>
<p>Note: Generally, use .NET common types (e.g., int/string/DateTime) for mapping. There is no need to set <code>DbType</code> explicitly.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can specify <code>NOT NULL</code> directly on the type or use <code>[Column(IsNullable = false)]</code>.</p>
<h3> Decimal Precision</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> String Length</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the length is -1, the mapping is as follows:</p>
<table>
<thead>
<tr>
<th>MySql</th>
<th>PostgreSQL</th>
<th>SqlServer</th>
<th>Oracle</th>
<th>Sqlite</th>
<th>Firebird</th>
<th>MsAccess</th>
<th>DM</th>
<th>Kingbase</th>
<th>Shentong</th>
<th>Nantong</th>
</tr>
</thead>
<tbody>
<tr>
<td>text</td>
<td>text</td>
<td>nvarchar(max)</td>
<td>nclob</td>
<td>text</td>
<td>blob sub_type 1</td>
<td>longtext</td>
<td>text</td>
<td>text</td>
<td>text</td>
<td>text</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Note: MySql <code>[MaxLength(-2)]</code> or <code>[Column(StringLength = -2)]</code> maps to <code>longtext</code>. Other databases follow the same mapping rules as -1.</p>
</blockquote>
<h3> Nullable</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <code>DbType</code> and <code>IsNullable</code> are not specified, FreeSql provides default settings, such as:</p>
<ul>
<li><code>int</code> -&gt; not null</li>
<li><code>int?</code> -&gt; nullable</li>
</ul>
<p>Typically, only specify <code>IsNullable</code> for <code>string</code> types (string is nullable by default).</p>
<h2> Server Time</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When using database time to insert data:</p>
<ul>
<li>Setting the entity's value is ineffective upon insertion.</li>
<li>The value of the entity will still be the C# time after the successful insert.</li>
</ul>
<h2> Ignore</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the property is not mappable, <code>IsIgnore</code> does not need to be specified. For example, the following is unnecessary:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Optimistic Lock (RowVersion)</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The principle of optimistic locking is to use a field in the entity, such as <code>long version</code>. Before updating, query the data; if <code>version</code> is 1, the generated SQL will include <code>where version = 1</code>. If the modification fails (i.e., <code>Affrows == 0</code>), an exception (<code>DbUpdateVersionException</code>) is thrown.</p>
<p>Each entity supports only one optimistic lock property and supports <code>int</code>, <code>long</code>, <code>string</code>, <code>Guid</code>.</p>
<blockquote>
<p>Applicable to <a href="/en/guide/update.html#_5-setsource-entity" target="blank"><code>SetSource</code></a> for updating data. Regardless of how the version value is updated, it will be incremented by 1.</p>
</blockquote>
<h2> Custom Type Mapping (MapType)</h2>
<p>Use the <code>MapType</code> enumeration -&gt; <code>string/int</code> and so on, as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>v3.2.701 Custom Type Conversion</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>v0.9.15 JsonMap</p>
<blockquote>
<p>dotnet add package FreeSql.Extensions.JsonMap</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Field Position</h2>
<p>Applicable scenario: When inheriting entity classes, the order of fields created by CodeFirst might not be desired. Use this attribute to set the order.</p>
<p>Specify field positions when creating tables, e.g., <code>[Column(Position = 1)]</code>, negative values are for reverse positions.</p>
<h2> CanInsert, CanUpdate</h2>
<p>Indicates whether the field can be inserted or updated, default is <code>true</code>. If set to <code>false</code>, the field will be ignored during insert or update operations.</p>
<p>When specifying methods like <code>InsertColumn</code>/<code>UpdateColumns</code>, this attribute may become ineffective.</p>
<h2> InsertValueSql</h2>
<p>Use this value when executing the Insert method; its syntax is SQL.</p>
<p>Note: For functions like <code>getdate()</code>, consider using <code>ServerTime</code> as it is adapted for all databases.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> RewriteSql, RereadSql</h2>
<p>Rewrite SQL for insertion and read SQL for querying. For example, handling geography type read and write scenarios:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Disable Migration</h2>
<p><code>fsql.CodeFirst.IsAutoSyncStructure</code> sets global automatic structure migration, or use <code>FreeSqlBuilder.UseAutoSyncStructure(true)</code> when creating <code>IFreeSql</code>.</p>
<p>When an [entity class] corresponds to a database [view] or other objects, you can disable migration for specific entities.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Database Comments</h2>
<p>FreeSql CodeFirst supports migrating C# code comments to database comments. Prerequisites:</p>
<ol>
<li>The assembly containing the entity classes must have XML documentation enabled.</li>
<li>The XML file must be in the same directory as the assembly, with the file name: <code>xxx.dll</code> -&gt; <code>xxx.xml</code>.</li>
</ol>
<blockquote>
<p>v1.5.0+ versions add support for parsing <code>[Description("xxx")]</code> attributes, with a lower priority than C# code comments.</p>
</blockquote>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Expression Functions</title>
    <id>https://freesql.net/en/guide/expression-function.html</id>
    <link href="https://freesql.net/en/guide/expression-function.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Expression Functions</h1>
<p>This is one of FreeSql's very special features, so don't miss the details in the documentation. Types that can be mapped can basically use corresponding expression functions, such as date, string, <code>IN</code> queries, arrays (PostgreSQL arrays), dictionaries (PostgreSQL HStore), etc.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Expression Functions</h1>
<p>This is one of FreeSql's very special features, so don't miss the details in the documentation. Types that can be mapped can basically use corresponding expression functions, such as date, string, <code>IN</code> queries, arrays (PostgreSQL arrays), dictionaries (PostgreSQL HStore), etc.</p>
<p>SqlExt.xxx provides commonly used custom functions by default in FreeSql. For details, see <a href="#window-functions">Window Functions</a>.</p>
<h2> Lambda Concatenation</h2>
<ul>
<li>Single Table</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Multiple Tables</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> IN Query</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Optimized to prevent SQL errors when too many elements are in the <code>where in</code> clause, such as:</p>
<p>[Err] ORA-01795: maximum number of expressions in a list is 1000</p>
<p>Originally: where id in (1..1333)</p>
<p>Now: where id in (1..500) or id in (501..1000) or id in (1001..1333)</p>
</blockquote>
<h2> IN Multi-Column Query</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>v3.2.650 uses .Where(a =&gt; list.Any(b =&gt; b.Item1 == a.Id &amp;&amp; b.Item2 == a.ct1))</p>
<p>WHERE (id, code) in ((1,'code1'), (2,'code2')) Implementation code: <a href="/en/extra/issues-in-valuetype.html" target="blank">Multi-Column IN Query, Custom Expression Implementation</a></p>
</blockquote>
<h2> IN Subquery</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> EXISTS Subquery</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Since the subquery entity class is the same as the upper level, use As("b") to specify the alias for differentiation</p>
</blockquote>
<h2> Find Data Created Today</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>SqlServer nvarchar/varchar is compatible with expression parsing, and is parsed as: N'' and '', optimizing the index execution plan;</p>
</blockquote>
<h2> Date Formatting</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>v1.5.0 supports common C# date formats: yyyy MM dd HH mm ss yy M d H hh h m s tt t</p>
</blockquote>
<blockquote>
<p>tt t stands for AM PM</p>
</blockquote>
<h2> Window Functions</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>v1.6.0 adds support for <a href="#custom-parsing">custom parsing</a> features, including SqlExt.Rank().Over().PartitionBy(...), MySql group_concat functions. PR contributions are welcome.</p>
</blockquote>
<p>FreeSql integrates SqlExt.cs extension parsing methods by default:</p>
<table>
<thead>
<tr>
<th>lambda</th>
<th>sql</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>SqlExt.IsNull(id, 0)</td>
<td>isnull/ifnull/coalesce/nvl</td>
<td>Compatible with major databases</td>
</tr>
<tr>
<td>SqlExt.DistinctCount(id)</td>
<td>count(distinct id)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.GreaterThan</td>
<td>&gt;</td>
<td>Greater than</td>
</tr>
<tr>
<td>SqlExt.GreaterThanOrEqual</td>
<td>&gt;=</td>
<td>Greater than or equal to</td>
</tr>
<tr>
<td>SqlExt.LessThan</td>
<td>&lt;</td>
<td>Less than</td>
</tr>
<tr>
<td>SqlExt.LessThanOrEqual</td>
<td>&lt;=</td>
<td>Less than or equal to</td>
</tr>
<tr>
<td>SqlExt.EqualIsNull</td>
<td>IS NULL</td>
<td>Is NULL</td>
</tr>
<tr>
<td>SqlExt.Case(Dictionary)</td>
<td>case when .. end</td>
<td>Case based on dictionary</td>
</tr>
<tr>
<td>SqlExt.GroupConcat</td>
<td>group_concat(distinct .. order by .. separator ..)</td>
<td>MySql</td>
</tr>
<tr>
<td>SqlExt.FindInSet</td>
<td>find_in_set(str, strlist)</td>
<td>MySql</td>
</tr>
<tr>
<td>SqlExt.StringAgg</td>
<td>string_agg(.., ..)</td>
<td>PostgreSQL</td>
</tr>
<tr>
<td>SqlExt.Rank().Over().PartitionBy().ToValue()</td>
<td>rank() over(partition by xx)</td>
<td>Window function</td>
</tr>
<tr>
<td>SqlExt.DenseRank().Over().PartitionBy().ToValue()</td>
<td>dense_rank() over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Count(id).Over().PartitionBy().ToValue()</td>
<td>count(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Sum(id).Over().PartitionBy().ToValue()</td>
<td>sum(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Avg(id).Over().PartitionBy().ToValue()</td>
<td>avg(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Max(id).Over().PartitionBy().ToValue()</td>
<td>max(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Min(id).Over().PartitionBy().ToValue()</td>
<td>min(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.RowNumber(id).Over().PartitionBy().ToValue()</td>
<td>row_number(id) over(partition by xx)</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>The above functionalities are implemented using the <a href="#custom-parsing">custom parsing</a> feature</p>
</blockquote>
<h2> Subquery Join</h2>
<blockquote>
<p>v1.8.0+ uses string.Join + ToList to concatenate multiple rows of subquery results into a single string, such as "1,2,3,4"</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Subquery string.Join + ToList adapts to sqlserver/pgsql/oracle/mysql/sqlite/firebird/达梦/金仓/南大/翰高 <a href="https://github.com/dotnetcore/FreeSql/issues/405" target="_blank" rel="noopener noreferrer">#405</a></p>
</blockquote>
<h2> Subtable First/Count/Sum/Max/Min/Avg</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Subtable ToList</h2>
<blockquote>
<p>Versions 3.2.650+ execute at most 3 SQL queries</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Custom Parsing</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>[ExpressionCall]</code> attribute can be marked on static extension classes as well as on individual static methods.</p>
<table>
<thead>
<tr>
<th>ExpressionCallContext Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>DataType</td>
<td>FreeSql.DataType</td>
<td>Used to implement different database adaptation conditions</td>
</tr>
<tr>
<td>ParsedContent</td>
<td>Dictionary&lt;string, string&gt;</td>
<td>Parsing results of function parameters</td>
</tr>
<tr>
<td>DbParameter</td>
<td>DbParameter</td>
<td>The parameterized object for <code>that</code> (may be null)</td>
</tr>
<tr>
<td>UserParameters</td>
<td>List&lt;DbParameter&gt;</td>
<td>Additional parameterized objects</td>
</tr>
<tr>
<td>Result</td>
<td>string</td>
<td>The SQL string representing the expression function</td>
</tr>
</tbody>
</table>
<blockquote>
<p>When the return value of the extension method is <code>string</code>, its return value can also be used as <code>context.Value.Result</code>.</p>
</blockquote>
<blockquote>
<p>To skip parsing specific parameters, use the <code>[RawValue]</code> attribute.</p>
</blockquote>
<h2> DbParameter</h2>
<p>By default, parameters parsed from <code>Where(lambda)</code> are treated as plain text (to prevent SQL injection). If the execution plan of the database is particularly stringent, you can enable lambda parameterization functionality.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The generated parameter objects' <code>DbType</code>, <code>Size</code>, <code>Precision</code>, and <code>Scale</code> values are set to default optimizations, consistent with the entity property definitions.</p>
<p><strong>Special Operation:</strong></p>
<blockquote>
<p>If you don't want the <code>string</code> parameter's <code>Size</code> to match the entity property, you can use custom expression function functionality, as shown below:</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the first statement, the parameter object's <code>Size</code> is 100, while in the second, it is 10:</p>
<figure><img src="https://user-images.githubusercontent.com/16286519/69433211-2c5fcf80-0d76-11ea-8eec-963eb37199c5.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Global Filters</title>
    <id>https://freesql.net/en/guide/filters.html</id>
    <link href="https://freesql.net/en/guide/filters.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Global Filters</h1>
<p>The IFreeSql base layer implements global filter functionality for <code>Select/Update/Delete</code>, which appends these settings to the SQL WHERE clauses executed.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> TenantId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fsql<span class="token punctuation">.</span>GlobalFilter
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Apply</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITenant<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>TenantId <span class="token operator">==</span> TenantId<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Apply</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthorTest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">"11"</span><span class="token punctuation">)</span>
    
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ApplyOnly</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthorTest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">"11"</span><span class="token punctuation">)</span>
    <span class="token comment">// ApplyOnly sets filters for a specific type only</span>

    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ApplyIf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestAddEnum<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TenantId<span class="token punctuation">.</span>Value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Id <span class="token operator">==</span> TenantId<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ApplyIf filters apply only if the delegate's return value (second parameter) is true</span>

    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Apply</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITenant<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"test5"</span><span class="token punctuation">,</span> a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>TenantId <span class="token operator">==</span> TenantId<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token named-parameter punctuation">before</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token comment">// v3.2.700 added before to place the condition at the beginning of the WHERE clause</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Global Filters</h1>
<p>The IFreeSql base layer implements global filter functionality for <code>Select/Update/Delete</code>, which appends these settings to the SQL WHERE clauses executed.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Apply</code> generic parameter can be set to any type, and filtering will be attempted when using <code>Select/Update/Delete</code> methods:</p>
<ul>
<li>For successful matches, additional WHERE conditions will be appended.</li>
<li>For failed matches, the type will be marked to prevent future matches, avoiding performance loss.</li>
</ul>
<p><code>ApplyOnly</code> specifies that the filter should only apply to a particular type.</p>
<h2> How to Disable?</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>fsql.Update/Delete</code> methods behave similarly.</p>
<h2> Tenant Fields (Dynamic Values)</h2>
<p>Please refer to the documentation: <a href="/en/guide/multi-tenancy.html#approach-1-tenant-field-differentiation" target="blank">【Multi-Tenancy - Distinguish by Tenant Field】</a></p>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Fluent API</title>
    <id>https://freesql.net/en/guide/fluent-api.html</id>
    <link href="https://freesql.net/en/guide/fluent-api.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h2> Fluent API Support</h2>
<p>FreeSql offers Fluent API methods for configuring entity database features using a chain of calls. The <code>Fluent API</code> method names match the feature names and there are three ways to use it. You only need to choose one of the methods:</p>
<blockquote>
<p><code>fsql</code> refers to an <code>IFreeSql</code> object. Configuration should generally be done only once to avoid performance issues. For more details, see: <a href="/en/guide/entity-attribute.html" target="blank">《Entity Attributes》</a>.</p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<h2> Fluent API Support</h2>
<p>FreeSql offers Fluent API methods for configuring entity database features using a chain of calls. The <code>Fluent API</code> method names match the feature names and there are three ways to use it. You only need to choose one of the methods:</p>
<blockquote>
<p><code>fsql</code> refers to an <code>IFreeSql</code> object. Configuration should generally be done only once to avoid performance issues. For more details, see: <a href="/en/guide/entity-attribute.html" target="blank">《Entity Attributes》</a>.</p>
</blockquote>
<h2> ConfigEntity</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>FreeSql.DbContext v1.4.0+ implements a syntax similar to EfCore Fluent API 99%.</p>
</blockquote>
<h2> Entity</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> IEntityTypeConfiguration</h2>
<p>Configure entities by inheriting from the <code>IEntityTypeConfiguration</code> interface.</p>
<ul>
<li>.NET Framework 4.0 is not supported.</li>
</ul>
<h3> Entity Configuration Class</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Two Ways to Use</h3>
<ol>
<li><strong>Single Configuration</strong></li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>Batch Configuration</strong></li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> Priority</h2>
<p>Database features &gt; Entity attributes &gt; Fluent API &gt; Aop</p>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Untyped Mapping</title>
    <id>https://freesql.net/en/guide/lowcode.html</id>
    <link href="https://freesql.net/en/guide/lowcode.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Untyped Mapping</h1>
<p>This document follows the <a href="/en/guide/dynamic.html" target="blank">“Dynamic Operations”</a> and is designed specifically for low-code solutions.</p>
<p>FreeSql defaults to using entity types. Although types can be dynamically created at runtime, frequent dynamic compilation can lead to memory leaks and difficulties in managing type versions.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Untyped Mapping</h1>
<p>This document follows the <a href="/en/guide/dynamic.html" target="blank">“Dynamic Operations”</a> and is designed specifically for low-code solutions.</p>
<p>FreeSql defaults to using entity types. Although types can be dynamically created at runtime, frequent dynamic compilation can lead to memory leaks and difficulties in managing type versions.</p>
<p>This feature operates independently and performs CRUD operations using pure dictionaries (without entity types), supporting features such as navigation properties and cascading operations.</p>
<p>Note: This feature operates independently; do not confuse it with the cascading mechanism in other documents.</p>
<h2> Dictionary CUD (Single Table)</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>InsertDict/UpdateDict/DeleteDict/InsertOrUpdateDict</code> all support batch operations, corresponding to the type <code>List&lt;Dictionary&lt;string, object&gt;&gt;</code>.</p>
<h2> Untyped CRUD (Advanced)</h2>
<p>No dependence on entity types, no dynamic compilation needed, pure dictionary operations, supports navigation properties, cascading saves, and AOT compilation.</p>
<p>NuGet installation:</p>
<blockquote>
<p>dotnet add package FreeSql.Extensions.ZeroEntity</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Queries return results as dictionaries <code>Dictionary&lt;string, object&gt;</code>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>ctx</code> object depends on the JSON configuration as follows:</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Cascading Mechanism</h2>
<p>Before understanding this mechanism, please forget about the cascading mechanisms of Repository/DbContext and other prior methods; they are unrelated.</p>
<p><code>schemas[]</code> is a set of table mapping information definitions, including table names, column names, navigation properties, indexes, etc.</p>
<ul>
<li>Navigation Properties: OneToOne/OneToMany/ManyToOne/ManyToMany</li>
<li>Aggregate Root: OneToOne/OneToMany/Many-to-Many Intermediate Tables, treated as a whole</li>
<li>External Root: ManyToOne/ManyToMany External</li>
</ul>
<p>For example:</p>
<ul>
<li><code>User</code> is the aggregate root.</li>
<li><code>UserExt/UserClaim/UserRole</code> are child members of the <code>User</code> table, stored/deleted together.</li>
<li><code>Role</code> is an external root (relative to <code>User</code>, it is an independent aggregate root).</li>
</ul>
<p>CRUD operations are based on the aggregate root of <code>schemas[0]</code>.</p>
<ul>
<li>Query: Eagerly load all child members, the external root, and the external root's external roots (recursively).</li>
<li>State Management: Snapshot of the aggregate root (since external roots are also aggregate roots, they are stored in parallel to the aggregate root).</li>
</ul>
<p>Comparing and Saving:</p>
<p>Compare the current operation's aggregate root with the snapshot copy to calculate the changes in columns.</p>
<table>
<thead>
<tr>
<th>Navigation Property</th>
<th>Snapshot</th>
<th>Latest</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td>OneToOne</td>
<td>NULL</td>
<td>Object</td>
<td>Add new record</td>
</tr>
<tr>
<td>OneToOne</td>
<td>Object</td>
<td>NULL</td>
<td>Delete snapshot record</td>
</tr>
<tr>
<td>OneToOne</td>
<td>Object</td>
<td>Object</td>
<td>Update if changed, otherwise ignore</td>
</tr>
<tr>
<td>OneToMany</td>
<td>NULL/Empty</td>
<td>List</td>
<td>Add latest List records</td>
</tr>
<tr>
<td>OneToMany</td>
<td>List</td>
<td>NULL</td>
<td>Ignore</td>
</tr>
<tr>
<td>OneToMany</td>
<td>List</td>
<td>Empty</td>
<td>Delete snapshot List records</td>
</tr>
<tr>
<td>OneToMany</td>
<td>List</td>
<td>List</td>
<td>Compare and save, calculate add/update/delete actions</td>
</tr>
<tr>
<td>Many-to-Many Intermediate Table</td>
<td></td>
<td></td>
<td>Same as OneToMany</td>
</tr>
</tbody>
</table>
<p>Insert:</p>
<ul>
<li>OneToOne: Cascading insert</li>
<li>OneToMany: Cascading insert</li>
<li>ManyToOne: Compare and save external root first, associate external root ID, then insert the aggregate root</li>
<li>ManyToMany: Compare and save external root first, insert aggregate root, then insert into the intermediate table</li>
</ul>
<p>Update:</p>
<ul>
<li>OneToOne: Cascading compare and save</li>
<li>OneToMany: Cascading compare and save</li>
<li>ManyToOne: Compare and save external root first, associate external root ID, then update the aggregate root</li>
<li>ManyToMany: Compare and save external root first, update the aggregate root, then compare and save the intermediate table</li>
</ul>
<p>Delete:</p>
<ul>
<li>OneToOne: Cascading delete</li>
<li>OneToMany: Cascading delete</li>
<li>ManyToOne: Ignore</li>
<li>ManyToMany: Cascading delete from the intermediate table (note: do not delete the external root)</li>
</ul>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Multi-tenancy</title>
    <id>https://freesql.net/en/guide/multi-tenancy.html</id>
    <link href="https://freesql.net/en/guide/multi-tenancy.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Multi-tenancy</h1>
<h3> What is Multi-tenancy?</h3>
<p>According to Wikipedia: "Software multi-tenancy is a software architecture in which a single instance of software runs on a server and serves multiple tenants." A tenant is a group of users who share specific permissions on that software instance. With a multi-tenancy architecture, software applications are designed to provide each tenant with a dedicated instance, including data specific to that instance, while also sharing configuration, user management, tenant-specific features, and non-functional attributes. Compared to a multi-instance architecture, multi-tenancy separates multiple instances representing different tenants.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Multi-tenancy</h1>
<h3> What is Multi-tenancy?</h3>
<p>According to Wikipedia: "Software multi-tenancy is a software architecture in which a single instance of software runs on a server and serves multiple tenants." A tenant is a group of users who share specific permissions on that software instance. With a multi-tenancy architecture, software applications are designed to provide each tenant with a dedicated instance, including data specific to that instance, while also sharing configuration, user management, tenant-specific features, and non-functional attributes. Compared to a multi-instance architecture, multi-tenancy separates multiple instances representing different tenants.</p>
<p>Multi-tenancy is used to create SaaS (Software as a Service) applications (cloud processing).</p>
<h3> Approach 1: Tenant Field Differentiation</h3>
<p><strong>Step 1:</strong> Understand <code>AsyncLocal&lt;int&gt;</code></p>
<p><code>ThreadLocal</code> can be thought of as a dictionary <code>Dictionary&lt;int, string&gt;</code> where Key is the thread ID and Value is the value. When crossing methods, you only need to know the thread ID to obtain the corresponding value.</p>
<p>However, we know that the thread ID might change across asynchronous methods, making <code>ThreadLocal</code> unsuitable.</p>
<p><code>AsyncLocal</code> is an upgraded version of <code>ThreadLocal</code>, which solves the problem of retrieving the corresponding value across asynchronous methods.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 2:</strong> FreeSql global filters allow any query/update/delete to include tenant conditions.</p>
<p>The following code does not activate the filter if the tenant value is not set. What does this mean?</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 3:</strong> FreeSql <code>Aop.AuditValue</code> object audits events to implement unified interception of insert and update entity objects.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 4:</strong> Handle tenant logic in the <code>AspnetCore</code> <code>Startup.cs</code> middleware.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> WhereCascade</h3>
<p>When querying multiple tables, it's cumbersome to apply conditions like <code>isdeleted</code> to each table. <code>WhereCascade</code> attaches this condition to all tables when generating SQL. This can also solve multi-table tenant conditions.</p>
<p>For example:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The resulting SQL:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is effective only when expressions can be appended to entities, and it supports sub-table queries. The more tables used in a single query, the greater the benefit.</p>
<p>Applicable scopes:</p>
<ul>
<li>Subqueries, one-to-many, many-to-many, custom subqueries;</li>
<li>Join queries, navigation properties, custom join queries;</li>
<li>Include/IncludeMany sub-collection queries;</li>
</ul>
<blockquote>
<p>Broadcasting of [deferred properties] is not currently supported;</p>
</blockquote>
<blockquote>
<p>This feature is different from [filters], as it propagates conditions for single multi-table queries.</p>
</blockquote>
<h3> Approach 2: Tenant-specific Tables</h3>
<p>This approach requires each tenant to correspond to different tables, such as <code>Goods_1</code>, <code>Goods_2</code>, <code>Goods_3</code> corresponding to tenant 1, tenant 2, and tenant 3’s product tables respectively.</p>
<p>This is essentially a standard sharding approach. FreeSql provides several APIs for sharding scenarios:</p>
<ul>
<li>Create table <code>fsql.CodeFirst.SyncStructure(typeof(Goods), "Goods_1")</code></li>
<li>Perform CURD operations on the table</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The above code creates a repository with tenant-specific tables, so operations will eventually affect the <code>Goods_1</code> table.</p>
<blockquote>
<p>For more details, see: <a href="/en/guide/repository.html" target="blank">《FreeSql.Repository Repository》</a>, <a href="/en/guide/sharding.html" target="blank">《Sharding》</a>.</p>
</blockquote>
<blockquote>
<p>v3.2.833 Dynamic Table Name Setting</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Approach 3: Tenant-specific Databases</h3>
<ul>
<li><strong>Scenario 1:</strong> Within the same database instance (not cross-server), differentiate between tenants using different database names or schemas. The method is the same as Approach 2.</li>
<li><strong>Scenario 2:</strong> Cross-server sharding, this section explains this scenario.</li>
</ul>
<p><strong>Step 1:</strong> <code>FreeSql.Cloud</code> provides cross-database access for FreeSql, distributed transactions TCC, and SAGA solutions, supporting .NET Core 2.1+, .NET Framework 4.0+.</p>
<p>Instead of creating <code>IFreeSql</code> using <code>FreeSqlBuilder</code>, you should use <code>FreeSqlCloud</code> since it also implements the <code>IFreeSql</code> interface.</p>
<blockquote>
<p>dotnet add package FreeSql.Cloud</p>
</blockquote>
<p>or</p>
<blockquote>
<p>Install-Package FreeSql.Cloud</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 2:</strong> Directly use <code>IFreeSql</code> to access tenant databases.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>To temporarily access other database tables, use <code>FreeSqlCloud</code> object <code>Use("db3").Select&lt;T&gt;().ToList()</code></li>
<li>For base tables in the main database, use <code>FreeSqlCloud</code> object <code>EntitySteering</code> to permanently direct to <code>main</code> without manually switching using <code>.Use</code></li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Navigation Properties</title>
    <id>https://freesql.net/en/guide/navigate-attribute.html</id>
    <link href="https://freesql.net/en/guide/navigate-attribute.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Navigation Properties</h1>
<p>FreeSql offers six types of navigation properties: OneToMany, ManyToOne, ManyToMany, OneToOne, Parent, and <a href="https://www.cnblogs.com/FreeSql/p/16351417.html" target="_blank" rel="noopener noreferrer">PgArrayToMany</a>.</p>
<p>What can navigation properties do?</p>]]></summary>
    <content type="html"><![CDATA[<h1> Navigation Properties</h1>
<p>FreeSql offers six types of navigation properties: OneToMany, ManyToOne, ManyToMany, OneToOne, Parent, and <a href="https://www.cnblogs.com/FreeSql/p/16351417.html" target="_blank" rel="noopener noreferrer">PgArrayToMany</a>.</p>
<p>What can navigation properties do?</p>
<ul>
<li><a href="/en/guide/select-multi-table.html" target="blank">Multi-table Queries</a> <code>Where(a =&gt; a.Parent.Parent.Name == "xx")</code> <code>Where(a =&gt; a.Childs.Any(b =&gt; b.title == "xxx"))</code></li>
<li><a href="/en/guide/select-include.html" target="blank">Eager Loading</a> <code>Include/IncludeMany</code></li>
<li><a href="/en/guide/select-lazy-loading.html" target="blank">Lazy Loading</a></li>
<li><a href="/en/guide/select-as-tree.html" target="blank">Tree Table Queries</a></li>
<li><a href="/en/guide/cascade-saving.html" target="blank">Cascade Saving</a></li>
<li><a href="/en/guide/cascade-delete.html" target="blank">Cascade Deletion</a></li>
<li><a href="/en/guide/aggregateroot.html" target="blank">Aggregate Root Repository</a></li>
</ul>
<p>Navigation properties make multi-table queries very convenient, allowing direct use of navigation objects with lambda expressions—so comfortable!</p>
<h2> Custom Configuration</h2>
<p>Types supported by OneToMany/ManyToMany: <code>ICollection&lt;T&gt;</code>, <code>List&lt;T&gt;</code>, <code>ObservableCollection&lt;T&gt;</code></p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>You can also use Fluent API to set navigation relationships externally:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Note:</p>
</blockquote>
<ol>
<li>Navigation properties will be invalid if the property is set with <code>Column(IsIgnore = true)</code>.</li>
<li>The strings set in <code>Navigate</code> are class property names, not table column names!</li>
</ol>
<blockquote>
<p>Pre-warming Note: Due to the need to resolve circular references, navigation property configuration may fail on first use when relationships are complex. It should succeed on the second attempt. A solution is to pre-warm all entity classes at application startup by executing <code>fsql.Select&lt;object&gt;().AsType(EntityClass);</code> in a loop.</p>
</blockquote>
<h2> Non-Primary Key Associations</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Non-primary key associations are supported for OneToMany/ManyToOne relationships and are only effective during queries (not supported for cascade saving or cascade deletion).</p>
<h2> Checking Navigation Properties</h2>
<p>To check if a navigation property is valid:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GetTableRef(string propertyName, bool isThrow);</code></p>
<h2> OneToOne</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In a one-to-one relationship, both sides must use the <code>Navigate</code> attribute with the entity's <strong>primary key</strong> (supports cascade saving and cascade deletion).</p>
<h2> PgArrayToMany</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>More information: <a href="https://github.com/dotnetcore/FreeSql/issues/1145" target="_blank" rel="noopener noreferrer">#1145</a></p>
<h2> Convention Naming (No Need to Specify Navigate)</h2>
<p>Tip: This section is for general understanding; not mandatory knowledge. You can skip it if needed.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Performance</title>
    <id>https://freesql.net/en/guide/performance.html</id>
    <link href="https://freesql.net/en/guide/performance.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Performance</h1>
<p>FreeSql, while implementing powerful features, does not compromise on performance. Operations involving reflection or time-consuming tasks are handled with caching. Data reading uses ExpressionTree, making FreeSql's entity data parsing speed very close to that of Dapper.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Performance</h1>
<p>FreeSql, while implementing powerful features, does not compromise on performance. Operations involving reflection or time-consuming tasks are handled with caching. Data reading uses ExpressionTree, making FreeSql's entity data parsing speed very close to that of Dapper.</p>
<h1> Insert Test</h1>
<h3> Test Results (52 Fields)</h3>
<table>
<thead>
<tr>
<th></th>
<th>180K</th>
<th>10K</th>
<th>5K</th>
<th>2K</th>
<th>1K</th>
<th>500</th>
<th>100</th>
<th>50</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySql 5.5 ExecuteAffrows</td>
<td>38,481</td>
<td>2,234</td>
<td>1,136</td>
<td>284</td>
<td>239</td>
<td>167</td>
<td>66</td>
<td>30</td>
</tr>
<tr>
<td>MySql 5.5 ExecuteMySqlBulkCopy</td>
<td>28,405</td>
<td>1,142</td>
<td>657</td>
<td>451</td>
<td>435</td>
<td>592</td>
<td>47</td>
<td>22</td>
</tr>
<tr>
<td>SqlServer Express ExecuteAffrows</td>
<td>402,355</td>
<td>24,847</td>
<td>11,465</td>
<td>4,971</td>
<td>2,437</td>
<td>915</td>
<td>138</td>
<td>88</td>
</tr>
<tr>
<td>SqlServer Express ExecuteSqlBulkCopy</td>
<td>21,065</td>
<td>578</td>
<td>326</td>
<td>139</td>
<td>105</td>
<td>79</td>
<td>60</td>
<td>48</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecuteAffrows</td>
<td>46,756</td>
<td>3,294</td>
<td>2,269</td>
<td>1,019</td>
<td>374</td>
<td>209</td>
<td>51</td>
<td>37</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecutePgCopy</td>
<td>10,090</td>
<td>583</td>
<td>337</td>
<td>136</td>
<td>88</td>
<td>61</td>
<td>30</td>
<td>25</td>
</tr>
<tr>
<td>Oracle XE ExecuteAffrows</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>24,528</td>
<td>10,648</td>
<td>571</td>
<td>200</td>
</tr>
<tr>
<td>Sqlite ExecuteAffrows</td>
<td>28,554</td>
<td>1,149</td>
<td>701</td>
<td>327</td>
<td>155</td>
<td>91</td>
<td>44</td>
<td>35</td>
</tr>
</tbody>
</table>
<blockquote>
<p>180K Explanation: Insert 180,000 records; the numbers in the table represent execution time (in ms).</p>
</blockquote>
<blockquote>
<p>Oracle's insertion performance is undeniable, but the student edition might have significant limitations.</p>
</blockquote>
<p>Note: The results for open-source databases are quite meaningful, but there may be significant performance differences between commercial database versions.</p>
<h3> Test Results (10 Fields)</h3>
<table>
<thead>
<tr>
<th></th>
<th>180K</th>
<th>10K</th>
<th>5K</th>
<th>2K</th>
<th>1K</th>
<th>500</th>
<th>100</th>
<th>50</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySql 5.5 ExecuteAffrows</td>
<td>11,171</td>
<td>866</td>
<td>366</td>
<td>80</td>
<td>83</td>
<td>50</td>
<td>24</td>
<td>34</td>
</tr>
<tr>
<td>MySql 5.5 ExecuteMySqlBulkCopy</td>
<td>6,504</td>
<td>399</td>
<td>257</td>
<td>116</td>
<td>87</td>
<td>100</td>
<td>16</td>
<td>16</td>
</tr>
<tr>
<td>SqlServer Express ExecuteAffrows</td>
<td>47,204</td>
<td>2,275</td>
<td>1,108</td>
<td>488</td>
<td>279</td>
<td>123</td>
<td>35</td>
<td>16</td>
</tr>
<tr>
<td>SqlServer Express ExecuteSqlBulkCopy</td>
<td>4,248</td>
<td>127</td>
<td>71</td>
<td>30</td>
<td>48</td>
<td>14</td>
<td>11</td>
<td>10</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecuteAffrows</td>
<td>9,786</td>
<td>568</td>
<td>336</td>
<td>157</td>
<td>102</td>
<td>34</td>
<td>9</td>
<td>6</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecutePgCopy</td>
<td>4,081</td>
<td>167</td>
<td>93</td>
<td>39</td>
<td>21</td>
<td>12</td>
<td>4</td>
<td>2</td>
</tr>
<tr>
<td>Oracle XE ExecuteAffrows</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>2,394</td>
<td>731</td>
<td>67</td>
<td>33</td>
</tr>
<tr>
<td>Sqlite ExecuteAffrows</td>
<td>4,524</td>
<td>246</td>
<td>137</td>
<td>94</td>
<td>35</td>
<td>19</td>
<td>14</td>
<td>11</td>
</tr>
</tbody>
</table>
<blockquote>
<p>The test results were conducted on the same operating system and with warm-up.</p>
</blockquote>
<blockquote>
<p>The ExecuteMySqlBulkCopy method is implemented in FreeSql.Provider.MySqlConnector.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1> Query Test</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test Method: Run twice and use the performance report from the second run to avoid unfair results from the first run.</p>
<h3> Test Results</h3>
<table>
<thead>
<tr>
<th></th>
<th>Quantity</th>
<th>Query&lt;Class&gt;</th>
<th>Query&lt;Tuple&gt;</th>
<th>Query&lt;dynamic&gt;</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dapper.Query(sql)</td>
<td>131072</td>
<td>623.4959ms</td>
<td>424.2411ms</td>
<td>644.8897ms</td>
</tr>
<tr>
<td>FreeSql.Query(sql)</td>
<td>131072</td>
<td>647.0552ms</td>
<td>577.3532ms</td>
<td>944.7454ms</td>
</tr>
<tr>
<td>FreeSql.ToList</td>
<td>131072</td>
<td>622.8980ms</td>
<td>435.3532ms</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>FreeSql showed a slight performance difference, as it supports more types, which may require parsing, recursion, or looping.</p>
<blockquote>
<p>Dapper lacks batch insert/update/delete functionalities and executes a single SQL command, making its test results less meaningful.</p>
</blockquote>
<blockquote>
<p>FreeSql batch insert command used: INSERT INTO Song (...) VALUES(...),VALUES(...),VALUES(...)...</p>
</blockquote>
<h3> List Dapper.Query&lt;Class&gt; VS FreeSql.Query&lt;Class&gt;</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Dapper.Query&lt;Tuple&gt; VS FreeSql.Query&lt;Tuple&gt;</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Dapper.Query&lt;dynamic&gt; VS FreeSql.Query&lt;dynamic&gt;</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Dapper.Query VS FreeSql.ToList</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Read-Write Splitting</title>
    <id>https://freesql.net/en/guide/read-write-splitting.html</id>
    <link href="https://freesql.net/en/guide/read-write-splitting.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Read-Write Splitting</h1>
<p>FreeSql supports database read-write splitting. This feature pertains to client-side read-write splitting behavior; how the database server itself is configured remains unchanged and unaffected by this feature. For convenience, when referring to <strong>read-write splitting</strong> below, it will mean the client-side functionality support.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Read-Write Splitting</h1>
<p>FreeSql supports database read-write splitting. This feature pertains to client-side read-write splitting behavior; how the database server itself is configured remains unchanged and unaffected by this feature. For convenience, when referring to <strong>read-write splitting</strong> below, it will mean the client-side functionality support.</p>
<p>The methods for read-write splitting vary among different databases. Once the read-write splitting feature is enabled on the database server, the implementation generally falls into the following categories:</p>
<ol>
<li>Nginx proxy, which is complex to configure and prone to errors;</li>
<li>Middleware, such as MyCat;</li>
<li>Client-side support;</li>
</ol>
<p>FreeSql implements the third option, supporting one <strong>master database</strong> and multiple <strong>slave databases</strong>, with the query strategy for <strong>slave databases</strong> being random.</p>
<p>If a <strong>slave database</strong> fails, it will switch to other available <strong>slave databases</strong>. If all <strong>slave databases</strong> are unavailable, it will fall back to querying the <strong>master database</strong>.</p>
<p>Failed <strong>slave databases</strong> are isolated and periodically checked for availability until they recover.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Repository</title>
    <id>https://freesql.net/en/guide/repository.html</id>
    <link href="https://freesql.net/en/guide/repository.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<p><code>FreeSql.DbContext</code> references the abp vnext interface specification and implements a generic repository layer functionality (CURD), which can be understood as an enhanced version of traditional Data Access Layer (DAL).</p>

<ul>
<li>Select/Attach snapshot objects, Update only changes modified fields;</li>
<li>Insert data, optimized execution with ExecuteAffrows/ExecuteIdentity/ExecuteInserted across various databases;</li>
<li>Cascade save and cascade delete (one-to-one, one-to-many, many-to-many);</li>
<li>Repository + Unit of Work design pattern, simple and unified style;</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p><code>FreeSql.DbContext</code> references the abp vnext interface specification and implements a generic repository layer functionality (CURD), which can be understood as an enhanced version of traditional Data Access Layer (DAL).</p>

<ul>
<li>Select/Attach snapshot objects, Update only changes modified fields;</li>
<li>Insert data, optimized execution with ExecuteAffrows/ExecuteIdentity/ExecuteInserted across various databases;</li>
<li>Cascade save and cascade delete (one-to-one, one-to-many, many-to-many);</li>
<li>Repository + Unit of Work design pattern, simple and unified style;</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Note: Repository objects are not thread-safe, so they should not be used concurrently across multiple threads.</p>
</blockquote>
<h2> Temporary Usage</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>Suitable for creating repositories temporarily in local code and disposing of them when done.</p>
</blockquote>
<h2> Generic Repository (Dependency Injection)</h2>
<p>Method 2: Generic Repository + Dependency Injection (.NET Core);</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Inherited Repository (Dependency Injection)</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Update Comparison</h2>
<p>Only update changed properties:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Does it seem cumbersome to query first and then update?</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>repo.CompareState(item)</code> can retrieve the status change information of <code>item</code>.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Login Information (Dependency Injection)</h2>
<p><code>repo.DbContextOptions.AuditValue</code> is suitable for integration with AddScoped (Dependency Injection) to uniformly set login information.</p>
<p>Example: Automatically use login information when inserting/updating with repository</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Compatibility Issues</h2>
<p>The <code>output inserted</code> feature provided by SqlServer allows quick retrieval of inserted data when tables use auto-increment or default values defined in the database. PostgreSQL also has similar functionality, which is convenient but not supported by every database.</p>
<p>When using databases that do not support this feature (Sqlite/MySql/Oracle/Dameng/Nandasoft/MsAccess), and entities use auto-increment properties, batch inserts in the repository will be executed one by one. Consider the following improvements:</p>
<ul>
<li>Use UUID as the primary key (i.e., Guid);</li>
<li>Avoid using default value functionality in the database;</li>
</ul>
<h2> Cascade Save</h2>
<p>Please refer to the document <a href="/en/guide/cascade-saving.html" target="blank">《Cascade Save》</a></p>
<h2> API</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Return Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>EntityType</td>
<td>Type</td>
<td>The entity type the repository is currently operating on, note that it may not be TEntity</td>
</tr>
<tr>
<td>UnitOfWork</td>
<td>IUnitOfWork</td>
<td>The unit of work currently in use</td>
</tr>
<tr>
<td>Orm</td>
<td>IFreeSql</td>
<td>The ORM currently in use</td>
</tr>
<tr>
<td>DbContextOptions</td>
<td>DbContextOptions</td>
<td>The DbContext settings currently in use, changes to these settings do not affect others</td>
</tr>
<tr>
<td>UpdateDiy</td>
<td>IUpdate&lt;TEntity&gt;</td>
<td>Preparing to update data, in the same transaction as the repository</td>
</tr>
<tr>
<td>Select</td>
<td>ISelect&lt;TEntity&gt;</td>
<td>Preparing to query data</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Value</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>AsType</td>
<td>void</td>
<td>Type</td>
<td>Change the entity type the repository is currently operating on</td>
</tr>
<tr>
<td>Get</td>
<td>TEntity</td>
<td>TKey</td>
<td>Query data by primary key</td>
</tr>
<tr>
<td>Find</td>
<td>TEntity</td>
<td>TKey</td>
<td>Query data by primary key</td>
</tr>
<tr>
<td>Delete</td>
<td>int</td>
<td>TKey</td>
<td>Delete data by primary key</td>
</tr>
<tr>
<td>Delete</td>
<td>int</td>
<td>Lambda</td>
<td>Delete data based on lambda conditions</td>
</tr>
<tr>
<td>Delete</td>
<td>int</td>
<td>TEntity</td>
<td>Delete data</td>
</tr>
<tr>
<td>Delete</td>
<td>int</td>
<td>IEnumerable&lt;TEntity&gt;</td>
<td>Batch delete data</td>
</tr>
<tr>
<td><a href="/en/guide/cascade-delete.html" target="blank">DeleteCascadeByDatabase</a></td>
<td>List&lt;object&gt;</td>
<td>Lambda</td>
<td>Recursively delete data by navigation properties</td>
</tr>
<tr>
<td>Insert</td>
<td>-</td>
<td>TEntity</td>
<td>Insert data, if the entity has auto-increment columns, the auto-increment value will be filled into the entity after insertion</td>
</tr>
<tr>
<td>Insert</td>
<td>-</td>
<td>IEnumerable&lt;TEntity&gt;</td>
<td>Batch insert data</td>
</tr>
<tr>
<td>Update</td>
<td>-</td>
<td>TEntity</td>
<td>Update data</td>
</tr>
<tr>
<td>Update</td>
<td>-</td>
<td>IEnumerable&lt;TEntity&gt;</td>
<td>Batch update data</td>
</tr>
<tr>
<td>InsertOrUpdate</td>
<td>-</td>
<td>TEntity</td>
<td>Insert or update data</td>
</tr>
<tr>
<td>FlushState</td>
<td>-</td>
<td>None</td>
<td>Clear state management data</td>
</tr>
<tr>
<td>Attach</td>
<td>-</td>
<td>TEntity</td>
<td>Attach entity to state management, used for updating or deleting without querying</td>
</tr>
<tr>
<td>Attach</td>
<td>-</td>
<td>IEnumerable&lt;TEntity&gt;</td>
<td>Batch attach entities to state management</td>
</tr>
<tr>
<td>AttachOnlyPrimary</td>
<td>-</td>
<td>TEntity</td>
<td>Attach only primary key data of entity to state management</td>
</tr>
<tr>
<td><a href="/en/guide/insert-or-update.html#_4-table-beginedit" target="blank">BeginEdit</a></td>
<td>-</td>
<td>List&lt;TEntity&gt;</td>
<td>Prepare to edit a list of entities</td>
</tr>
<tr>
<td>EndEdit</td>
<td>int</td>
<td>None</td>
<td>Complete editing data and perform save actions</td>
</tr>
</tbody>
</table>
<blockquote>
<p>State management allows Update to only update changed fields (not all fields), and using Attach and Update is very comfortable.</p>
</blockquote>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Tree Table ✨</title>
    <id>https://freesql.net/en/guide/select-as-tree.html</id>
    <link href="https://freesql.net/en/guide/select-as-tree.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Tree Table ✨</h1>
<p>Designing hierarchical data (parent-child relationships) is common in databases. Each design approach has its own strengths and weaknesses:</p>
<ul>
<li><strong>Method 1</strong>: Only a <code>parent_id</code> field in the table. Challenge: Complex querying (this article addresses it).</li>
<li><strong>Method 2</strong>: Redundant child IDs in the table for easier querying. Challenge: Need to recalculate during additions/updates/deletions.</li>
<li><strong>Method 3</strong>: Storing left and right values for encoding. Challenge: Similar to Method 2.</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> Tree Table ✨</h1>
<p>Designing hierarchical data (parent-child relationships) is common in databases. Each design approach has its own strengths and weaknesses:</p>
<ul>
<li><strong>Method 1</strong>: Only a <code>parent_id</code> field in the table. Challenge: Complex querying (this article addresses it).</li>
<li><strong>Method 2</strong>: Redundant child IDs in the table for easier querying. Challenge: Need to recalculate during additions/updates/deletions.</li>
<li><strong>Method 3</strong>: Storing left and right values for encoding. Challenge: Similar to Method 2.</li>
</ul>
<p>Method 1 is the simplest in design. This article provides a solution for its recursive querying issue, making it transparent for use.</p>
<h2> Parent-Child Navigation Properties</h2>
<p>FreeSql provides navigation properties specifically for parent-child relationships:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Querying Parent and Child Data</h3>
<p><strong>Querying Parent Data</strong>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Querying Child Data</strong>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Cascade Save Example</strong>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1. <code>ToTreeList</code></h2>
<p>After configuring the parent-child properties, you can use:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ToTreeList</code> converts flat data into a tree structure in memory.</p>
<h2> 2. <code>AsTreeCte</code> Recursive Deletion</h2>
<p>For MySQL, ensure to add <code>Allow User Variables=True</code> to the connection string to avoid <code>MySqlException Parameter '@cte ids' must be defined</code>.</p>
<p>Recursive deletion of tree nodes:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For soft deletion:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3. <code>AsTreeCte</code> Recursive Querying</h2>
<p><code>AsTreeCte</code> handles recursive queries efficiently. Parameters include:</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>(Optional) <code>pathSelector</code></td>
<td>Path content selection; e.g., 中国 -&gt; 北京 -&gt; 东城区</td>
</tr>
<tr>
<td>(Optional) <code>up</code></td>
<td>false (default): Query from parent to child; true: Query from child to parent</td>
</tr>
<tr>
<td>(Optional) <code>pathSeparator</code></td>
<td>Separator for <code>pathSelector</code>, default: -&gt;</td>
</tr>
<tr>
<td>(Optional) <code>level</code></td>
<td>Set recursion level</td>
</tr>
</tbody>
</table>
<h3> Examples</h3>
<p><strong>Example 1: <code>AsTreeCte()</code> + <code>ToTreeList</code></strong></p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 2: <code>AsTreeCte()</code> + <code>ToList</code></strong></p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 3: <code>AsTreeCte(pathSelector)</code> + <code>ToList</code></strong></p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>For more examples, please refer to the code comments.</p>
</blockquote>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Group By</title>
    <id>https://freesql.net/en/guide/select-group-by.html</id>
    <link href="https://freesql.net/en/guide/select-group-by.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Group By</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For how to create it, please refer to the introductory documentation</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span> 
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Group By</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1. Single Table Grouping</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>To compute aggregate values without grouping, use ToAggregate instead of ToList</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2. Multi-Table Grouping</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>g.Value.Item1 corresponds to Topic</li>
<li>g.Value.Item2 corresponds to Category</li>
<li>g.Value.Item3 corresponds to Area</li>
</ul>
<table>
<thead>
<tr>
<th>Description</th>
<th>Method</th>
<th>SQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>Count</td>
<td>.Count()</td>
<td>select count(*) from ...</td>
</tr>
<tr>
<td>Sum</td>
<td>.Sum(a =&gt; a.Score)</td>
<td>select sum([Score]) from ...</td>
</tr>
<tr>
<td>Average</td>
<td>.Avg(a =&gt; a.Score)</td>
<td>select avg([Score]) from ...</td>
</tr>
<tr>
<td>Maximum</td>
<td>.Max(a =&gt; a.Score)</td>
<td>select max([Score]) from ...</td>
</tr>
<tr>
<td>Minimum</td>
<td>.Min(a =&gt; a.Score)</td>
<td>select min([Score]) from ...</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>lambda</th>
<th>sql</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>SqlExt.IsNull(id, 0)</td>
<td>isnull/ifnull/coalesce/nvl</td>
<td>Compatible with various databases</td>
</tr>
<tr>
<td>SqlExt.DistinctCount(id)</td>
<td>count(distinct id)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.GreaterThan</td>
<td>&gt;</td>
<td>Greater than</td>
</tr>
<tr>
<td>SqlExt.GreaterThanOrEqual</td>
<td>&gt;=</td>
<td>Greater than or equal to</td>
</tr>
<tr>
<td>SqlExt.LessThan</td>
<td>&lt;</td>
<td>Less than</td>
</tr>
<tr>
<td>SqlExt.LessThanOrEqual</td>
<td>&lt;=</td>
<td>Less than or equal to</td>
</tr>
<tr>
<td>SqlExt.EqualIsNull</td>
<td>IS NULL</td>
<td>Is NULL</td>
</tr>
<tr>
<td>SqlExt.Case(dictionary)</td>
<td>case when .. end</td>
<td>Case based on dictionary</td>
</tr>
<tr>
<td>SqlExt.GroupConcat</td>
<td>group_concat(distinct .. order by .. separator ..)</td>
<td>MySql</td>
</tr>
<tr>
<td>SqlExt.FindInSet</td>
<td>find_in_set(str, strlist)</td>
<td>MySql</td>
</tr>
<tr>
<td>SqlExt.StringAgg</td>
<td>string_agg(.., ..)</td>
<td>PostgreSQL</td>
</tr>
<tr>
<td>SqlExt.Rank().Over().PartitionBy().ToValue()</td>
<td>rank() over(partition by xx)</td>
<td>Window function</td>
</tr>
<tr>
<td>SqlExt.DenseRank().Over().PartitionBy().ToValue()</td>
<td>dense_rank() over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Count(id).Over().PartitionBy().ToValue()</td>
<td>count(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Sum(id).Over().PartitionBy().ToValue()</td>
<td>sum(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Avg(id).Over().PartitionBy().ToValue()</td>
<td>avg(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Max(id).Over().PartitionBy().ToValue()</td>
<td>max(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.Min(id).Over().PartitionBy().ToValue()</td>
<td>min(id) over(partition by xx)</td>
<td></td>
</tr>
<tr>
<td>SqlExt.RowNumber(id).Over().PartitionBy().ToValue()</td>
<td>row_number(id) over(partition by xx)</td>
<td></td>
</tr>
</tbody>
</table>
<h2> 3. First Record in Group</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Supports multi-table nested queries, fsql.Select&lt;User1, UserGroup1&gt;()</p>
</blockquote>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the database does not support window functions, you can use grouped nested queries to solve this:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>See more in the <a href="/en/guide/withtempquery.html" target="blank">《Nested Queries》</a> documentation</p>
</blockquote>
<h2> 4. Aggregate</h2>
<h3> Distinct</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>SELECT count(distinct title) as1
FROM "Topic" a</p>
</blockquote>
<blockquote>
<p>SELECT a."Id", a."Clicks", a."Title", a."CreateTime"
FROM "Topic" a</p>
</blockquote>
<h3> SqlExt.DistinctCount</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>SELECT count(distinct a."title") as1 FROM "Topic" a</p>
</blockquote>
<h3> ToAggregate + SqlExt.DistinctCount</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>SELECT count(distinct a."Title") as1, count(distinct a."Clicks") as2
FROM "Topic" a</p>
</blockquote>
<h2> 5. Navigation Property Grouping</h2>
<p>If the <code>Topic</code> class has a navigation property <code>Category</code>, and <code>Category</code> has a navigation property <code>Area</code>, the code for grouping by navigation properties is as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: The above code will throw an error because <code>a.Key.Category.Area.Name</code> cannot be resolved. To fix this, use Include:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you can solve it this way:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> API</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Type</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ToSql</td>
<td>string</td>
<td></td>
<td>Returns the SQL query that will be executed</td>
</tr>
<tr>
<td>ToList&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>Lambda</td>
<td>Executes the SQL query and returns a list of records for the specified fields; if no records exist, returns a list with Count 0</td>
</tr>
<tr>
<td>ToList&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>string field</td>
<td>Executes the SQL query and returns a list of records for the field specified by <code>field</code>, which can be received as a tuple or basic type (int, string, long); if no records exist, returns a list with Count 0</td>
</tr>
<tr>
<td>ToAggregate&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>Lambda</td>
<td>Executes the SQL query and returns aggregated results for the specified fields (suitable for cases where GroupBy is not needed)</td>
</tr>
<tr>
<td>Sum</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to calculate the sum</td>
</tr>
<tr>
<td>Min</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to calculate the minimum value</td>
</tr>
<tr>
<td>Max</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to calculate the maximum value</td>
</tr>
<tr>
<td>Avg</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to calculate the average value</td>
</tr>
<tr>
<td><strong>Group</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>GroupBy</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Groups by selected columns, e.g., GroupBy(a =&gt; a.Name)</td>
</tr>
<tr>
<td>GroupBy</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Groups by native SQL syntax, e.g., GroupBy("concat(name, @cc)", new { cc = 1 })</td>
</tr>
<tr>
<td>Having</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Filters aggregated conditions by native SQL syntax, e.g., Having("count(name) = @cc", new { cc = 1 })</td>
</tr>
<tr>
<td><strong>Members</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Key</td>
<td></td>
<td></td>
<td>Returns the object selected by GroupBy</td>
</tr>
<tr>
<td>Value</td>
<td></td>
<td></td>
<td>Returns the field selector for the main table or From&lt;T2,T3....&gt;</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Include Loading ✨</title>
    <id>https://freesql.net/en/guide/select-include.html</id>
    <link href="https://freesql.net/en/guide/select-include.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Include Loading ✨</h1>
<h2> 1. Child Table ToList</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Executes at most 3 SQL queries</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
<span class="token punctuation">{</span>
    all <span class="token operator">=</span> a<span class="token punctuation">,</span>
    list1 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    list2 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>SongId <span class="token operator">==</span> a<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// After grouping, executes at most 3 SQL queries</span>
fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> a<span class="token punctuation">.</span>Author <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithTempQuery</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Author <span class="token operator">=</span> a<span class="token punctuation">.</span>Key<span class="token punctuation">.</span>Author<span class="token punctuation">,</span> Count <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> 
    <span class="token punctuation">{</span>
        a<span class="token punctuation">.</span>Author<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Count<span class="token punctuation">,</span>
        list1 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        list2 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Author <span class="token operator">==</span> a<span class="token punctuation">.</span>Author<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Include Loading ✨</h1>
<h2> 1. Child Table ToList</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>The following content heavily relies on correct configuration of <a href="/en/guide/navigate-attribute.html" target="blank">【Navigation Properties】</a>; please learn it before continuing!</p>
<h2> 2. Navigation Properties ManyToOne/OneToOne</h2>
<p><code>Include</code> ultimately uses a Left Join approach (one query) to return multiple table records.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3. Collection Properties OneToMany/ManyToMany/PgArrayToMany</h2>
<p><code>IncludeMany</code> ultimately queries the child table after <code>ToList</code> (total of two queries) to return multiple table records.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 4. IncludeMany Enhanced</h2>
<p>For the second query, use <code>then</code> modifier:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For one-to-many relationships without configured navigation, greedy loading is also possible:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To query only the first few records of each child collection:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To return partial fields of the child collection:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 5. IncludeMany Extensions</h2>
<p>When the main data is already in memory, how to load child data? We have added the <code>List&lt;T&gt;</code> extension method, as shown below:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6. Comparison of Two Ways to Use IncludeMany</h2>
<p>Method 1 (IncludeMany extension method):</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>Method 2 (Directly IncludeMany + ToList):</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example: Query the Vod table, each of Category 1, Category 2, and Category 3 with 10 records each</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Lazy Loading</title>
    <id>https://freesql.net/en/guide/select-lazy-loading.html</id>
    <link href="https://freesql.net/en/guide/select-lazy-loading.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Lazy Loading</h1>
<p>FreeSql supports lazy loading, which loads data from the database only when needed. It supports one-to-one, many-to-one, one-to-many, and many-to-many navigation properties.</p>
<p><strong>Caution:</strong> Misuse of lazy loading can lead to multiple interactions with the database, which can degrade performance. Use it carefully.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Lazy Loading</h1>
<p>FreeSql supports lazy loading, which loads data from the database only when needed. It supports one-to-one, many-to-one, one-to-many, and many-to-many navigation properties.</p>
<p><strong>Caution:</strong> Misuse of lazy loading can lead to multiple interactions with the database, which can degrade performance. Use it carefully.</p>
<p>For example, you can display the detailed order information only when browsing a particular order. You need to add the <code>virtual</code> keyword to the navigation properties in the model.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Lazy loading is disabled by default. Enable it where you declare it before using it.</p>
<p>Lazy loading functionality relies on the FreeSql.Extensions.LazyLoading package. Please download it from NuGet.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Console output:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FreeSql lazy loading supports one-to-one, many-to-one, one-to-many, and many-to-many relationships. The first three relationships are similar in size. Below we specifically introduce many-to-many relationships.</p>
<h2> Many-to-Many Lazy Loading</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, there are three tables: Song, Tag, and their relationship table.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Console output:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Summary</h2>
<p><strong>Advantages:</strong> Data is loaded only when needed, avoiding the inefficiencies caused by complex outer joins, indexes, and views.</p>
<p><strong>Trap:</strong> Misuse can result in multiple database interactions, reducing performance. Use with caution, use with caution, use with caution.</p>
<p>If you need to use data within a loop, use eager loading. Otherwise, use lazy loading.</p>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Return Data ✨</title>
    <id>https://freesql.net/en/guide/select-return-data.html</id>
    <link href="https://freesql.net/en/guide/select-return-data.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Return Data ✨</h1>
<p>FreeSql uses ExpressionTree to read data records. Under .NET technology, besides native code, the fastest solutions are Emit and ExpressionTree.</p>
<p>ExpressionTree naturally supports .NET AOT compilation. The technological decision made by FreeSql in 2018 will benefit in the future.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Return Data ✨</h1>
<p>FreeSql uses ExpressionTree to read data records. Under .NET technology, besides native code, the fastest solutions are Emit and ExpressionTree.</p>
<p>ExpressionTree naturally supports .NET AOT compilation. The technological decision made by FreeSql in 2018 will benefit in the future.</p>
<h2> 1. Return a Single Record</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>FreeSql convention: ToOne/First always returns either null or an entity object with data. ToList always returns a non-null List&lt;entity type&gt;.</p>
</blockquote>
<h2> 2. Return List</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3. Return TreeList</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Data query processed into a tree structure. Note: Entities need to configure <a href="/en/guide/select-as-tree.html" target="blank">parent-child navigation properties</a>.</p>
</blockquote>
<h2> 4. Return List + Navigation Properties Data</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>More navigation properties data return: <a href="/en/guide/select-include.html" target="blank">Eager Loading</a></p>
<h2> 5. Specify Return</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>The constant mechanism was initially reserved for native SQL. If you really need to return the string: "'xxx'".</p>
</blockquote>
<h2> 6. Ignore Field Return</h2>
<p>Reference implementation: <a href="https://github.com/dotnetcore/FreeSql/issues/528" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/FreeSql/issues/528</a></p>
<h2> 7. DTO Mapping Return</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Handle differences carefully, handle differences carefully, handle differences carefully</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>GroupBy methods do not use DTO mapping rules.</p>
</blockquote>
<p>This mapping supports single-table/multi-table and maps before querying data (not querying all fields first and then mapping in memory).</p>
<p>Search rules: Search for property names by looping through internal objects _tables (which will grow after join queries), prioritizing the main table to search until the same field is found.</p>
<p>For example:</p>
<p>A, B, C all have id, Dto { id, a1, a2, b1, b2 }, A.id is mapped. You can also specify id = C.id mapping.</p>
<p>DTO queries only map default fields (ordinary properties). For mapping objects, use:</p>
<blockquote>
<p>Navigation object: ToList(a =&gt; new Dto { Catalog = a.Catalog })</p>
</blockquote>
<blockquote>
<p>Multi-table object: ToList((a, b) =&gt; new Dto { Catalog = b })</p>
</blockquote>
<h2> 8. ToChunk Paging Return</h2>
<p>Execute queries and return data in chunks to reduce memory overhead. For example, read 100,000 data entries, processing 100 at a time.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9. ToSql</h2>
<p>Each ToList can use ToSql to return SQL String with two options:</p>
<ul>
<li>FieldAliasOptions.AsIndex (default) automatically generates aliases as1, as2, as3 .... to prevent issues with fields having the same name in multi-table queries;</li>
<li>FieldAliasOptions.AsProperty uses property names as field aliases, suitable for generating SQL for further execution.</li>
</ul>
<h2> 10. Execute SQL</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Note: The entity features of Ado.Query are invalid, for example, [Column(Name = "xxx")] is not effective.</p>
</blockquote>
<h2> 11. API</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Value</th>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ToSql</td>
<td>string</td>
<td></td>
<td>Returns the SQL statement to be executed</td>
</tr>
<tr>
<td>ToList</td>
<td>List&lt;T1&gt;</td>
<td></td>
<td>Executes SQL query and returns records with all fields of T1 entity. If navigation properties exist, they are queried and returned together. If no records are found, returns a list with Count equal to 0</td>
</tr>
<tr>
<td>ToList&lt;Dto&gt;</td>
<td>List&lt;Dto&gt;</td>
<td>Lambda</td>
<td>Executes SQL query and returns records with specified fields or DTO mapping. If no records are found, returns a list with Count equal to 0</td>
</tr>
<tr>
<td>ToList&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>string field</td>
<td>Executes SQL query and returns records of the specified field, received as a tuple or basic type (int, string, long). If no records are found, returns a list with Count equal to 0</td>
</tr>
<tr>
<td>ToOne</td>
<td>T1</td>
<td></td>
<td>Executes SQL query and returns the first record with all fields of T1 entity. If no records are found, returns null</td>
</tr>
<tr>
<td>ToChunk</td>
<td>&lt;empty&gt;</td>
<td>int size, Action&lt;FetchCallbackArgs&lt;List&lt;T1&gt;&gt;&gt; done</td>
<td>Executes SQL query and returns data in chunks to reduce memory overhead. For example, reads 100,000 records, processing 100 at a time.</td>
</tr>
<tr>
<td>Any</td>
<td>bool</td>
<td></td>
<td>Executes SQL query to check if there are any records</td>
</tr>
<tr>
<td>Sum</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to calculate the sum</td>
</tr>
<tr>
<td>Min</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to find the minimum value</td>
</tr>
<tr>
<td>Max</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to find the maximum value</td>
</tr>
<tr>
<td>Avg</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies a column to calculate the average value</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Sharding</title>
    <id>https://freesql.net/en/guide/sharding.html</id>
    <link href="https://freesql.net/en/guide/sharding.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Sharding</h1>
<h2> Theoretical Knowledge</h2>
<p>Sharding - From a surface-level perspective, sharding involves splitting a single table into N smaller tables, each of which is a complete table on its own. After sharding, data is stored in these individual shard tables, with the main table acting as a shell. Data access happens within each shard table. Sharding improves the concurrent access capability of individual tables and also enhances disk I/O performance. The reason for increased concurrency is that the time required for a single query is reduced. In the case of high concurrency, the main table can distribute the load across different shard tables based on the query.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Sharding</h1>
<h2> Theoretical Knowledge</h2>
<p>Sharding - From a surface-level perspective, sharding involves splitting a single table into N smaller tables, each of which is a complete table on its own. After sharding, data is stored in these individual shard tables, with the main table acting as a shell. Data access happens within each shard table. Sharding improves the concurrent access capability of individual tables and also enhances disk I/O performance. The reason for increased concurrency is that the time required for a single query is reduced. In the case of high concurrency, the main table can distribute the load across different shard tables based on the query.</p>
<p>Database Sharding - This involves splitting the data originally stored in a single database across multiple databases, and splitting data originally stored in a single table across multiple tables. The amount of data in a database can become uncontrollable. Without sharding, as time and business grow, the number of tables in the database increases, and the amount of data in each table grows, leading to increased overhead for data operations (CRUD). Additionally, server resources (CPU, disk, memory, I/O, etc.) are limited, and eventually, the data volume and processing capacity of the database will hit a bottleneck.</p>
<h2> Manual Sharding</h2>
<p>FreeSql’s native usage and FreeSql.Repository repository methods provide the AsTable method for performing CRUD operations on sharded tables, for example:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For cross-database operations on the same database server, you can also use AsTable(oldname =&gt; $"db2.dbo.{oldname}")</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Summary of Sharding:</p>
<ul>
<li>For sharding and cross-database operations on the same server, AsTable can be used for CRUD operations;</li>
<li>AsTable with CodeFirst will automatically create non-existent shard tables;</li>
<li>Delayed loading cannot be used with sharded or sharded database entity types;</li>
</ul>
<p>For SQL Server cross-database transactions, you can use TransactionScope as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For distributed database TCC/SAGA solutions, please visit: <a href="https://github.com/2881099/FreeSql.Cloud" target="_blank" rel="noopener noreferrer">https://github.com/2881099/FreeSql.Cloud</a></p>
<h2> Automatic Sharding (beta)</h2>
<p>Automatic sharding differs from CURD.AsTable method. Currently, the first phase supports automatic sharding by [time] (sharding across databases is not supported).</p>
<p>We encourage active participation in testing and feedback. Please prioritize using source code for testing to facilitate problem identification. Thank you.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>From 2022-1-1 to the current time, create a new shard table every month, based on the createtime field</p>
</blockquote>
<blockquote>
<p>If the maximum date is greater than the current time, you can manually expand the shard table:</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>AsTable = "createtime=2022-1-1(1 year)"</td>
<td>Create a shard table every year</td>
</tr>
<tr>
<td>AsTable = "createtime=2022-1-1(2 year)"</td>
<td>Create a shard table every two years</td>
</tr>
<tr>
<td>AsTable = "createtime=2022-1-1(1 month)"</td>
<td>Create a shard table every month</td>
</tr>
<tr>
<td>AsTable = "createtime=2022-1-1(3 month)"</td>
<td>Create a shard table every three months</td>
</tr>
<tr>
<td>AsTable = "createtime=2022-1-1(1 day)"</td>
<td>Create a shard table every day</td>
</tr>
<tr>
<td>AsTable = "createtime=2022-1-1(7 day)"</td>
<td>Create a shard table every seven days</td>
</tr>
<tr>
<td>AsTable = "createtime=2022-1-1(12 hour)"</td>
<td>Create a shard table every 12 hours</td>
</tr>
</tbody>
</table>
<p>The first table is for 12 months, and the subsequent tables are for each month:</p>
<blockquote>
<p>AsTable = "createtime=2022-1-1(12,1 month)"</p>
</blockquote>
<p>The first table has a non-time-based name:</p>
<blockquote>
<p>fsql.CodeFirst.GetTableByEntity(typeof(AsTableLog)).AsTableImpl.SetTableName(0, "CustomTableName")</p>
</blockquote>
<p>Sharding every month on the 1st at 10 AM:</p>
<blockquote>
<p>[Table(Name = "as_table_log_{yyyyMMddHH}", AsTable = "createtime=2022-1-1 10(1 month)")]</p>
</blockquote>
<p>When no time condition is set, only the latest 3 shard tables are used:</p>
<blockquote>
<p>fsql.CodeFirst.GetTableByEntity(typeof(AsTableLog)).AsTableImpl.SetDefaultAllTables(value =&gt; value.Take(3).ToArray());</p>
</blockquote>
<p>For detailed information: <a href="https://github.com/dotnetcore/FreeSql/discussions/1066" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/FreeSql/discussions/1066</a></p>
<p>Indexes for sharded tables can be set as follows: [Index("{tablename}_idx_01", "phone")]</p>
<h2> [DB Sharding] Common</h2>
<ol>
<li>Sqlite Cross-database</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQLite cross-database operations are a unique feature of FreeSql. Use the <code>attachs</code> parameter in the connection string, separated by commas.</p>
<ol start="2">
<li>SqlServer Cross-database</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For different database instances, SQL Server linkserver technology can be used. Please refer to relevant documentation.</p>
<ol start="3">
<li>Others</li>
</ol>
<p>Almost all databases support the dbo.table access method:</p>
<ul>
<li>MySql -&gt; dbname.tabname</li>
<li>PostgreSQL/SqlServer -&gt; dbname.schema.tbname</li>
</ul>
<p>You can set this in the <code>[Table(Name = ...)]</code> attribute or use the <code>.AsTable</code> method for the current context.</p>
<h2> [DB Sharding] FreeSql.Cloud</h2>
<p>FreeSql.Cloud provides cross-database access and distributed transaction solutions (TCC, SAGA), supporting .NET Core 2.1+, .NET Framework 4.0+.</p>
<p>Open source address: <a href="https://github.com/2881099/FreeSql.Cloud" target="_blank" rel="noopener noreferrer">https://github.com/2881099/FreeSql.Cloud</a></p>
<blockquote>
<p>dotnet add package FreeSql.Cloud</p>
</blockquote>
<p>or</p>
<blockquote>
<p>Install-Package FreeSql.Cloud</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>FreeSqlCloud must be defined as a singleton</p>
</blockquote>
<blockquote>
<p><code>new FreeSqlCloud()</code> manages multiple connections</p>
</blockquote>
<blockquote>
<p><code>new FreeSqlCloud("myapp")</code> activates TCC/SAGA transactions</p>
</blockquote>
<p>The access methods for FreeSqlCloud are the same as for IFreeSql:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>Switching Databases (Thread-safe):</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>Automatic Database Routing Configuration:</li>
</ol>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>Static Repository Objects</li>
</ol>
<p>FreeSql.Repository/UnitOfWorkManager objects are created with a fixed IFreeSql instance, so they cannot follow FreeSqlCloud for database switching.</p>
<blockquote>
<p>Note: Once the same object instance is created, it cannot follow database switching. Creating a new object instance is not affected.</p>
</blockquote>
<p>In multi-tenant sharding scenarios, switch the database using <code>fsql.Change</code> before creating Repository/UnitOfWorkManager.</p>
<p><a href="/en/guide/unitofwork-manager.html#extension-multi-database" target="blank">《How to Use UnitOfWorkManager with FreeSql.Cloud for AOP Transactions?》</a></p>
<ol start="4">
<li>Dynamic Object Creation (Not Recommended)</li>
</ol>
<p>However, there is a special requirement where the Repository should be able to follow <code>fsql.Change</code> for database switching after creation.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This mechanism is too uncontrollable, so only simple extension methods are provided. It is not recommended for IoC injection.</p>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Transaction</title>
    <id>https://freesql.net/en/guide/transaction.html</id>
    <link href="https://freesql.net/en/guide/transaction.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Transaction</h1>

<h2> 1. Regular Transactions</h2>
<p><code>UnitOfWork</code> is a wrapper around the <code>DbTransaction</code> object, making it convenient to carry private data.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> uow <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">CreateUnitOfWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> uow<span class="token punctuation">.</span>Orm<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrowsAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// uow.Orm API is the same as IFreeSql</span>
    <span class="token keyword">await</span> uow<span class="token punctuation">.</span>Orm<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span><span class="token function">ExecuteNoneQueryAsync</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token comment">// Error, not within the same transaction</span>

    <span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> uow<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Repository CRUD</span>
    <span class="token keyword">await</span> repo<span class="token punctuation">.</span><span class="token function">InsertAsync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>

    uow<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Transaction</h1>

<h2> 1. Regular Transactions</h2>
<p><code>UnitOfWork</code> is a wrapper around the <code>DbTransaction</code> object, making it convenient to carry private data.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Within the <code>uow</code> scope, try not to use the <code>fsql</code> object to avoid not being in the same transaction.</p>
</blockquote>
<p>Use <code>UnitOfWorkManager</code> to manage <code>UnitOfWork</code>, as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2. Repository Transactions (Dependency Injection)</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For more details, refer to the document: - <a href="/en/guide/unitofwork-manager.html" target="blank">AOP Feature Tag Implementation for Cross-Method Transactions</a></p>
<h2> 3. Same-Thread Transactions</h2>
<p>Same-thread transactions are built into FreeSql.dll, managed by <code>fsql.Transaction</code> for committing and rolling back transactions (Note: does not support asynchronous operations).</p>
<p>A user purchases a product worth 100 yuan: deduct balance, deduct inventory.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Same-thread transactions are simple to use but have some limitations:</p>
<ul>
<li>
<p>The transaction object is bound to the thread, and only one transaction connection can be opened per thread; nested transactions use the same transaction.</p>
</li>
<li>
<p>Code within the transaction body cannot switch threads, so no asynchronous methods can be used, including asynchronous database methods provided by FreeSql (but any synchronous CRUD methods can be used).</p>
</li>
</ul>
<h2> 4. Pessimistic Lock</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>for update</code> syntax is common in Oracle/PostgreSQL/MySQL. We have provided special adaptation for SqlServer, and the executed SQL statement is roughly as follows:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Union</title>
    <id>https://freesql.net/en/guide/unionall.html</id>
    <link href="https://freesql.net/en/guide/unionall.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Union</h1>
<p>Previously, it was recommended to use <code>ToSql</code> + <code>WithSql</code> for performing union queries. Starting from v3.2.666, the <code>UnionAll</code> method is available for direct use.</p>
<p>Combining <code>GroupBy</code> + <code>WithTempQuery</code> (nested queries) + <code>FromQuery</code> + <code>UnionAll</code> makes querying more powerful and flexible.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Union</h1>
<p>Previously, it was recommended to use <code>ToSql</code> + <code>WithSql</code> for performing union queries. Starting from v3.2.666, the <code>UnionAll</code> method is available for direct use.</p>
<p>Combining <code>GroupBy</code> + <code>WithTempQuery</code> (nested queries) + <code>FromQuery</code> + <code>UnionAll</code> makes querying more powerful and flexible.</p>
<h2> Single Table UNION ALL</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Multiple Tables UNION ALL</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: The above SQL may result in an error because both <code>User</code> and <code>UserGroup</code> have the same <code>Id</code> field name. The temporary solution is to specify the fields.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> WithParameters Sharing</h2>
<p>After enabling parameterized query functionality, use <code>WithParameters</code> to share parameters, avoiding duplicate parameter names:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">UnitOfWork</title>
    <id>https://freesql.net/en/guide/unit-of-work.html</id>
    <link href="https://freesql.net/en/guide/unit-of-work.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> UnitOfWork</h1>
<p>UnitOfWork is a wrapper around the <code>DbTransaction</code> transaction object, facilitating the management of private data.</p>
<h2> How to Use</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> uow <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token function">CreateUnitOfWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> uow<span class="token punctuation">.</span>Orm<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrowsAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//uow.Orm API is the same as IFreeSql</span>
    <span class="token keyword">await</span> uow<span class="token punctuation">.</span>Orm<span class="token punctuation">.</span>Ado<span class="token punctuation">.</span><span class="token function">ExecuteNoneQueryAsync</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> fsql<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token comment">//Error, not within the same transaction</span>

    <span class="token class-name"><span class="token keyword">var</span></span> repo1 <span class="token operator">=</span> uow<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> repo1<span class="token punctuation">.</span><span class="token function">InsertAsync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>

    uow<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> UnitOfWork</h1>
<p>UnitOfWork is a wrapper around the <code>DbTransaction</code> transaction object, facilitating the management of private data.</p>
<h2> How to Use</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Within the <code>uow</code> scope, try not to use the <code>fsql</code> object to avoid being in different transactions.</p>
</blockquote>
<p>Dependency Injection (Reference): <a href="/en/guide/unitofwork-manager.html" target="blank">Implementing Various Transaction Propagation with TransactionalAttribute + UnitOfWorkManager in ASP.NET Core</a></p>
<h2> Interface Definition</h2>
<p>The <code>uow.GetOrBeginTransaction()</code> method can retrieve the transaction object.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Entity Change Events</h2>
<p>Global Settings:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Individual Settings:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>report</code> parameter is a List collection, with the element types defined as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>Change Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert</td>
<td>Entity object inserted</td>
</tr>
<tr>
<td>Update</td>
<td>Entity object updated</td>
</tr>
<tr>
<td>Delete</td>
<td>Entity object deleted</td>
</tr>
<tr>
<td>SqlRaw</td>
<td>SQL statement executed</td>
</tr>
</tbody>
</table>
<p><code>SqlRaw</code> currently has two special cases:</p>
<ul>
<li>When updating navigation properties in a many-to-many relationship, all delete operations on the junction table.</li>
<li>The generic repository class <code>BaseRepository</code> has a <code>Delete</code> method, with a parameter as an expression rather than an entity:</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Repository</code> operations for entity <code>Insert/Update/Delete</code>, or <code>UnitOfWork.Commit</code> operations will trigger this event at most once.</p>
]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">UnitOfWork Manager ✨</title>
    <id>https://freesql.net/en/guide/unitofwork-manager.html</id>
    <link href="https://freesql.net/en/guide/unitofwork-manager.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> UnitOfWork Manager ✨</h1>
<p>This article guides how to manage transactions using attributes (annotations) in an ASP.NET Core project.</p>
<blockquote>
<p>UnitOfWorkManager can only manage transactions for Repository objects.</p>
</blockquote>
<p>It supports six propagation modes, making cross-method transactions very convenient, supporting both synchronous and asynchronous operations:</p>]]></summary>
    <content type="html"><![CDATA[<h1> UnitOfWork Manager ✨</h1>
<p>This article guides how to manage transactions using attributes (annotations) in an ASP.NET Core project.</p>
<blockquote>
<p>UnitOfWorkManager can only manage transactions for Repository objects.</p>
</blockquote>
<p>It supports six propagation modes, making cross-method transactions very convenient, supporting both synchronous and asynchronous operations:</p>
<ul>
<li><strong>Required</strong>: Creates a new transaction if none exists; if a transaction exists, it joins that transaction. This is the default choice.</li>
<li><strong>Supports</strong>: Supports the current transaction; if no transaction exists, it executes as a non-transactional method.</li>
<li><strong>Mandatory</strong>: Uses the current transaction; throws an exception if no current transaction exists.</li>
<li><strong>NotSupported</strong>: Executes as a non-transactional operation; if a transaction exists, it suspends the current transaction.</li>
<li><strong>Never</strong>: Executes as a non-transactional operation; throws an exception if a transaction exists.</li>
<li><strong>Nested</strong>: Executes in a nested transaction mode.</li>
</ul>
<p>The final transaction code looks like this:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Step 1: Dependency Injection and Middleware</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Step 2: Introduce Dynamic Proxy Library</h2>
<blockquote>
<p>Rougamo: https://github.com/inversionhourglass/Rougamo</p>
</blockquote>
<blockquote>
<p>dotnet add package Rougamo.Fody</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>UnitOfWorkManager Members</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>IUnitOfWork Current</td>
<td>Returns the current unit of work</td>
</tr>
<tr>
<td>void Binding(repository)</td>
<td>Manages the transaction of the repository</td>
</tr>
<tr>
<td>IUnitOfWork Begin(propagation, isolationLevel)</td>
<td>Creates a unit of work</td>
</tr>
</tbody>
</table>
<h2> Extension: Custom Repository</h2>
<p>The above example uses generic repositories. If you need to override a repository, how to ensure it shares the same transaction with <code>UnitOfWorkManager</code>?</p>
<p>Inherit from the existing <code>DefaultRepository&lt;,&gt;</code> to implement a custom repository <code>SongRepository.cs</code>:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Interface: <code>ISongRepository.cs</code></p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Register this service in <code>startup.cs</code></p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>
<h2> Extension: Multi-Database</h2>
<p>FreeSql.Cloud provides <a href="/en/guide/sharding.html#db-sharding-freesql-cloud" target="blank">cross-database access</a>. This section explains how to integrate FreeSql.Cloud with UowManager for multi-database scenarios.</p>
<blockquote>
<p>Note: <a href="/en/guide/multi-tenancy.html#approach-3-tenant-specific-databases" target="blank">Multi-tenant Database</a> should be skipped as multi-tenant requests usually only operate on one database. Just switch tenants in the middleware.</p>
</blockquote>
<hr>
<p>Define FreeSqlCloud object using <code>DbEnum</code> as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The final transaction code looks like this:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assume that <code>IBaseRepository&lt;T&gt;</code> defaults to <code>db1</code> for repository implementation, dependency injection is as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UnitOfWorkManagerCloud</code>, <code>RepositoryCloud</code>, and <code>TransactionalAttribute</code> are the components we need to implement:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">Nested ✨</title>
    <id>https://freesql.net/en/guide/withtempquery.html</id>
    <link href="https://freesql.net/en/guide/withtempquery.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Nested ✨</h1>
<h2> WithTempQuery</h2>
<p>Required version: v3.2.666+</p>
<p>Combining GroupBy + WithTempQuery (nested queries) + FromQuery + UnionAll can make queries more powerful and flexible.</p>
<p>Note: When using multiple anonymous types with WithTempQuery in FromQuery, ensure they are not of the same type (use any property to distinguish) <a href="https://github.com/dotnetcore/FreeSql/issues/1620" target="_blank" rel="noopener noreferrer">#1620</a></p>]]></summary>
    <content type="html"><![CDATA[<h1> Nested ✨</h1>
<h2> WithTempQuery</h2>
<p>Required version: v3.2.666+</p>
<p>Combining GroupBy + WithTempQuery (nested queries) + FromQuery + UnionAll can make queries more powerful and flexible.</p>
<p>Note: When using multiple anonymous types with WithTempQuery in FromQuery, ensure they are not of the same type (use any property to distinguish) <a href="https://github.com/dotnetcore/FreeSql/issues/1620" target="_blank" rel="noopener noreferrer">#1620</a></p>
<h2> Example 1: Query the First Record of Each Group</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Supports multi-table nested queries, e.g., <code>fsql.Select&lt;User1, UserGroup1&gt;()</code></p>
</blockquote>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the database does not support window functions, you can use grouped nested queries:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Example 2: Nested Query + Join</h2>
<p>WithTempQuery + From&lt;T2&gt; or FromQuery(ISelect&lt;T2&gt;) can achieve unlimited joins.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Example 3: Group Query Nested</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Example 4: In-Memory Data Nesting</h2>
<p>Assuming cross-database servers or cached tables, <code>WithMemory</code> allows for querying between data tables and memory.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Example 5: Automated Sharding with Pagination and Group Aggregation</h2>
<p>After automated sharding, if pagination or grouping aggregation is needed, refer to the following code:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Example 6: FromQuery with Multiple Queries and Final Mapping</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> WithParameters Sharing</h2>
<p>After enabling parameterized queries, using <code>WithParameters</code> to share parameters can avoid creating identical parameter names:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> Subquery Exists</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Note: Since the entity class of the subquery is the same as the outer one, use <code>As("b")</code> to specify an alias for distinction.</p>
</blockquote>
<h2> Subquery In</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Subquery Join</h2>
<p>v1.8.0+ <code>string.Join</code> + <code>ToList</code> to concatenate multiple rows of the subquery result into a single string, e.g., "1,2,3,4"</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Subquery First/Count/Sum/Max/Min/Avg</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Subquery ToList</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ToSql + WithSql</h2>
<p>This is an early method for nested queries.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2024-07-26T09:14:45.000Z</published>
  </entry>
  <entry>
    <title type="text">CodeFirst</title>
    <id>https://freesql.net/en/guide/code-first.html</id>
    <link href="https://freesql.net/en/guide/code-first.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> CodeFirst</h1>
<p><code>FreeSql</code> supports migrating structures to the database using <code>CodeFirst</code>, which is a standard feature for (<code>O/RM</code>).</p>
<p>Unlike other (<code>O/RM</code>) frameworks, <code>FreeSql</code> supports more database features beyond basic data types. This is both an advantage and a disadvantage: the advantage is the full utilization of database features to aid development, while the disadvantage is that switching databases becomes more challenging. Different programmers might have varying philosophies; <code>FreeSql</code> tries to push feature support to its limits, but whether to use it is another matter for the project team to assess.</p>]]></summary>
    <content type="html"><![CDATA[<h1> CodeFirst</h1>
<p><code>FreeSql</code> supports migrating structures to the database using <code>CodeFirst</code>, which is a standard feature for (<code>O/RM</code>).</p>
<p>Unlike other (<code>O/RM</code>) frameworks, <code>FreeSql</code> supports more database features beyond basic data types. This is both an advantage and a disadvantage: the advantage is the full utilization of database features to aid development, while the disadvantage is that switching databases becomes more challenging. Different programmers might have varying philosophies; <code>FreeSql</code> tries to push feature support to its limits, but whether to use it is another matter for the project team to assess.</p>
<p>Although adapting to multiple databases is complex, <code>FreeSql</code> adheres to the principle of optimizing development habits, implementing solutions to challenges that are not technically feasible, such as custom database types which conflict with entity classes. To reduce usage costs, such database features are not supported.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Migrating Structures</h2>
<table>
<thead>
<tr>
<th>Create Database</th>
<th>Sqlite</th>
<th>Sql Server</th>
<th>MySql</th>
<th>PostgreSQL</th>
<th>Oracle</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>√</td>
<td>X <a href="https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L153" target="_blank" rel="noopener noreferrer">Reference</a></td>
<td>X <a href="https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L129" target="_blank" rel="noopener noreferrer">Reference</a></td>
<td>X<a href="https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs#L233" target="_blank" rel="noopener noreferrer">Reference</a></td>
<td>X</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Entity &amp; Table Comparison</th>
<th>Add</th>
<th>Rename</th>
<th>Delete</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>√</td>
<td>√</td>
<td>X</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Entity Property &amp; Field Comparison</th>
<th>Add</th>
<th>Modify Nullable</th>
<th>Modify Auto-Increment</th>
<th>Modify Type</th>
<th>Rename</th>
<th>Delete</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>X</td>
<td>√</td>
</tr>
</tbody>
</table>
<blockquote>
<p>To ensure safety, field deletion is not provided.</p>
</blockquote>
<p>Warning: Incomplete mapping between entity class properties and database table fields may lead to data loss.</p>
<blockquote>
<p>Reason: Some migration comparison operations involve creating temporary tables, importing old table data, and deleting old tables.</p>
</blockquote>
<h3> FreeSql Provides Two CodeFirst Migration Methods: Automatic and Manual.</h3>
<p><strong>Note</strong>: Exercise caution when using this feature in production environments.</p>
<p><strong>Note</strong>: Exercise caution when using this feature in production environments.</p>
<p><strong>Note</strong>: Exercise caution when using this feature in production environments.</p>
<h3> Automatically Sync Entity Structure [Essential for Development Environment]</h3>
<p>Automatically synchronize entity structures to the database. The program checks if the entity tables exist during runtime and then performs migration to create or modify them.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>This feature is enabled by default. Please modify this setting after deploying to the production environment.</p>
</blockquote>
<blockquote>
<p>Although the [automatic synchronization of entity structures] feature is very useful during development, it can clutter the database with unnecessary fields. Try to control changes in entity or property names to minimize this issue.</p>
</blockquote>
<ul>
<li>Note: Table structures are automatically generated only when CURD operations are performed on the table. For migrating table structures during system runtime, use the <strong>SyncStructure</strong> method.</li>
<li><code>FreeSql</code> does not create the database for you; you need to create the database manually. <strong>If you are using <code>MySql</code>, <code>Sql Server</code>, or <code>PostgreSQL</code>, and need to automatically create databases, refer to this code and copy it yourself: <a href="https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Infrastructure/FreeSql/FreeSqlExtension.cs" target="_blank" rel="noopener noreferrer">FreeSqlExtension.cs</a></strong></li>
</ul>
<h3> Disabling Migration</h3>
<p>When the [entity class] corresponds to a database [view] or other objects, you can disable the specified entity migration operation by using [Table(DisableSyncStructure = true)].</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Notes</h2>
<p>FreeSql CodeFirst supports migrating C# code comments to database comments. Prerequisites:</p>
<ol>
<li>The assembly containing the entity class must have XML documentation enabled;</li>
<li>The XML file must be in the same directory as the assembly and named: xxx.dll -&gt; xxx.xml;</li>
</ol>
<blockquote>
<p>Version 1.5.0+ added support for the Description attribute, with a lower priority than C# code comments.</p>
</blockquote>
<h3> Manual Synchronization of Entity Structure</h3>
<p>Provides an interface method to compare entities with changes in the database, returning SQL statements.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Provides an interface method to synchronize structure</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> Bulk Table Structure Generation</h4>
<ul>
<li><code>void SyncStructure(params Type[])</code> overloaded method supports arrays, synchronizing a collection of entity types to the database.</li>
<li>IEntity class can be any class in the assembly where the entity class is located.</li>
</ul>
<p>Method 1: Scan the assembly where the IEntity class is located and reflect to find all classes with the TableAttribute feature tag. This method requires the entity class to have a [Table(Name = "xxx")] attribute.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Call</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Method 2: Obtain all entity classes to be created through namespaces. Adjust the namespace values in <code>entitiesFullName</code> as needed. For example, we create an Entities folder to store entity classes. This method filters all entity classes in the assembly where IEntity is located. Their namespaces all start with LinCms.Entities and are checked using StartsWith.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or call to synchronize all table structures</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> Entity Attributes</h2>
<p>Specify the table name for the entity. When specified, changes in the entity class name do not affect the corresponding database table. FreeSql tries to support multiple databases or schema naming, but specifying the table name as: other database.table name varies between databases; this will be explained in detail later.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Without specifying the entity table name, it defaults to the entity class name. For old table names in the database, when modifying the entity name, set this parameter to the previous value so CodeFirst can correctly modify the database table; otherwise, it will be treated as [creating a new table].</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To modify field types, change the Title type to varchar(128).</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To specify the field name for a property, modifying the property name does not affect the corresponding database column.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If no field name is specified for a property, the field name defaults to the property name. When specifying the old column name in the database, if the entity property name is modified, set this parameter to the previous value so that CodeFirst can correctly modify the database field; otherwise, it will be treated as [adding a new field].</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Delete</title>
    <id>https://freesql.net/en/guide/delete.html</id>
    <link href="https://freesql.net/en/guide/delete.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Delete</h1>
<p>Deleting records is a very dangerous operation. FreeSql by default only supports single-table deletions with conditions.</p>
<p>If the <code>Where</code> condition is empty, no actual SQL delete operation will be executed.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For creation details, please refer to the Getting Started documentation</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Delete</h1>
<p>Deleting records is a very dangerous operation. FreeSql by default only supports single-table deletions with conditions.</p>
<p>If the <code>Where</code> condition is empty, no actual SQL delete operation will be executed.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1. Dynamic Conditions</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>dywhere</code> can be:</p>
<ul>
<li>Primary key value</li>
<li><code>new[] { primaryKeyValue1, primaryKeyValue2 }</code></li>
<li>Topic object</li>
<li><code>new[] { TopicObject1, TopicObject2 }</code></li>
<li><code>new { id = 1 }</code></li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2. Dynamic Table Names</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3. Deletion Conditions</h2>
<blockquote>
<p>For safety reasons, deletion with no conditions does not execute the delete action to avoid accidentally deleting all data. To delete all data from a table: <code>fsql.Delete&lt;T&gt;().Where(a =&gt; true).ExecuteAffrows()</code></p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4. Dictionary Deletion</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5. ISelect.ToDelete</h2>
<p><code>IDelete</code> does not support navigation objects or multi-table joins by default. <code>ISelect.ToDelete</code> can convert a query to <code>IDelete</code> to support deletions involving navigation objects, as shown below:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Note: This method does not query data into memory for deletion. The above code generates SQL like:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Benefits of using this method:</p>
<ul>
<li>Preview and test data before deletion to prevent errors.</li>
<li>Supports complex deletion operations, such as deleting the top 10 records meeting the criteria using <code>ISelect</code> with <code>Limit(10)</code>.</li>
</ul>
<h2> 6. Cascading Deletion</h2>
<ol>
<li><strong>Object-Based Cascading Deletion</strong></li>
</ol>
<blockquote>
<p>Use <code>Include/IncludeMany</code> for eager loading of <code>OneToOne/OneToMany/ManyToMany</code> navigation properties to enable cascading deletions.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>Database-Based Cascading Deletion</strong></li>
</ol>
<blockquote>
<p>Based on navigation properties, recursively delete data corresponding to <code>OneToOne/OneToMany/ManyToMany</code> relationships without relying on database foreign keys.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> API</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Value</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Where</code></td>
<td><code>&lt;this&gt;</code></td>
<td>Lambda</td>
<td>Expression condition, only supports entity basic members (excluding navigation objects)</td>
</tr>
<tr>
<td><code>Where</code></td>
<td><code>&lt;this&gt;</code></td>
<td>string, parms</td>
<td>Native SQL syntax condition, such as <code>Where("id = @id", new { id = 1 })</code></td>
</tr>
<tr>
<td><code>Where</code></td>
<td><code>&lt;this&gt;</code></td>
<td>T1 | IEnumerable&lt;T1&gt;</td>
<td>Pass an entity or collection, using its primary key as the condition</td>
</tr>
<tr>
<td><code>CommandTimeout</code></td>
<td><code>&lt;this&gt;</code></td>
<td>int</td>
<td>Command timeout setting (in seconds)</td>
</tr>
<tr>
<td><code>WithTransaction</code></td>
<td><code>&lt;this&gt;</code></td>
<td><code>DbTransaction</code></td>
<td>Set the transaction object</td>
</tr>
<tr>
<td><code>WithConnection</code></td>
<td><code>&lt;this&gt;</code></td>
<td><code>DbConnection</code></td>
<td>Set the connection object</td>
</tr>
<tr>
<td><code>ToSql</code></td>
<td>string</td>
<td></td>
<td>Return the SQL statement that is about to be executed</td>
</tr>
<tr>
<td><code>ExecuteAffrows</code></td>
<td>long</td>
<td></td>
<td>Execute the SQL statement and return the number of affected rows</td>
</tr>
<tr>
<td><code>ExecuteDeleted</code></td>
<td><code>List&lt;T1&gt;</code></td>
<td></td>
<td>Execute the SQL statement and return the deleted records</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Insert or Update</title>
    <id>https://freesql.net/en/guide/insert-or-update.html</id>
    <link href="https://freesql.net/en/guide/insert-or-update.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Insert or Update</h1>
<h2> 1. IFreeSql.InsertOrUpdate</h2>
<p>IFreeSql defines the <code>InsertOrUpdate</code> method to handle insert or update operations, utilizing database-specific features:</p>
<table>
<thead>
<tr>
<th>Database</th>
<th>Features</th>
<th></th>
<th>Database</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySql</td>
<td>on duplicate key update</td>
<td></td>
<td>DM</td>
<td>merge into</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>on conflict do update</td>
<td></td>
<td>Kingbase</td>
<td>on conflict do update</td>
</tr>
<tr>
<td>SqlServer</td>
<td>merge into</td>
<td></td>
<td>ShengTong</td>
<td>merge into</td>
</tr>
<tr>
<td>Oracle</td>
<td>merge into</td>
<td></td>
<td>Nanda General</td>
<td>merge into</td>
</tr>
<tr>
<td>Sqlite</td>
<td>replace into</td>
<td></td>
<td>MsAccess</td>
<td>Not supported</td>
</tr>
<tr>
<td>Firebird</td>
<td>merge into</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<h1> Insert or Update</h1>
<h2> 1. IFreeSql.InsertOrUpdate</h2>
<p>IFreeSql defines the <code>InsertOrUpdate</code> method to handle insert or update operations, utilizing database-specific features:</p>
<table>
<thead>
<tr>
<th>Database</th>
<th>Features</th>
<th></th>
<th>Database</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySql</td>
<td>on duplicate key update</td>
<td></td>
<td>DM</td>
<td>merge into</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>on conflict do update</td>
<td></td>
<td>Kingbase</td>
<td>on conflict do update</td>
</tr>
<tr>
<td>SqlServer</td>
<td>merge into</td>
<td></td>
<td>ShengTong</td>
<td>merge into</td>
</tr>
<tr>
<td>Oracle</td>
<td>merge into</td>
<td></td>
<td>Nanda General</td>
<td>merge into</td>
</tr>
<tr>
<td>Sqlite</td>
<td>replace into</td>
<td></td>
<td>MsAccess</td>
<td>Not supported</td>
</tr>
<tr>
<td>Firebird</td>
<td>merge into</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the entity class has auto-increment properties, bulk <code>InsertOrUpdate</code> may be split into two executions, with the system internally computing records with unset and set auto-increment values, executing <code>insert into</code> and <code>merge into</code> commands (using transactions).</p>
<p>Note: The FreeSql.Repository generic repository also has an <code>InsertOrUpdate</code> method, but its mechanism is different.</p>
<hr>
<h2> 2. Dictionary Insert or Update</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> 3. High-Performance BulkCopy</h2>
<table>
<thead>
<tr>
<th>Package</th>
<th>Extension Method</th>
<th>Description (v3.2.693)</th>
</tr>
</thead>
<tbody>
<tr>
<td>FreeSql.Provider.SqlServer</td>
<td>ExecuteSqlBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.MySqlConnector</td>
<td>ExecuteMySqlBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.Oracle</td>
<td>ExecuteOracleBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.Dameng</td>
<td>ExecuteDmBulkCopy</td>
<td>DM</td>
</tr>
<tr>
<td>FreeSql.Provider.PostgreSQL</td>
<td>ExecutePgCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.KingbaseES</td>
<td>ExecuteKdbCopy</td>
<td>Kingbase</td>
</tr>
</tbody>
</table>
<p>Principle: Use BulkCopy to insert data into a temporary table, then use MERGE INTO for join operations.</p>
<p>Note: Significant benefits when the number of updated fields exceeds 3000.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> 4. Table BeginEdit</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>EndEdit</code> method above generates 3 SQL statements as follows:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scenario: After loading table data in WinForms, perform a series of add, modify, and delete operations, then click [Save].</p>
<p>Reminder: This operation only affects the variable list and is not intended for full table comparison updates.</p>
<h2> 5. MySql <code>On Duplicate Key Update</code></h2>
<p>FreeSql.Provider.MySql and FreeSql.Provider.MySqlConnector support MySql's unique <code>On Duplicate Key Update</code> functionality to perform insert or update operations (batch supported).</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Methods that can be called after <code>OnDuplicateKeyUpdate()</code>:</p>
<table>
<thead>
<tr>
<th>Method Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>IgnoreColumns</td>
<td>Ignore columns to update, similar to <code>IUpdate.IgnoreColumns</code></td>
</tr>
<tr>
<td>UpdateColumns</td>
<td>Specify columns to update, similar to <code>IUpdate.UpdateColumns</code></td>
</tr>
<tr>
<td>Set</td>
<td>Manually specify columns to update, similar to <code>IUpdate.Set</code></td>
</tr>
<tr>
<td>SetRaw</td>
<td>Supplement to the <code>Set</code> method, can pass SQL strings</td>
</tr>
<tr>
<td>ToSql</td>
<td>Returns the SQL statement to be executed</td>
</tr>
<tr>
<td>ExecuteAffrows</td>
<td>Executes and returns the number of affected rows</td>
</tr>
</tbody>
</table>
<p>Both <code>IInsert</code> and <code>OnDuplicateKeyUpdate</code> have <code>IgnoreColumns</code> and <code>UpdateColumns</code> methods.</p>
<p>When inserting an entity/collection, if the <code>time</code> column is ignored, the code is as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We observe that the UPDATE time part becomes a constant, rather than <code>VALUES(\</code>time`)`, as follows:</p>
<p>When columns exist in the insert part, they are set as <code>VALUES(\</code>field`)` in the update part;</p>
<p>When columns do not exist in the insert part, they are set as constants in the update part. When operating on entity arrays, this constant is executed with <code>case when ... end</code> (same as <code>IUpdate</code>).</p>
<hr>
<h2> 6. PostgreSQL <code>On Conflict Do Update</code></h2>
<p>FreeSql.Provider.PostgreSQL supports PostgreSQL 9.5+ specific <code>On Conflict(id) Do Update</code> functionality, similar to MySql's <code>OnDuplicateKeyUpdate</code>.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Insert</title>
    <id>https://freesql.net/en/guide/insert.html</id>
    <link href="https://freesql.net/en/guide/insert.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Insert</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For creation details, please refer to the getting started document</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Topic</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"newtitle</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">a</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> Clicks <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Insert</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1. Single Insert</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2. Return Auto-Incremented Value</h2>
<p>If the table has an auto-increment column, the ID should be returned after inserting data.</p>
<p>Method 1: (Raw)</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Method 2: (Using FreeSql.Repository)</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>The repository will fill the auto-incremented value into items[0].Id (supports batch insert backfill)</p>
</blockquote>
<blockquote>
<p>DbFirst mode sequence: [Column(IsIdentity = true, InsertValueSql = "seqname.nextval")]</p>
</blockquote>
<h2> 3. Batch Insert</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is recommended to turn off parameterization when batch inserting by using <code>.NoneParameter()</code> to improve execution efficiency.</p>
<p>When inserting a large amount of data, the internal operations are split into batches according to the following rules:</p>
<table>
<thead>
<tr>
<th></th>
<th>Quantity</th>
<th>Parameter Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySql</td>
<td>5000</td>
<td>3000</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>5000</td>
<td>3000</td>
</tr>
<tr>
<td>SqlServer</td>
<td>1000</td>
<td>2100</td>
</tr>
<tr>
<td>Oracle</td>
<td>500</td>
<td>999</td>
</tr>
<tr>
<td>Sqlite</td>
<td>5000</td>
<td>999</td>
</tr>
</tbody>
</table>
<p>You can also set appropriate values through <code>BatchOptions</code>. When no external transaction is provided, an internal transaction is opened to ensure insert integrity.</p>
<h2> 4. High-Performance BulkCopy</h2>
<table>
<thead>
<tr>
<th>Package</th>
<th>Extension Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>FreeSql.Provider.SqlServer</td>
<td>ExecuteSqlBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.MySqlConnector</td>
<td>ExecuteMySqlBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.Oracle</td>
<td>ExecuteOracleBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.PostgreSQL</td>
<td>ExecutePgCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.Dameng</td>
<td>ExecuteDmBulkCopy</td>
<td>Dameng</td>
</tr>
<tr>
<td>FreeSql.Provider.KingbaseES</td>
<td>ExecuteKdbCopy</td>
<td>KingbaseES</td>
</tr>
</tbody>
</table>
<p>Batch Insert Performance Test Reference (52 Fields)</p>
<table>
<thead>
<tr>
<th></th>
<th>180K</th>
<th>10K</th>
<th>5K</th>
<th>2K</th>
<th>1K</th>
<th>500</th>
<th>100</th>
<th>50</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySql 5.5 ExecuteAffrows</td>
<td>38,481</td>
<td>2,234</td>
<td>1,136</td>
<td>284</td>
<td>239</td>
<td>167</td>
<td>66</td>
<td>30</td>
</tr>
<tr>
<td>MySql 5.5 ExecuteMySqlBulkCopy</td>
<td>28,405</td>
<td>1,142</td>
<td>657</td>
<td>451</td>
<td>435</td>
<td>592</td>
<td>47</td>
<td>22</td>
</tr>
<tr>
<td>SqlServer Express ExecuteAffrows</td>
<td>402,355</td>
<td>24,847</td>
<td>11,465</td>
<td>4,971</td>
<td>2,437</td>
<td>915</td>
<td>138</td>
<td>88</td>
</tr>
<tr>
<td>SqlServer Express ExecuteSqlBulkCopy</td>
<td>21,065</td>
<td>578</td>
<td>326</td>
<td>139</td>
<td>105</td>
<td>79</td>
<td>60</td>
<td>48</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecuteAffrows</td>
<td>46,756</td>
<td>3,294</td>
<td>2,269</td>
<td>1,019</td>
<td>374</td>
<td>209</td>
<td>51</td>
<td>37</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecutePgCopy</td>
<td>10,090</td>
<td>583</td>
<td>337</td>
<td>136</td>
<td>88</td>
<td>61</td>
<td>30</td>
<td>25</td>
</tr>
</tbody>
</table>
<blockquote>
<p>180K Explanation: Inserting 180,000 rows, the numbers in the table represent execution time (ms).</p>
</blockquote>
<p>Batch Insert Performance Test Reference (10 Fields)</p>
<table>
<thead>
<tr>
<th></th>
<th>180K</th>
<th>10K</th>
<th>5K</th>
<th>2K</th>
<th>1K</th>
<th>500</th>
<th>100</th>
<th>50</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySql 5.5 ExecuteAffrows</td>
<td>11,171</td>
<td>866</td>
<td>366</td>
<td>80</td>
<td>83</td>
<td>50</td>
<td>24</td>
<td>34</td>
</tr>
<tr>
<td>MySql 5.5 ExecuteMySqlBulkCopy</td>
<td>6,504</td>
<td>399</td>
<td>257</td>
<td>116</td>
<td>87</td>
<td>100</td>
<td>16</td>
<td>16</td>
</tr>
<tr>
<td>SqlServer Express ExecuteAffrows</td>
<td>47,204</td>
<td>2,275</td>
<td>1,108</td>
<td>488</td>
<td>279</td>
<td>123</td>
<td>35</td>
<td>16</td>
</tr>
<tr>
<td>SqlServer Express ExecuteSqlBulkCopy</td>
<td>4,248</td>
<td>127</td>
<td>71</td>
<td>30</td>
<td>48</td>
<td>14</td>
<td>11</td>
<td>10</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecuteAffrows</td>
<td>9,786</td>
<td>568</td>
<td>336</td>
<td>157</td>
<td>102</td>
<td>34</td>
<td>9</td>
<td>6</td>
</tr>
<tr>
<td>PostgreSQL 10 ExecutePgCopy</td>
<td>4,081</td>
<td>167</td>
<td>93</td>
<td>39</td>
<td>21</td>
<td>12</td>
<td>4</td>
<td>2</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Test results are performed under the same operating system and all have been warmed up.</p>
</blockquote>
<h2> 5. Dynamic Table Names</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 6. Insert Specified Columns</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7. Ignore Columns</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8. Dictionary Insertion</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9. Import Table</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: Since <code>Clicks</code> and <code>CreateTime</code> are not selected, values set using the target entity property <code>[Column(InsertValueSql = xx)]</code>, or default values of the target entity properties in C# will be used.</p>
<h2> 10. MySql <code>Insert Ignore Into</code></h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 11. MySql <code>On Duplicate Key Update</code></h2>
<p>FreeSql.Provider.MySql and FreeSql.Provider.MySqlConnector support the MySQL-specific feature <code>On Duplicate Key Update</code>, which implements inserting or updating data (supports batch operations).</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Methods that can be called after <code>OnDuplicateKeyUpdate()</code>:</p>
<table>
<thead>
<tr>
<th>Method Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>IgnoreColumns</td>
<td>Ignore the columns to be updated, similar to <code>IUpdate.IgnoreColumns</code></td>
</tr>
<tr>
<td>UpdateColumns</td>
<td>Specify the columns to be updated, similar to <code>IUpdate.UpdateColumns</code></td>
</tr>
<tr>
<td>Set</td>
<td>Manually specify the columns to be updated, similar to <code>IUpdate.Set</code></td>
</tr>
<tr>
<td>SetRaw</td>
<td>Supplement to <code>Set</code> method, can pass SQL strings</td>
</tr>
<tr>
<td>ToSql</td>
<td>Return the SQL statement to be executed</td>
</tr>
<tr>
<td>ExecuteAffrows</td>
<td>Execute and return the number of affected rows</td>
</tr>
</tbody>
</table>
<p>Both <code>IInsert</code> and <code>OnDuplicateKeyUpdate</code> have <code>IgnoreColumns</code> and <code>UpdateColumns</code> methods.</p>
<p>When inserting entities or entity collections, and the <code>time</code> column is ignored, the code is as follows:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We find that the <code>UPDATE time</code> part becomes a constant, rather than <code>VALUES(\</code>time`)`. The mechanism is as follows:</p>
<p>When columns exist in the <code>insert</code> part, they will be set in the <code>update</code> part as <code>VALUES(\</code>field`)`;</p>
<p>When columns do not exist in the <code>insert</code> part, they will be set as constants in the <code>update</code> part. When operating on entity arrays, this constant will be executed as <code>case when ... end</code> (similar to <code>IUpdate</code>).</p>
<h2> 12. PostgreSQL <code>On Conflict Do Update</code></h2>
<p>FreeSql.Provider.PostgreSQL supports PostgreSQL 9.5+ specific feature <code>On Conflict(id) Do Update</code>, which is used similarly to MySQL's <code>OnDuplicateKeyUpdate</code>.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> API</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Value</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>AppendData</td>
<td>&lt;this&gt;</td>
<td>T1 | IEnumerable&lt;T1&gt;</td>
<td>Append entities to be inserted</td>
</tr>
<tr>
<td>InsertIdentity</td>
<td>&lt;this&gt;</td>
<td>None</td>
<td>Specify auto-increment column</td>
</tr>
<tr>
<td>InsertColumns</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Columns to be inserted</td>
</tr>
<tr>
<td>IgnoreColumns</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Columns to be ignored</td>
</tr>
<tr>
<td>IgnoreInsertValueSql</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Columns with <code>InsertValueSql</code> to be ignored</td>
</tr>
<tr>
<td>CommandTimeout</td>
<td>&lt;this&gt;</td>
<td>int</td>
<td>Command timeout setting (seconds)</td>
</tr>
<tr>
<td>WithTransaction</td>
<td>&lt;this&gt;</td>
<td>DbTransaction</td>
<td>Set transaction object</td>
</tr>
<tr>
<td>WithConnection</td>
<td>&lt;this&gt;</td>
<td>DbConnection</td>
<td>Set connection object</td>
</tr>
<tr>
<td>ToSql</td>
<td>string</td>
<td></td>
<td>Return the SQL statement to be executed</td>
</tr>
<tr>
<td>OnDuplicateKeyUpdate</td>
<td>OnDuplicateKeyUpdate&lt;T1&gt;</td>
<td>None</td>
<td>MySQL-specific feature <code>On Duplicate Key Update</code></td>
</tr>
<tr>
<td>OnConflictDoUpdate</td>
<td>OnConflictDoUpdate&lt;T1&gt;</td>
<td>None</td>
<td>PostgreSQL-specific feature <code>On Conflict Do Update</code></td>
</tr>
<tr>
<td>ExecuteAffrows</td>
<td>long</td>
<td></td>
<td>Execute SQL statement and return the number of affected rows</td>
</tr>
<tr>
<td>ExecuteIdentity</td>
<td>long</td>
<td></td>
<td>Execute SQL statement and return auto-increment value</td>
</tr>
<tr>
<td>ExecuteInserted</td>
<td>List&lt;T1&gt;</td>
<td></td>
<td>Execute SQL statement and return the inserted records</td>
</tr>
<tr>
<td>ExecuteSqlBulkCopy</td>
<td>void</td>
<td></td>
<td>SQL Server-specific feature, execute <code>SqlBulkCopy</code> batch insert</td>
</tr>
<tr>
<td>ExecutePgCopy</td>
<td>void</td>
<td></td>
<td>PostgreSQL-specific feature, execute <code>Copy</code> batch import data</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Paging</title>
    <id>https://freesql.net/en/guide/paging.html</id>
    <link href="https://freesql.net/en/guide/paging.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Paging</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For how to create, please refer to the introductory documentation</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CategoryId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Paging</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 20 items per page</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Count(out var total) is a synchronous method because <code>out</code> does not support asynchronous operations. If this is a concern, you can perform the following separately:</p>
</blockquote>
<p>Tip: For large datasets, it's generally not recommended to use <code>Count</code>/<code>CountAsync</code>; instead, use stream paging (previous page, next page, without returning total count).</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BasePagingInfo</code> contains <code>PageNumber</code>, <code>PageSize</code>, <code>Count</code>. With <code>.Page(page)</code>, <code>page.Count</code> will have the count value.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Optimization</h2>
<p>For versions of SqlServer before 2012, row_number paging is used;</p>
<p>For SqlServer 2012+ versions, the latest fetch next rows paging is used;</p>
<h2> API</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Type</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ToSql</td>
<td>string</td>
<td></td>
<td>Returns the SQL statement that will be executed</td>
</tr>
<tr>
<td>ToList</td>
<td>List&lt;T1&gt;</td>
<td></td>
<td>Executes SQL query and returns all fields of T1 entity records. If there are navigation properties, they are also returned. If no records exist, returns a list with Count 0.</td>
</tr>
<tr>
<td>ToList&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>Lambda</td>
<td>Executes SQL query and returns specified fields of records. If no records exist, returns a list with Count 0.</td>
</tr>
<tr>
<td>ToList&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>string field</td>
<td>Executes SQL query and returns records for the specified field, and receives as tuples or basic types (int, string, long). If no records exist, returns a list with Count 0.</td>
</tr>
<tr>
<td>【Paging】</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Count</td>
<td>long</td>
<td></td>
<td>Number of records in the query</td>
</tr>
<tr>
<td>Count</td>
<td>&lt;this&gt;</td>
<td>out long</td>
<td>Number of records in the query, returned as an out parameter</td>
</tr>
<tr>
<td>Skip</td>
<td>&lt;this&gt;</td>
<td>int offset</td>
<td>Query with an offset of rows</td>
</tr>
<tr>
<td>Offset</td>
<td>&lt;this&gt;</td>
<td>int offset</td>
<td>Query with an offset of rows</td>
</tr>
<tr>
<td>Limit</td>
<td>&lt;this&gt;</td>
<td>int limit</td>
<td>Query how many records</td>
</tr>
<tr>
<td>Take</td>
<td>&lt;this&gt;</td>
<td>int limit</td>
<td>Query how many records</td>
</tr>
<tr>
<td>Page</td>
<td>&lt;this&gt;</td>
<td>int pageIndex, int pageSize</td>
<td>Paging</td>
</tr>
<tr>
<td>Page</td>
<td>&lt;this&gt;</td>
<td>BasePagingInfo(int PageNumber, int PageSize, long Count)</td>
<td>Paging and calculate Count</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Multiple Tables ✨</title>
    <id>https://freesql.net/en/guide/select-multi-table.html</id>
    <link href="https://freesql.net/en/guide/select-multi-table.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Multiple Tables ✨</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For creation details, please refer to the Getting Started document</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span> 
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CategoryId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Category</span> Category <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Category</span> 
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ParentId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">CategoryType</span> Parent <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span> Topics <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">CategoryType</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Multiple Tables ✨</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1. Multiple Table Joins</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Experience: <a href="https://github.com/dotnetcore/FreeSql/issues/430" target="_blank" rel="noopener noreferrer">One-to-Many, Only Retrieve the Last Record from Split Tables</a></p>
</blockquote>
<h2> 2. Navigation Property Joins</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: After correctly configuring the [Navigation Relations], there's no need to manually call <code>LeftJoin</code>.</p>
</blockquote>
<h2> 3. WithSql</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: <code>ISelect.ToSql</code> can be used with <code>WithSql</code>.</p>
</blockquote>
<h2> 4. Sub-table Exists</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Since the entity classes for subqueries are the same as the upper-level ones, use <code>As("b")</code> to specify an alias for differentiation.</p>
</blockquote>
<h2> 5. Sub-table In</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6. Sub-table List Navigation Property</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The effect is equivalent to:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quickly convert collection properties to <code>ISelect</code> for subquery operations.</p>
<h2> 7. Sub-table String.Join</h2>
<p>From v1.8.0+, <code>string.Join</code> + <code>ToList</code> concatenates multiple rows of results from a subquery into a single string, e.g., "1,2,3,4".</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Tip: Subquery <code>string.Join</code> + <code>ToList</code> is adapted for sqlserver/pgsql/oracle/mysql/sqlite/firebird/da-ming/jin-kang/nanda/hangao <a href="https://github.com/dotnetcore/FreeSql/issues/405" target="_blank" rel="noopener noreferrer">#405</a></p>
</blockquote>
<h2> 8. Sub-table First/Count/Sum/Max/Min/Avg</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9. Sub-table ToList</h2>
<blockquote>
<p>For versions v3.2.650+, at most 3 SQL queries are executed</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 10. WhereCascade</h2>
<p>When querying multiple tables, applying conditions like <code>isdeleted</code> to each table can be cumbersome. <code>WhereCascade</code> applies this condition to all tables when generating SQL.</p>
<p>For example:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The resulting SQL:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This feature is effective when entities can attach expressions and supports sub-table queries. The more tables used in a single query, the greater the benefit.</p>
<p>Applicable Scope:</p>
<ul>
<li>Subqueries, one-to-many, many-to-many, and custom subqueries.</li>
<li>Join queries, navigation properties, and custom Join queries.</li>
<li>Sub-collection queries using Include/<a href="/en/guide/select-include.html" target="blank">IncludeMany</a>.</li>
</ul>
<blockquote>
<p>Broadcast of [Lazy Loading] properties is not currently supported.</p>
</blockquote>
<blockquote>
<p>This feature differs from [Filters]; it is used for propagating conditions in a single multi-table query.</p>
</blockquote>
]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Single Table</title>
    <id>https://freesql.net/en/guide/select-single-table.html</id>
    <link href="https://freesql.net/en/guide/select-single-table.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Single Table</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For creation instructions, please refer to the introductory documentation.</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CategoryId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Single Table</h1>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Single Table</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> WithSql</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Using WithSql multiple times is equivalent to UNION ALL queries.</p>
</blockquote>
<blockquote>
<p>v3.2.666 <a href="/en/guide/unionall.html" target="blank">UnionAll Union Queries</a>, <a href="/en/guide/withtempquery.html" target="blank">WithTempQuery + FromQuery Nested Queries</a></p>
</blockquote>
<blockquote>
<p>v3.2.666 WithMemory for querying using in-memory data.</p>
</blockquote>
<blockquote>
<p>Assuming cross-database servers or cached data tables, WithMemory can achieve data table and memory-related queries.</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Select</title>
    <id>https://freesql.net/en/guide/select.html</id>
    <link href="https://freesql.net/en/guide/select.html"/>
    <updated>2024-07-26T14:54:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Select</h1>
<p>FreeSql has invested heavily in querying data, offering features like fluent style, multi-table queries, expression functions, and strong support for navigation properties.</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/en/guide/paging.html" target="blank">《Paging Queries》</a></td>
<td><a href="/en/guide/repository.html" target="blank">《Repository Layer》</a></td>
<td><a href="/en/guide/read-write-splitting.html" target="blank">《Read-Write Separation》</a></td>
</tr>
<tr>
<td><a href="/en/guide/select-single-table.html" target="blank">《Single Table Queries》</a></td>
<td><a href="/en/guide/filters.html" target="blank">《Filters》</a></td>
<td></td>
</tr>
<tr>
<td><a href="/en/guide/select-multi-table.html" target="blank">《Multi-Table Queries》</a></td>
<td><a href="/en/guide/select-lazy-loading.html" target="blank">《Lazy Loading》</a></td>
<td><a href="/en/guide/performance.html" target="blank">《Performance》</a></td>
</tr>
<tr>
<td><a href="/en/guide/withtempquery.html" target="blank">《Nested Queries》</a></td>
<td><a href="/en/guide/select-include.html" target="blank">《Eager Loading》</a></td>
<td><a href="/en/guide/sharding.html" target="blank">《Sharding》</a></td>
</tr>
<tr>
<td><a href="/en/guide/select-group-by.html" target="blank">《Group By Aggregation Queries》</a></td>
<td><a href="/en/guide/expression-function.html" target="blank">《Expression Functions》</a></td>
<td><a href="/en/guide/multi-tenancy.html" target="blank">《Multi-Tenancy》</a></td>
</tr>
<tr>
<td><a href="/en/guide/select-return-data.html" target="blank">《Return Data》</a></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<h1> Select</h1>
<p>FreeSql has invested heavily in querying data, offering features like fluent style, multi-table queries, expression functions, and strong support for navigation properties.</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/en/guide/paging.html" target="blank">《Paging Queries》</a></td>
<td><a href="/en/guide/repository.html" target="blank">《Repository Layer》</a></td>
<td><a href="/en/guide/read-write-splitting.html" target="blank">《Read-Write Separation》</a></td>
</tr>
<tr>
<td><a href="/en/guide/select-single-table.html" target="blank">《Single Table Queries》</a></td>
<td><a href="/en/guide/filters.html" target="blank">《Filters》</a></td>
<td></td>
</tr>
<tr>
<td><a href="/en/guide/select-multi-table.html" target="blank">《Multi-Table Queries》</a></td>
<td><a href="/en/guide/select-lazy-loading.html" target="blank">《Lazy Loading》</a></td>
<td><a href="/en/guide/performance.html" target="blank">《Performance》</a></td>
</tr>
<tr>
<td><a href="/en/guide/withtempquery.html" target="blank">《Nested Queries》</a></td>
<td><a href="/en/guide/select-include.html" target="blank">《Eager Loading》</a></td>
<td><a href="/en/guide/sharding.html" target="blank">《Sharding》</a></td>
</tr>
<tr>
<td><a href="/en/guide/select-group-by.html" target="blank">《Group By Aggregation Queries》</a></td>
<td><a href="/en/guide/expression-function.html" target="blank">《Expression Functions》</a></td>
<td><a href="/en/guide/multi-tenancy.html" target="blank">《Multi-Tenancy》</a></td>
</tr>
<tr>
<td><a href="/en/guide/select-return-data.html" target="blank">《Return Data》</a></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2> Expression Functions</h2>
<table>
<thead>
<tr>
<th>Description</th>
<th>Lambda Expression</th>
<th>SQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>Where(a =&gt; new [] { 1,2,3 }.Contains(a.Id))</td>
<td>[Id] in (1,2,3)</td>
</tr>
<tr>
<td>not in</td>
<td>Where(a =&gt; !new [] { 1,2,3 }.Contains(a.Id))</td>
<td>[Id] not in (1,2,3)</td>
</tr>
<tr>
<td>Multi-column in</td>
<td>Where(a =&gt; list.Any(b =&gt; b.Item1 == a.Id &amp;&amp; b.Item2 == a.ct1))</td>
<td>([Id]=1 and [ct1]=1) or ([Id]=2 and [ct1]=2)</td>
</tr>
<tr>
<td>like '%xxx%'</td>
<td>Where(a =&gt; a.Title.Contains("xxx"))</td>
<td>[Title] like '%xxx%'</td>
</tr>
<tr>
<td>like 'xxx%'</td>
<td>Where(a =&gt; a.Title.StartsWith("xxx"))</td>
<td>[Title] like 'xxx%'</td>
</tr>
<tr>
<td>like '%xxx'</td>
<td>Where(a =&gt; a.Title.EndsWith("xxx"))</td>
<td>[Title] like '%xxx'</td>
</tr>
<tr>
<td>Date range</td>
<td>Where(a =&gt; a.Time.Between(time1, time2))</td>
<td>[Time] between @time1 and @time2</td>
</tr>
<tr>
<td>Exists</td>
<td>.Any()</td>
<td>select 1 from ...</td>
</tr>
<tr>
<td>Count</td>
<td>.Count()</td>
<td>select count(*) from ...</td>
</tr>
<tr>
<td>Sum</td>
<td>.Sum(a =&gt; a.Score)</td>
<td>select sum([Score]) from ...</td>
</tr>
<tr>
<td>Average</td>
<td>.Avg(a =&gt; a.Score)</td>
<td>select avg([Score]) from ...</td>
</tr>
<tr>
<td>Maximum</td>
<td>.Max(a =&gt; a.Score)</td>
<td>select max([Score]) from ...</td>
</tr>
<tr>
<td>Minimum</td>
<td>.Min(a =&gt; a.Score)</td>
<td>select min([Score]) from ...</td>
</tr>
</tbody>
</table>
<p>For more details, see <a href="/en/guide/expression-function.html" target="blank">《Expression Functions》</a></p>
<h2> SqlServer WithLock/WithIndex</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multi-table:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Global NoLock Setting:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dynamic Filtering WhereDynamicFilter</h2>
<p><a href="https://www.cnblogs.com/FreeSql/p/16485310.html" target="_blank" rel="noopener noreferrer">《Efficient Understanding of FreeSql WhereDynamicFilter and Insights into Its Design》</a></p>
<p>The ISelect.WhereDynamicFilter method implements dynamic filtering conditions (interacting with the frontend), supporting the following operators:</p>
<ul>
<li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith: Contains/Does not contain, like '%xx%', or like 'xx%', or like '%xx'</li>
<li>Equal/NotEqual: Equals/Not equals</li>
<li>GreaterThan/GreaterThanOrEqual: Greater than/Greater than or equal</li>
<li>LessThan/LessThanOrEqual: Less than/Less than or equal</li>
<li>Range: Range query</li>
<li>DateRange: Date range, with special handling value[1] + 1</li>
<li>Any/NotAny: Whether it matches any item in value (essentially SQL IN)</li>
<li>Custom: <a href="https://github.com/dotnetcore/FreeSql/discussions/1550" target="_blank" rel="noopener noreferrer">Custom parsing</a></li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Dynamic Table Names: ISelect.AsTable((t, old) =&gt; $"{old}_201903")</p>
</blockquote>
<blockquote>
<p>Dynamic Sorting: ISelect.OrderByPropertyName("Parent.Code")</p>
</blockquote>
<blockquote>
<p>Dynamic Returns: ISelect.ToDataTableByPropertyName(new string[] { "Parent.Code", "Id" })</p>
</blockquote>
<blockquote>
<p>Dynamic Eager Loading: ISelect.IncludeByPropertyName("Parent.Parent").IncludeByPropertyName("Parent.Childs")</p>
</blockquote>
<h2> Clone Queries ISelect</h2>
<p>For your information: C# 7.0 supports local functions, which allows defining temporary methods within a method. This feature is highly recommended as it is very effective in many scenarios.</p>
<p>When a method is defined inside another method, it is called: local function/nested method.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> API</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Type</th>
<th>Parameters</th>
<th>Description</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>ToSql</td>
<td>string</td>
<td></td>
<td>Returns the SQL statement to be executed</td>
<td></td>
</tr>
<tr>
<td>ToList</td>
<td>List&lt;T1&gt;</td>
<td></td>
<td>Executes SQL query and returns records of all fields of the T1 entity; if navigation properties exist, they are also queried and returned. If no records exist, returns a list with Count 0.</td>
<td></td>
</tr>
<tr>
<td>ToList&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>Lambda</td>
<td>Executes SQL query and returns records of specified fields; if no records exist, returns a list with Count 0.</td>
<td></td>
</tr>
<tr>
<td>ToList&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>string field</td>
<td>Executes SQL query and returns records of the field specified, and can be received as a tuple or basic types (int, string, long); if no records exist, returns a list with Count 0.</td>
<td></td>
</tr>
<tr>
<td>ToOne</td>
<td>T1</td>
<td></td>
<td>Executes SQL query and returns the first record of all fields of the T1 entity; if no record exists, returns null.</td>
<td></td>
</tr>
<tr>
<td>ToAggregate&lt;T&gt;</td>
<td>List&lt;T&gt;</td>
<td>Lambda</td>
<td>Executes SQL query and returns aggregate results of specified fields (suitable for scenarios where GroupBy is not required).</td>
<td></td>
</tr>
<tr>
<td>Any</td>
<td>bool</td>
<td></td>
<td>Executes SQL query to check if there are any records.</td>
<td></td>
</tr>
<tr>
<td>Sum</td>
<td>T</td>
<td>Lambda</td>
<td>Computes the sum of a specified column.</td>
<td></td>
</tr>
<tr>
<td>Min</td>
<td>T</td>
<td>Lambda</td>
<td>Computes the minimum value of a specified column.</td>
<td></td>
</tr>
<tr>
<td>Max</td>
<td>T</td>
<td>Lambda</td>
<td>Computes the maximum</td>
<td></td>
</tr>
<tr>
<td>Max</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies the maximum value of a column</td>
<td></td>
</tr>
<tr>
<td>Avg</td>
<td>T</td>
<td>Lambda</td>
<td>Specifies the average value of a column</td>
<td></td>
</tr>
<tr>
<td>【Pagination】</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Count</td>
<td>long</td>
<td></td>
<td>The number of records in the query</td>
<td></td>
</tr>
<tr>
<td>Count</td>
<td>&lt;this&gt;</td>
<td>out long</td>
<td>The number of records in the query, returned as an out parameter</td>
<td></td>
</tr>
<tr>
<td>Skip</td>
<td>&lt;this&gt;</td>
<td>int offset</td>
<td>Offset the number of rows in the query</td>
<td></td>
</tr>
<tr>
<td>Offset</td>
<td>&lt;this&gt;</td>
<td>int offset</td>
<td>Offset the number of rows in the query</td>
<td></td>
</tr>
<tr>
<td>Limit</td>
<td>&lt;this&gt;</td>
<td>int limit</td>
<td>Specify the number of data records to query</td>
<td></td>
</tr>
<tr>
<td>Take</td>
<td>&lt;this&gt;</td>
<td>int limit</td>
<td>Specify the number of data records to query</td>
<td></td>
</tr>
<tr>
<td>Page</td>
<td>&lt;this&gt;</td>
<td>int pageIndex, int pageSize</td>
<td>Pagination</td>
<td></td>
</tr>
<tr>
<td>【Condition】</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Where</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Supports multi-table query expressions; using multiple times is equivalent to AND</td>
<td></td>
</tr>
<tr>
<td>WhereIf</td>
<td>&lt;this&gt;</td>
<td>bool, Lambda</td>
<td>Supports multi-table query expressions</td>
<td></td>
</tr>
<tr>
<td>Where</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Native SQL syntax condition, Where("id = @id", new { id = 1 } ,<a href="/en/guide/ado.html#parameter" target="blank">Note the prefix @, according to the specific database</a> not explained elsewhere. Same applies)</td>
<td></td>
</tr>
<tr>
<td>WhereIf</td>
<td>&lt;this&gt;</td>
<td>bool, string, parms</td>
<td>Native SQL syntax condition, WhereIf(true, "id = @id", new { id = 1 }</td>
<td></td>
</tr>
<tr>
<td>WhereCascade</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Add conditions to each table in multi-table queries</td>
<td></td>
</tr>
<tr>
<td>WhereDynamicFilter</td>
<td>&lt;this&gt;</td>
<td>DynamicFilterInfo</td>
<td>Dynamic filtering conditions (interaction with the frontend)</td>
<td></td>
</tr>
<tr>
<td>【GroupBy】</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>GroupBy</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Group by selected columns, GroupBy(a =&gt; a.Name)</td>
<td>GroupBy(a =&gt; new{a.Name,a.Time})</td>
</tr>
<tr>
<td>GroupBy</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Group by native SQL syntax, GroupBy("concat(name, @cc)", new { cc = 1 })</td>
<td></td>
</tr>
<tr>
<td>Having</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Filter aggregation conditions by native SQL syntax, Having("count(name) = @cc", new { cc = 1 })</td>
<td></td>
</tr>
<tr>
<td>Disdinct</td>
<td>&lt;this&gt;</td>
<td></td>
<td>.Distinct().ToList(x =&gt; x.GroupName) is for a specific field</td>
<td></td>
</tr>
<tr>
<td>【Sort】</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>OrderBy</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Sort by column, OrderBy(a =&gt; a.Time), can be used multiple times</td>
<td></td>
</tr>
<tr>
<td>OrderByDescending</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Sort by column in descending order, OrderByDescending(a =&gt; a.Time)</td>
<td></td>
</tr>
<tr>
<td>OrderBy</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Sort by native SQL syntax, OrderBy("count(name) + @cc", new { cc = 1 })</td>
<td></td>
</tr>
<tr>
<td>OrderByPropertyName</td>
<td>string, bool</td>
<td>Sort by property name string (supports navigation properties)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>【Multi-tables】</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LeftJoin</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Left join query, supports navigation properties or specifying associated entity types</td>
<td></td>
</tr>
<tr>
<td>InnerJoin</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Inner join query, supports navigation properties or specifying associated entity types</td>
<td></td>
</tr>
<tr>
<td>RightJoin</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Right join query, supports navigation properties or specifying associated entity types</td>
<td></td>
</tr>
<tr>
<td>LeftJoin</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Left join query using native SQL syntax, LeftJoin("type b on b.id = a.id and b.clicks &gt; @clicks", new { clicks = 1 })</td>
<td></td>
</tr>
<tr>
<td>InnerJoin</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Inner join query using native SQL syntax, InnerJoin("type b on b.id = a.id and b.clicks &gt; @clicks", new { clicks = 1 })</td>
<td></td>
</tr>
<tr>
<td>RightJoin</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Right join query using native SQL syntax, RightJoin("type b on b.id = a.id and b.clicks &gt; @clicks", new { clicks = 1 })</td>
<td></td>
</tr>
<tr>
<td>From</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Multi-table queries, very convenient for more than 3 tables; currently supports up to 10 tables</td>
<td></td>
</tr>
<tr>
<td>FromQuery</td>
<td>ISelect&lt;T1, T2&gt;</td>
<td>ISelect&lt;T2&gt;</td>
<td>Single table into double table query</td>
<td></td>
</tr>
<tr>
<td>WithTempQuery</td>
<td>ISelect&lt;T1&gt;</td>
<td>Lambda</td>
<td>Nest single or multiple table queries into a single table query</td>
<td></td>
</tr>
<tr>
<td>WithMemory</td>
<td>ISelect&lt;T1&gt;</td>
<td>List&lt;T1&gt;</td>
<td>Query using in-memory data</td>
<td></td>
</tr>
<tr>
<td>UnionAll</td>
<td>ISelect&lt;T1&gt;</td>
<td>ISelect&lt;T1&gt;[]</td>
<td>Union query</td>
<td></td>
</tr>
<tr>
<td>【Other】</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>As</td>
<td>&lt;this&gt;</td>
<td>string alias = "a"</td>
<td>Specify alias</td>
<td></td>
</tr>
<tr>
<td>Master</td>
<td>&lt;this&gt;</td>
<td></td>
<td>Specify querying from the master database (default is querying from the slave database)</td>
<td></td>
</tr>
<tr>
<td>CommandTimeout</td>
<td>&lt;this&gt;</td>
<td>int</td>
<td>Command timeout setting (seconds)</td>
<td></td>
</tr>
<tr>
<td>WithTransaction</td>
<td>&lt;this&gt;</td>
<td>DbTransaction</td>
<td>Set transaction object</td>
<td></td>
</tr>
<tr>
<td>WithConnection</td>
<td>&lt;this&gt;</td>
<td>DbConnection</td>
<td>Set connection object</td>
<td></td>
</tr>
<tr>
<td>WithLock</td>
<td>&lt;this&gt;</td>
<td>Enum</td>
<td>Special settings like SqlServer NoLock</td>
<td></td>
</tr>
<tr>
<td>ForUpdate</td>
<td>&lt;this&gt;</td>
<td>bool</td>
<td>Exclusive update lock, adapted for different databases, detailed explanation in comments</td>
<td></td>
</tr>
<tr>
<td>AsQueryable</td>
<td>IQueryable</td>
<td></td>
<td>Convert ISelect to IQueryable, mainly used for extension, e.g., abp IRepository GetAll() interface method needs to return IQueryable object. Note: IQueryable methods are more likely to cause pollution, so avoid this conversion as much as possible</td>
<td></td>
</tr>
<tr>
<td>ToTreeList()</td>
<td>List&lt;TEntity&gt;</td>
<td>None</td>
<td>Return hierarchical data in the form of a TreeList</td>
<td></td>
</tr>
<tr>
<td>AsTreeCte()</td>
<td>ISelect</td>
<td>(up, pathSelector, level)</td>
<td>Recursive query of hierarchical tables</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Type Mapping</title>
    <id>https://freesql.net/en/guide/type-mapping.html</id>
    <link href="https://freesql.net/en/guide/type-mapping.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Type Mapping</h1>
<h2> Custom Type Mapping (MapType)</h2>
<h3> v3.2.701 Custom Type Conversion</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>FreeSql<span class="token punctuation">.</span>Internal<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>TypeHandlers<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">JsonClass</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">String_JsonClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> StringLength <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">JsonClass</span> json <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">JsonClass</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> a <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> b <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">String_JsonClass</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TypeHandler<span class="token punctuation">&lt;</span>JsonClass<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name">JsonClass</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">JsonClass</span> <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>JsonClass<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Class1</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Custom DateTimeOffset</span>
    <span class="token punctuation">[</span><span class="token function">Column</span><span class="token punctuation">(</span>MapType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> DbType <span class="token operator">=</span> <span class="token string">"datetime"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTimeOffset</span> Join <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DateTimeOffsetTypeHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TypeHandler<span class="token punctuation">&lt;</span>DateTimeOffset<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">DateTimeOffset</span> <span class="token function">Deserialize</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DateTimeOffset<span class="token punctuation">.</span>TryParse<span class="token class-name"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> dts<span class="token punctuation">)</span> <span class="token punctuation">?</span></span> dts <span class="token punctuation">:</span> DateTimeOffset<span class="token punctuation">.</span>MinValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Type Mapping</h1>
<h2> Custom Type Mapping (MapType)</h2>
<h3> v3.2.701 Custom Type Conversion</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Using MapType Enum -&gt; string/int etc.:</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There should be no need for further explanation.</p>
<p><code>BigInteger</code> can also be mapped, but please note: it is only for CURD convenience; operations like +, -, *, / are not supported.</p>
<p>In version v0.9.15, you can map value objects as <code>typeof(string)</code> by installing the extension package:</p>
<blockquote>
<p>dotnet add package FreeSql.Extensions.JsonMap</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Default Type Mapping</h2>
<table>
<thead>
<tr>
<th>CSharp</th>
<th>MySql</th>
<th>SqlServer</th>
<th>PostgreSQL</th>
<th>Oracle</th>
<th>Sqlite</th>
<th>Dameng</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool | bool?</td>
<td>bit(1)</td>
<td>bit</td>
<td>bool</td>
<td>number(1)</td>
<td>boolean</td>
<td>number(1)</td>
</tr>
<tr>
<td>sbyte | sbyte?</td>
<td>tinyint(3)</td>
<td>smallint</td>
<td>int2</td>
<td>number(4)</td>
<td>smallint</td>
<td>number(4)</td>
</tr>
<tr>
<td>short | short?</td>
<td>smallint(6)</td>
<td>smallint</td>
<td>int2</td>
<td>number(6)</td>
<td>smallint</td>
<td>number(6)</td>
</tr>
<tr>
<td>int | int?</td>
<td>int(11)</td>
<td>int</td>
<td>int4</td>
<td>number(11)</td>
<td>integer</td>
<td>number(11)</td>
</tr>
<tr>
<td>long | long?</td>
<td>bigint(20)</td>
<td>bigint</td>
<td>int8</td>
<td>number(21)</td>
<td>integer</td>
<td>number(21)</td>
</tr>
<tr>
<td>byte | byte?</td>
<td>tinyint(3) unsigned</td>
<td>tinyint</td>
<td>int2</td>
<td>number(3)</td>
<td>int2</td>
<td>number(3)</td>
</tr>
<tr>
<td>ushort | ushort?</td>
<td>smallint(5) unsigned</td>
<td>int</td>
<td>int4</td>
<td>number(5)</td>
<td>unsigned</td>
<td>number(5)</td>
</tr>
<tr>
<td>uint | uint?</td>
<td>int(10) unsigned</td>
<td>bigint</td>
<td>int8</td>
<td>number(10)</td>
<td>decimal(10,0)</td>
<td>number(10)</td>
</tr>
<tr>
<td>ulong | ulong?</td>
<td>bigint(20) unsigned</td>
<td>decimal(20,0)</td>
<td>numeric(20,0)</td>
<td>number(20)</td>
<td>decimal(21,0)</td>
<td>number(20)</td>
</tr>
<tr>
<td>double | double?</td>
<td>double</td>
<td>float</td>
<td>float8</td>
<td>float(126)</td>
<td>double</td>
<td>double</td>
</tr>
<tr>
<td>float | float?</td>
<td>float</td>
<td>real</td>
<td>float4</td>
<td>float(63)</td>
<td>float</td>
<td>real</td>
</tr>
<tr>
<td>decimal | decimal?</td>
<td>decimal(10,2)</td>
<td>decimal(10,2)</td>
<td>numeric(10,2)</td>
<td>number(10,2)</td>
<td>decimal(10,2)</td>
<td>number(10,2)</td>
</tr>
<tr>
<td>Guid | Guid?</td>
<td>char(36)</td>
<td>uniqueidentifier</td>
<td>uuid</td>
<td>char(36 CHAR)</td>
<td>character(36)</td>
<td>char(36)</td>
</tr>
<tr>
<td>TimeSpan | TimeSpan?</td>
<td>time</td>
<td>time</td>
<td>time</td>
<td>interval day(2) to second(6)</td>
<td>bigint</td>
<td>-</td>
</tr>
<tr>
<td>DateTime | DateTime?</td>
<td>datetime</td>
<td>datetime</td>
<td>timestamp</td>
<td>timestamp(6)</td>
<td>datetime</td>
<td>timestamp(6)</td>
</tr>
<tr>
<td>DateTimeOffset | DateTimeOffset?</td>
<td>-</td>
<td>datetimeoffset</td>
<td>-</td>
<td>timestamp(6) with local time zone</td>
<td>-</td>
<td>timestamp(6)</td>
</tr>
<tr>
<td>Enum | Enum?</td>
<td>enum</td>
<td>int</td>
<td>int4</td>
<td>number(16)</td>
<td>mediumint</td>
<td>number(16)</td>
</tr>
<tr>
<td>FlagsEnum | FlagsEnum?</td>
<td>set</td>
<td>bigint</td>
<td>int8</td>
<td>number(32)</td>
<td>bigint</td>
<td>number(32)</td>
</tr>
<tr>
<td>byte[]</td>
<td>varbinary(255)</td>
<td>varbinary(255)</td>
<td>bytea</td>
<td>blob</td>
<td>blob</td>
<td>blob</td>
</tr>
<tr>
<td>string</td>
<td>varchar(255)</td>
<td>nvarchar(255)</td>
<td>varchar(255)</td>
<td>nvarchar2(255)</td>
<td>nvarchar(255)</td>
<td>nvarchar2(255)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>The above types and lengths are defaults. Column attributes DbType value can be set manually.</p>
</blockquote>
<blockquote>
<p>For string specifying length [Column(DbType = "varchar(max)")] or [MaxLength(-1)] or [Column(StringLength = -1)], when length is -1, the mapping is as follows:</p>
</blockquote>
<table>
<thead>
<tr>
<th>MySql</th>
<th>PostgreSQL</th>
<th>SqlServer</th>
<th>Oracle</th>
<th>Sqlite</th>
<th>Firebird</th>
<th>MsAccess</th>
<th>Dameng</th>
<th>Kingbase</th>
<th>Shentong</th>
</tr>
</thead>
<tbody>
<tr>
<td>text</td>
<td>text</td>
<td>varchar(max)</td>
<td>nclob</td>
<td>text</td>
<td>blob sub_type 1</td>
<td>longtext</td>
<td>text</td>
<td>text</td>
<td>text</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Note: Oracle nclob requires v1.3.2+ version for support; otherwise, it maps to nvarchar2(4000).</p>
</blockquote>
<blockquote>
<p>Note: MySql [MaxLength(-2)] or [Column(StringLength = -2)] maps to longtext; other databases have the same mapping rules as -1.</p>
</blockquote>
<blockquote>
<p>For decimal specifying length [Column(Precision = 10, Scale = 2)]</p>
</blockquote>
<h2> MySql Special Type Mapping</h2>
<table>
<thead>
<tr>
<th>CSharp</th>
<th>MySql</th>
</tr>
</thead>
<tbody>
<tr>
<td>MygisPoint</td>
<td>point</td>
</tr>
<tr>
<td>MygisLineString</td>
<td>linestring</td>
</tr>
<tr>
<td>MygisPolygon</td>
<td>polygon</td>
</tr>
<tr>
<td>MygisMultiPoint</td>
<td>multipoint</td>
</tr>
<tr>
<td>MygisMultiLineString</td>
<td>multilinestring</td>
</tr>
<tr>
<td>MygisMultiPolygon</td>
<td>multipolygon</td>
</tr>
</tbody>
</table>
<h2> MySql Considerations</h2>
<p>If <code>int</code>, <code>byte</code> types specify <code>DbType="tinyint(1)"</code>, please note that <code>tinyint(1)</code> is by default mapped to <code>bool</code> in ado.net. You can specify <code>TreatTinyAsBoolean=false</code> in the connection string to map <code>tinyint(1)</code> to <code>SByte</code> instead of <code>bool</code>.</p>
<h2> PostgreSQL Special Type Mapping</h2>
<table>
<thead>
<tr>
<th>CSharp</th>
<th>PostgreSQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>BitArray</td>
<td>varbit(64)</td>
</tr>
<tr>
<td>NpgsqlPoint | NpgsqlPoint?</td>
<td>point</td>
</tr>
<tr>
<td>NpgsqlLine | NpgsqlLine?</td>
<td>line</td>
</tr>
<tr>
<td>NpgsqlLSeg | NpgsqlLSeg?</td>
<td>lseg</td>
</tr>
<tr>
<td>NpgsqlBox | NpgsqlBox?</td>
<td>box</td>
</tr>
<tr>
<td>NpgsqlPath | NpgsqlPath?</td>
<td>path</td>
</tr>
<tr>
<td>NpgsqlPolygon | NpgsqlPolygon?</td>
<td>polygon</td>
</tr>
<tr>
<td>NpgsqlCircle | NpgsqlCircle?</td>
<td>circle</td>
</tr>
<tr>
<td>(IPAddress Address, int Subnet) | (IPAddress Address, int Subnet)?</td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>csharp</th>
<th>PostgreSQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>BitArray</td>
<td>varbit(64)</td>
</tr>
<tr>
<td>NpgsqlPoint | NpgsqlPoint?</td>
<td>point</td>
</tr>
<tr>
<td>NpgsqlLine | NpgsqlLine?</td>
<td>line</td>
</tr>
<tr>
<td>NpgsqlLSeg | NpgsqlLSeg?</td>
<td>lseg</td>
</tr>
<tr>
<td>NpgsqlBox | NpgsqlBox?</td>
<td>box</td>
</tr>
<tr>
<td>NpgsqlPath | NpgsqlPath?</td>
<td>path</td>
</tr>
<tr>
<td>NpgsqlPolygon | NpgsqlPolygon?</td>
<td>polygon</td>
</tr>
<tr>
<td>NpgsqlCircle | NpgsqlCircle?</td>
<td>circle</td>
</tr>
<tr>
<td>(IPAddress Address, int Subnet) | (IPAddress Address, int Subnet)?</td>
<td>cidr</td>
</tr>
<tr>
<td>IPAddress</td>
<td>inet</td>
</tr>
<tr>
<td>PhysicalAddress</td>
<td>macaddr</td>
</tr>
<tr>
<td>NpgsqlRange&lt;int&gt; | NpgsqlRange&lt;int&gt;?</td>
<td>int4range</td>
</tr>
<tr>
<td>NpgsqlRange&lt;long&gt; | NpgsqlRange&lt;long&gt;?</td>
<td>int8range</td>
</tr>
<tr>
<td>NpgsqlRange&lt;decimal&gt; | NpgsqlRange&lt;decimal&gt;?</td>
<td>numrange</td>
</tr>
<tr>
<td>NpgsqlRange&lt;DateTime&gt; | NpgsqlRange&lt;DateTime&gt;?</td>
<td>tsrange</td>
</tr>
<tr>
<td>PostgisPoint</td>
<td>geometry</td>
</tr>
<tr>
<td>PostgisLineString</td>
<td>geometry</td>
</tr>
<tr>
<td>PostgisPolygon</td>
<td>geometry</td>
</tr>
<tr>
<td>PostgisMultiPoint</td>
<td>geometry</td>
</tr>
<tr>
<td>PostgisMultiLineString</td>
<td>geometry</td>
</tr>
<tr>
<td>PostgisMultiPolygon</td>
<td>geometry</td>
</tr>
<tr>
<td>PostgisGeometry</td>
<td>geometry</td>
</tr>
<tr>
<td>PostgisGeometryCollection</td>
<td>geometry</td>
</tr>
<tr>
<td>Dictionary&lt;string, string&gt;</td>
<td>hstore</td>
</tr>
<tr>
<td>JToken</td>
<td>jsonb</td>
</tr>
<tr>
<td>JObject</td>
<td>jsonb</td>
</tr>
<tr>
<td>JArray</td>
<td>jsonb</td>
</tr>
<tr>
<td>Array</td>
<td>All the above types are supported, including default types</td>
</tr>
</tbody>
</table>
<h2> RewriteSql, RereadSql</h2>
<p>Rewrite SQL on write and rewrite SQL on read, suitable for read/write scenarios with geography types.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Priority</h2>
<p>Database import attributes &gt; Entity attributes &gt; FluentApi &gt; Aop</p>
]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Update</title>
    <id>https://freesql.net/en/guide/update.html</id>
    <link href="https://freesql.net/en/guide/update.html"/>
    <updated>2024-07-26T09:14:45.000Z</updated>
    <summary type="html"><![CDATA[<h1> Update</h1>
<p><code>FreeSql</code> provides rich database update functionalities, supporting both single and bulk updates. It can also return the updated records when executed on certain databases.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">IFreeSql</span> fsql<span class="token punctuation">;</span> <span class="token comment">// For creation details, refer to the introductory documentation</span>

<span class="token keyword">class</span> <span class="token class-name">Topic</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsIdentity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Clicks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Update</h1>
<p><code>FreeSql</code> provides rich database update functionalities, supporting both single and bulk updates. It can also return the updated records when executed on certain databases.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1. Dynamic Conditions</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>dywhere</code> can be:</p>
<ul>
<li>Primary key value</li>
<li><code>new[] { primaryKeyValue1, primaryKeyValue2 }</code></li>
<li>Topic object</li>
<li><code>new[] { TopicObject1, TopicObject2 }</code></li>
<li><code>new { id = 1 }</code></li>
</ul>
<h2> 2. Dynamic Table Name</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3. Conditions</h2>
<blockquote>
<p>In addition to the <code>dywhere</code> constructor parameters described above, <code>Where lambda/sql</code> methods are also supported.</p>
</blockquote>
<blockquote>
<p>For security reasons, updates are not executed without conditions to avoid mistakenly updating the entire table. To update the entire table: <code>fsql.Update&lt;T&gt;().Where(a =&gt; true).Set(a =&gt; a.Xxx == xxx).ExecuteAffrows()</code></p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4. Set Columns</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><code>Set()</code> supports multiple calls, which is equivalent to concatenation</p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5. SetSource Entity</h2>
<p>Method 1: (Recommended)</p>
<blockquote>
<p>Only updates changed properties, depends on <code>FreeSql.Repository</code></p>
</blockquote>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Method 2: (Original)</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Specifying <code>Set</code> columns for updates will make <code>SetSource</code> invalid.</p>
</blockquote>
<blockquote>
<p><code>SetSource</code> relies on entity's <code>IsPrimary</code> attribute by default; for temporary primary keys, use <code>SetSource(items, a =&gt; a.Code)</code>.</p>
</blockquote>
<blockquote>
<p>For Oracle, CASE when N'' character set mismatch:</p>
</blockquote>
<ul>
<li>Reason: Mismatch between entity primary key <code>Column DbType</code> and table type.</li>
<li>Solution: <code>[Column(DbType = "varchar2", StringLength = 255)]</code></li>
</ul>
<h2> 6. SetDto</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7. Differences Set/SetSource/SetDto</h2>
<p>These three are parallel functionalities, corresponding to:</p>
<ul>
<li><code>Set/SetRaw</code>: Used when the entity is known, corresponding to <code>update t set x = x</code>.</li>
<li><code>SetSource</code>: Updates the entire entity and can be used with <code>UpdateColumns</code> or <code>IgnoreColumns</code> to specify or ignore fields.</li>
<li><code>SetDto</code>: Bulk operation for <code>Set</code>.</li>
</ul>
<h2> 8. Dictionary Update</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9. Optimistic Locking</h2>
<p>When updating entire entity data, it is easy for old data to overwrite new records in concurrent scenarios.</p>
<p>The principle of optimistic locking is to use a field of the entity, such as <code>long version</code>. Before updating, query the data, at which point the <code>version</code> is <code>1</code>. The generated SQL for updating will include <code>where version = 1</code>. If the modification fails (i.e., <code>Affrows == 0</code>), an exception (<code>DbUpdateVersionException</code>) is thrown.</p>
<p>Each entity supports only one optimistic lock property. Mark the property with the attribute: <code>[Column(IsVersion = true)]</code>.</p>
<blockquote>
<p>Applies to <code>SetSource</code> updates. Each update increments the <code>version</code> value by <code>1</code>.</p>
</blockquote>
<h2> 10. Pessimistic Locking</h2>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ForUpdate</code> is a common syntax for Oracle/PostgreSQL/MySql. We have made special adaptations for SqlServer, and the executed SQL statement is roughly as follows:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 11. ISelect.ToUpdate</h2>
<p><code>IUpdate</code> does not support navigation objects, multi-table associations, etc., by default. <code>ISelect.ToUpdate</code> can convert a query into <code>IUpdate</code> for updating data using navigation objects, as shown below:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: This method does not query the data into memory before updating. The above code generates the following SQL:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Advantages of using this method for complex updates:</p>
<ul>
<li>Allows previewing and testing data before updating, preventing erroneous updates.</li>
<li>Supports complex update operations, such as updating the top 10 records matching the condition with <code>Limit(10)</code> on <code>ISelect</code>.</li>
</ul>
<h2> 12. Join Table Update</h2>
<p>v3.2.692+ (High-risk operation, high-risk operation, high-risk operation. Please use with caution and test to verify the content returned by ToSql.)</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL generated by different databases may vary. For example, in MySql:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>More complex join table updates:</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 13. High-Performance BulkCopy</h2>
<table>
<thead>
<tr>
<th>Package</th>
<th>Extension Method</th>
<th>Description (v3.2.693)</th>
</tr>
</thead>
<tbody>
<tr>
<td>FreeSql.Provider.SqlServer</td>
<td>ExecuteSqlBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.MySqlConnector</td>
<td>ExecuteMySqlBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.Oracle</td>
<td>ExecuteOracleBulkCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.PostgreSQL</td>
<td>ExecutePgCopy</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.Dameng</td>
<td>ExecuteDmBulkCopy</td>
<td>Dameng</td>
</tr>
<tr>
<td>FreeSql.Provider.KingbaseES</td>
<td>ExecuteKdbCopy</td>
<td>KingbaseES</td>
</tr>
</tbody>
</table>
<p>Principle: Use BulkCopy to insert data into a temporary table, and then use UPDATE FROM JOIN for table updates.</p>
<p>Tip: Significant benefits when the number of updated fields exceeds 3000.</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1> API</h1>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Value</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>SetSource</td>
<td>&lt;this&gt;</td>
<td>T1 | IEnumerable&lt;T1&gt;</td>
<td>Updates data, sets the entities to update</td>
</tr>
<tr>
<td>IgnoreColumns</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Columns to ignore</td>
</tr>
<tr>
<td>Set</td>
<td>&lt;this&gt;</td>
<td>Lambda, value</td>
<td>Sets the new value for a column, e.g., <code>Set(a =&gt; a.Name, "newvalue")</code></td>
</tr>
<tr>
<td>Set</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Sets the new value by incrementing, e.g., <code>Set(a =&gt; a.Clicks + 1)</code>, equivalent to clicks=clicks+1</td>
</tr>
<tr>
<td>SetDto</td>
<td>&lt;this&gt;</td>
<td>object</td>
<td>Update method based on DTO</td>
</tr>
<tr>
<td>SetRaw</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Sets value using custom SQL syntax, e.g., <code>SetRaw("title = @title", new { title = "newtitle" })</code></td>
</tr>
<tr>
<td>Where</td>
<td>&lt;this&gt;</td>
<td>Lambda</td>
<td>Expression condition, supports only basic entity members (no navigation objects)</td>
</tr>
<tr>
<td>Where</td>
<td>&lt;this&gt;</td>
<td>string, parms</td>
<td>Native SQL condition, e.g., <code>Where("id = @id", new { id = 1 })</code></td>
</tr>
<tr>
<td>Where</td>
<td>&lt;this&gt;</td>
<td>T1 | IEnumerable&lt;T1&gt;</td>
<td>Pass entity or collection, using primary key as condition</td>
</tr>
<tr>
<td>CommandTimeout</td>
<td>&lt;this&gt;</td>
<td>int</td>
<td>Command timeout setting (seconds)</td>
</tr>
<tr>
<td>WithTransaction</td>
<td>&lt;this&gt;</td>
<td>DbTransaction</td>
<td>Sets transaction object</td>
</tr>
<tr>
<td>WithConnection</td>
<td>&lt;this&gt;</td>
<td>DbConnection</td>
<td>Sets connection object</td>
</tr>
<tr>
<td>ToSql</td>
<td>string</td>
<td></td>
<td>Returns the SQL statement to be executed</td>
</tr>
<tr>
<td>ExecuteAffrows</td>
<td>long</td>
<td></td>
<td>Executes SQL statement, returns the number of affected rows</td>
</tr>
<tr>
<td>ExecuteUpdated</td>
<td>List&lt;T1&gt;</td>
<td></td>
<td>Executes SQL statement, returns the updated records</td>
</tr>
<tr>
<td>Join</td>
<td>IUpdateJoin</td>
<td></td>
<td>Join table update</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2021-08-21T05:59:59.000Z</published>
  </entry>
  <entry>
    <title type="text">Get started</title>
    <id>https://freesql.net/en/guide/</id>
    <link href="https://freesql.net/en/guide/"/>
    <updated>2024-07-26T15:35:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> Get started</h1>
<p>FreeSql is a powerful Object-Relational Mapping (O/RM) component, supporting .NET Core 2.1+ and .NET Framework 4.0+.</p>
<p>QQ Groups: 561616019 (Online), 4336577 (Full), 8578575 (Full), 52508226 (Full)</p>
<p>For issue reporting, please visit https://github.com/dotnetcore/FreeSql/issues</p>]]></summary>
    <content type="html"><![CDATA[<h1> Get started</h1>
<p>FreeSql is a powerful Object-Relational Mapping (O/RM) component, supporting .NET Core 2.1+ and .NET Framework 4.0+.</p>
<p>QQ Groups: 561616019 (Online), 4336577 (Full), 8578575 (Full), 52508226 (Full)</p>
<p>For issue reporting, please visit https://github.com/dotnetcore/FreeSql/issues</p>
<h2> Installation Packages</h2>
<p>To access a specific database, install the corresponding <code>FreeSql.Provider.XX</code>. Alternatively, you can install <code>FreeSql.All</code> to include all providers.</p>

<table>
<thead>
<tr>
<th>Provider</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>FreeSql.Provider.MySql</td>
<td>Based on MySql.Data (official from Oracle)</td>
</tr>
<tr>
<td>FreeSql.Provider.MySqlConnector</td>
<td>Based on MySqlConnector (open-source community, recommended++)<br><em>Supports MySQL, MariaDB, Percona, Amazon Aurora, Azure Database for MySQL, Google Cloud SQL for MySQL, OceanBase, Doris, Tidb, etc.</em></td>
</tr>
<tr>
<td>FreeSql.Provider.PostgreSQL</td>
<td>Based on PostgreSQL 9.5+</td>
</tr>
<tr>
<td>FreeSql.Provider.SqlServer</td>
<td>Based on SqlServer 2005+</td>
</tr>
<tr>
<td>FreeSql.Provider.SqlServerForSystem</td>
<td>Based on System.Data.SqlClient + SqlServer 2005+</td>
</tr>
<tr>
<td>FreeSql.Provider.Sqlite</td>
<td>Based on System.Data.SQLite.Core</td>
</tr>
<tr>
<td>FreeSql.Provider.SqliteCore</td>
<td>Based on Microsoft.Data.Sqlite.Core, requires installing bundle_xxx</td>
</tr>
<tr>
<td>FreeSql.Provider.ClickHouse</td>
<td>Based on ClickHouse.Client</td>
</tr>
<tr>
<td>FreeSql.Provider.QuestDb</td>
<td>Based on Npgsql and RestApi</td>
</tr>
<tr>
<td>FreeSql.Provider.Oracle</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.OracleOledb</td>
<td>Based on Oledb, addresses US7ASCII Chinese garbled text issue</td>
</tr>
<tr>
<td>FreeSql.Provider.Firebird</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.MsAccess</td>
<td></td>
</tr>
<tr>
<td>FreeSql.Provider.Dameng</td>
<td>Based on Dameng Database</td>
</tr>
<tr>
<td>FreeSql.Provider.ShenTong</td>
<td>Based on ShenZhou General Database</td>
</tr>
<tr>
<td>FreeSql.Provider.KingbaseES</td>
<td>Based on RenDa JinCang Database</td>
</tr>
<tr>
<td>FreeSql.Provider.GBase</td>
<td>Based on NanDa General GBase Database</td>
</tr>
<tr>
<td>FreeSql.Provider.Xugu</td>
<td>Based on Xugu Database</td>
</tr>
<tr>
<td>FreeSql.Provider.Odbc</td>
<td>Based on ODBC</td>
</tr>
<tr>
<td>FreeSql.Provider.Custom</td>
<td>Custom adaptation<br><em>Supports SqlServer2000, PolarDB, KunDB, other databases, etc.</em></td>
</tr>
</tbody>
</table>
<h2> Create Entity</h2>
<p><code>FreeSql</code> uses models to perform data access, where models are represented by entity classes that correspond to database tables or views, and are used for querying and saving data.</p>
<p>You can generate entity models from an existing database using the <code>IDbFirst</code> interface provided by <code>FreeSql</code>, which implements <a href="/en/guide/db-first.html" target="blank">Entity Model Generation</a>.</p>
<p>Alternatively, you can manually create models. By creating or modifying the database structure based on these models, <code>FreeSql</code> provides <a href="/en/guide/code-first.html" target="blank">CodeFirst</a> synchronization APIs (and even supports automatic synchronization during the development phase).</p>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> How to Use</h2>
<blockquote>
<p>Note: IFreeSql should be declared as a singleton in the project.</p>
</blockquote>

<p><code>IFreeSql</code> is the top-level object in the ORM, and all operations are performed using its methods or properties:</p>
<ul>
<li><code>UseAutoSyncStructure</code> automatically synchronizes entity structures to the database in the development environment.</li>
<li><code>UseNameConvert</code> uses underscore naming for database tables and columns while using C# PascalCase for code.</li>
</ul>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note: Use <code>UseAutoSyncStructure</code> with caution in production environments.</strong></p>
<p><strong>Note: Use <code>UseAutoSyncStructure</code> with caution in production environments.</strong></p>
<p><strong>Note: Use <code>UseAutoSyncStructure</code> with caution in production environments.</strong></p>
<h2> FreeSqlBuilder</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th>Return Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>UseConnectionString</td>
<td>this</td>
<td>Sets the connection string</td>
</tr>
<tr>
<td>UseAdoConnectionPool</td>
<td>this</td>
<td>Configures the connection pool scheme (default is false; recommended to set true for remote access)</td>
</tr>
<tr>
<td>UseSlave</td>
<td>this</td>
<td>Configures a slave database; supports multiple slaves</td>
</tr>
<tr>
<td>UseSlaveWeight</td>
<td>this</td>
<td>Configures the weight of the slave database</td>
</tr>
<tr>
<td>UseConnectionFactory</td>
<td>this</td>
<td>Sets a custom database connection object (bypasses the built-in connection pool technology)</td>
</tr>
<tr>
<td>UseAutoSyncStructure</td>
<td>this</td>
<td>[Essential for development] Automatically synchronizes entity structures to the database; checks for entity creation or modifications during program runtime</td>
</tr>
<tr>
<td>UseNoneCommandParameter</td>
<td>this</td>
<td>Disables command parameterization for execution, applicable for <code>Insert/Update</code>; can also use <code>IInsert/IUpdate.NoneParameter()</code> temporarily</td>
</tr>
<tr>
<td>UseGenerateCommandParameterWithLambda</td>
<td>this</td>
<td>Generates command parameterization, applicable for lambda expression parsing</td>
</tr>
<tr>
<td>UseLazyLoading</td>
<td>this</td>
<td>Enables lazy loading functionality</td>
</tr>
<tr>
<td>UseMonitorCommand</td>
<td>this</td>
<td>Monitors global SQL execution before and after</td>
</tr>
<tr>
<td>UseMappingPriority</td>
<td>this</td>
<td>Specifies the mapping priority (default is <code>Aop &lt; FluentApi &lt; Attribute</code>); the last one has the highest priority)</td>
</tr>
<tr>
<td>UseNameConvert</td>
<td>this</td>
<td>Automatically converts names from Entity to Db</td>
</tr>
<tr>
<td>UseQuoteSqlName</td>
<td>this</td>
<td>Determines if SQL names use brackets <code>[]</code>, backticks <code>`</code>, or double quotes <code>""</code></td>
</tr>
<tr>
<td>UseExitAutoDisposePool</td>
<td>this</td>
<td>Listens to <code>AppDomain.CurrentDomain.ProcessExit</code> and <code>Console.CancelKeyPress</code> events to automatically release the connection pool (default is true)</td>
</tr>
<tr>
<td><code>Build&lt;T&gt;</code></td>
<td><code>IFreeSql&lt;T&gt;</code></td>
<td>Creates an <code>IFreeSql</code> object; note: designed as a singleton, avoid creating multiple instances</td>
</tr>
</tbody>
</table>
<h2> ConnectionStrings</h2>
<table>
<thead>
<tr>
<th>DataType</th>
<th>ConnectionString</th>
</tr>
</thead>
<tbody>
<tr>
<td>DataType.MySql</td>
<td>Data Source=127.0.0.1;Port=3306;User ID=root;Password=root; Initial Catalog=cccddd;Charset=utf8mb4; SslMode=none;Min pool size=1</td>
</tr>
<tr>
<td>DataType.PostgreSQL</td>
<td>Host=192.168.164.10;Port=5432;Username=postgres;Password=123456; Database=tedb;ArrayNullabilityMode=Always;Pooling=true;Minimum Pool Size=1</td>
</tr>
<tr>
<td>DataType.SqlServer</td>
<td>Data Source=.;User Id=sa;Password=123456;Initial Catalog=freesqlTest;Encrypt=True;TrustServerCertificate=True;Pooling=true;Min Pool Size=1</td>
</tr>
<tr>
<td>DataType.Oracle</td>
<td>user id=user1;password=123456; data source=//127.0.0.1:1521/XE;Pooling=true;Min Pool Size=1</td>
</tr>
<tr>
<td>DataType.Sqlite</td>
<td>Data Source=|DataDirectory|\document.db; Attachs=xxxtb.db; Pooling=true;Min Pool Size=1</td>
</tr>
<tr>
<td>DataType.ClickHouse</td>
<td>DataCompress=False;BufferSize=32768;SocketTimeout=10000;CheckCompressedHash=False;Encrypt=False;Compressor=lz4;Host=192.168.0.121;Port=8125;Database=PersonnelLocation;Username=root;Password=123</td>
</tr>
<tr>
<td>DataType.Firebird</td>
<td>database=localhost:D:\fbdata\EXAMPLES.fdb;user=sysdba;password=123456</td>
</tr>
<tr>
<td>DataType.QuestDb</td>
<td>host=localhost;port=8812;username=admin;password=quest;database=qdb;ServerCompatibilityMode=NoTypeLoading;</td>
</tr>
<tr>
<td>DataType.MsAccess</td>
<td>Provider=Microsoft.Jet.OleDb.4.0;Data Source=d:/accdb/2003.mdb</td>
</tr>
<tr>
<td>DataType.MsAccess(accdb)</td>
<td>Provider=Microsoft.ACE.OLEDB.12.0;Data Source=d:/accdb/2003.accdb;</td>
</tr>
<tr>
<td>DataType.MsAccess(加密)</td>
<td>Provider=Microsoft.ACE.OLEDB.12.0;Data Source=d:/accdb/2003.accdb;Jet OLEDB:Database Password=12341234</td>
</tr>
<tr>
<td>DataType.Dameng(达梦)</td>
<td>server=127.0.0.1;port=5236;user=2user;password=123456789;database=2user;poolsize=5</td>
</tr>
<tr>
<td>DataType.ShenTong(神通)</td>
<td>HOST=192.168.164.10;PORT=2003;DATABASE=OSRDB;USERNAME=SYSDBA;PASSWORD=szoscar55;MAXPOOLSIZE=2</td>
</tr>
<tr>
<td>DataType.KingbaseES(人大金仓) V008R003</td>
<td>Server=127.0.0.1;Port=54321;UID=USER2;PWD=123456789;database=TEST;MAXPOOLSIZE=2</td>
</tr>
<tr>
<td>DataType.Gbase(南大通用)</td>
<td>Driver={GBase ODBC DRIVER (64-Bit)};Host=192.168.164.134;Service=9088;Server=gbase01;Database=testdb;Protocol=onsoctcp;Uid=gbasedbt;Pwd=GBase123;Db_locale=zh_CN.utf8;Client_locale=zh_CN.utf8</td>
</tr>
<tr>
<td>DataType.Xugu(虚谷)</td>
<td>IP=127.0.0.1;DB=SYSTEM;User=SYSDBA;PWD=SYSDBA;Port=5138;AUTO_COMMIT=on;CHAR_SET=UTF8</td>
</tr>
<tr>
<td>DataType.OdbcMySql</td>
<td>Driver={MySQL ODBC 8.0 Unicode Driver}; Server=127.0.0.1;Persist Security Info=False; Trusted_Connection=Yes;UID=root;PWD=root; DATABASE=cccddd_odbc;Charset=utf8; SslMode=none;Min Pool Size=1</td>
</tr>
<tr>
<td>DataType.OdbcSqlServer</td>
<td>Driver={SQL Server};Data Source=.;User Id=sa;Password=123456;Initial Catalog=freesqlTest;Encrypt=True;TrustServerCertificate=True;Pooling=true;Min Pool Size=1</td>
</tr>
<tr>
<td>DataType.OdbcOracle</td>
<td>Driver={Oracle in XE};Server=//127.0.0.1:1521/XE; Persist Security Info=False; Trusted_Connection=Yes;UID=odbc1;PWD=123456; Min Pool Size=1</td>
</tr>
<tr>
<td>DataType.OdbcPostgreSQL</td>
<td>Driver={PostgreSQL Unicode(x64)};Server=192.168.164.10; Port=5432;UID=postgres;PWD=123456; Database=tedb_odbc;Pooling=true;Min Pool Size=1</td>
</tr>
<tr>
<td>DataType.OdbcDameng (达梦)</td>
<td>Driver={DM8 ODBC DRIVER};Server=127.0.0.1:5236; Persist Security Info=False; Trusted_Connection=Yes; UID=USER1;PWD=123456789</td>
</tr>
<tr>
<td>DataType.OdbcKingbaseES (人大金仓) V008R003</td>
<td>Driver={KingbaseES 8.2 ODBC Driver ANSI};Server=127.0.0.1;Port=54321;UID=USER2;PWD=123456789;database=TEST</td>
</tr>
<tr>
<td>DataType.Odbc</td>
<td>Driver={SQL Server};Server=.;Persist Security Info=False; Trusted_Connection=Yes;Integrated Security=True; DATABASE=freesqlTest_odbc; Pooling=true;Min pool size=1</td>
</tr>
<tr>
<td><a href="https://github.com/dotnetcore/FreeSql/tree/master/Providers/FreeSql.Provider.Custom" target="_blank" rel="noopener noreferrer">DataType.Custom</a></td>
<td>"Custom Connection String: Access Any Database"</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2021-02-04T16:03:18.000Z</published>
  </entry>
</feed>