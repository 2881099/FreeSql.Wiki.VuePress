{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "FreeSql Documents",
  "home_page_url": "https://freesql.net/en/",
  "feed_url": "https://freesql.net/en/feed.json",
  "description": "FreeSql Documents",
  "items": [
    {
      "title": "Entity-Relationship",
      "url": "https://freesql.net/en/guide/Entity-Relationship.html",
      "id": "https://freesql.net/en/guide/Entity-Relationship.html",
      "summary": "Navigation properties are one of FreeSql's characteristic functions, which can be configured by agreement or customized configuration of the relationship between objects. Naviga...",
      "content_html": "<h1> Entity-Relationship</h1>\n<p>Navigation properties are one of FreeSql's characteristic functions, which can be configured by agreement or customized configuration of the relationship between objects.</p>\n<p>Navigation properties have six configuration relationships: OneToMany, ManyToOne, ManyToMany, OneToOne, Parent, And <a href=\"https://www.cnblogs.com/FreeSql/p/16351417.html\" target=\"_blank\" rel=\"noopener noreferrer\">PgArrayToMany</a>.</p>\n<p>With navigation properties, multi-table query is very convenient. Directly using navigation objects in lambda expressions can get the IDE's BUFF blessing.</p>\n<ul>\n<li>Naming convention,or not (need to specify Navigate attribute association);</li>\n<li>If there is no association relationship, you can specify the <code>On</code> condition when querying, <code>LeftJoin(a =&gt; a.Parent.Id == a.ParentId)</code>;</li>\n<li>If there is an association relationship, just use the navigation object directly, and the <code>On</code> condition will be automatically attached;</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/kellynic/p/13575053.html\" target=\"_blank\" rel=\"noopener noreferrer\">《What problems can navigation properties solve?》</a></p>\n<blockquote>\n<p>Warm up note: to load navigation attributes, you need to solve the problem of dead cycle reference. When the reference relationship is very complex, it may lead to the failure of using navigation attributes for the first time. The second time is enough. The solution is to preheat all entity classes when the program starts, and while execute fsql.Select&lt;object&gt;().Astype (entity type);</p>\n</blockquote>\n<p>OneToMany/ManyToMany supported by collection navigation properties: ICollection&lt;T&gt;、List&lt;T&gt;、ObservableCollection&lt;T&gt;</p>\n<h2> Custom Navigation Relationship</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>You can also use FluentApi to set the navigation relationship externally:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Priority: Attribute&gt; FluentApi</p>\n<blockquote>\n<p>Note:</p>\n</blockquote>\n<ol>\n<li>\n<p>Set <code>Column(IsIgnore = true)</code> on Property, then the navigation property will be invalid</p>\n</li>\n<li>\n<p>The string set by Navigate is the property name of the type, NOT THE TABLE IR FIELD NAME.</p>\n</li>\n</ol>\n<h2> Detect Navigation Properties</h2>\n<p>How to detect whether a navigation property is configured to take effect:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Method signature:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> Naming convention (no need to specify Navigate)</h2>\n<h3> One-to-One</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://github.com/dotnetcore/FreeSql/issues/45\" target=\"_blank\" rel=\"noopener noreferrer\">《How to add data in one-to-one mode?》</a></p>\n<h3> Many-to-One</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> One-to-Many</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><a href=\"https://github.com/dotnetcore/FreeSql/issues/46\" target=\"_blank\" rel=\"noopener noreferrer\">《How to add data in one-to-many mode?》</a></p>\n<h3> Parent and Children</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>The parent-children relationship is similar to One-to-Many mode. You can also refer to this link:</p>\n<p><a href=\"https://github.com/dotnetcore/FreeSql/issues/46\" target=\"_blank\" rel=\"noopener noreferrer\">《How to add data in one-to-many mode?》</a></p>\n<h3> Many-to-Many</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Song, Tag, Song_tag, these three entities use the four relationships: OneToMany, ManyToOne, Parent, and ManyToMany.</p>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Entity-Attributes\">《CodeFirst Mode, Part 1: Entity Attributes》</a></li>\n<li><a href=\"FluentApi-Mode\">《CodeFirst Mode, Part 2: FluentApi》</a></li>\n<li><a href=\"Custom-Attributes\">《CodeFirst Mode, Part 3: Custom Attributes》</a></li>\n<li><a href=\"Type-Mapping\">《CodeFirst Mode, Part 4: Type Mapping》</a></li>\n<li><a href=\"Import-Entity-Configuration-from-Database\">《Import Entity Configuration from Database》</a></li>\n</ul>\n",
      "date_published": "2022-06-07T13:45:28.000Z",
      "date_modified": "2022-07-23T05:30:46.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Cascade Saving",
      "url": "https://freesql.net/en/guide/Cascade-Saving.html",
      "id": "https://freesql.net/en/guide/Cascade-Saving.html",
      "summary": "It is found that n to 1 is not suitable for cascade preservation. Save the type information when saving the topic? Personally, I think the bottom-up saving function is too uncon...",
      "content_html": "<h1> Cascade Saving</h1>\n<p>It is found that n to 1 is not suitable for cascade preservation. Save the type information when saving the topic? Personally, I think the bottom-up saving function is too uncontrollable. FreeSQL does not support bottom-up saving at present. Therefore, we will only talk about OneToOne/OneToMany/ManyToMany cascade save. As for manytoone cascade storage, manual processing is used, which is more safe and controllable.</p>\n<h2> Savemany save manually</h2>\n<p>Save completely, compare the existing data in the table, and calculate the execution of addition, modification and deletion.</p>\n<p>Recursive saving of navigation attributes is unsafe and uncontrollable. It is not a technical problem, but for security reasons. It provides a way to save navigation attributes manually and completely.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>-SaveMany only supports onetomany and manytomany navigation properties\n-Save only topics, not downward recursive tracing\n-When topics is empty, delete all table data of topics existing in type, and confirm?\n-The manytomany mechanism is to completely compare and save the intermediate table, and only append the external table without updating</p>\n<p>For example:</p>\n<p>-This table song\n-External table tag\n-Intermediate table Songtag</p>\n<h2> EnableCascadeSave warehouse cascade save</h2>\n<p>Dbcontext / repository EnableCascadeSave can realize recursive tracing and save the OneToOne/OneToMany/ManyToMany navigation attributes when saving objects. This document describes the mechanism to prevent misuse.</p>\n<ol>\n<li>Onetoone cascade save</li>\n</ol>\n<blockquote>\n<p>v3. 2.606 + support, and support <a href=\"https://github.com/dotnetcore/FreeSql/wiki/%e5%88%a0%e9%99%a4#ibaserepository-%E7%BA%A7%E8%81%94%E5%88%A0%E9%99%A4\" target=\"_blank\" rel=\"noopener noreferrer\">cascade deletion function</a></p>\n</blockquote>\n<ol start=\"2\">\n<li>Onetomany appends or updates the sub table without deleting the existing data of the sub table</li>\n</ol>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>-Do not delete the existing data in the topics sub table. Are you sure?\n-When the topics attribute is empty, do not do anything. Confirm?\n-When you save topics, you will also save the subordinate collection properties of topics \\ [0 -.. ]. Go down to 18 layers and confirm?</p>\n<blockquote>\n<p>For example, in the [type] table, there is set attribute [article] below and set attribute [comment] below [article].</p>\n</blockquote>\n<blockquote>\n<p>When saving the [type] table object, it will retrieve the set attribute [article], and then if the [article] is saved, it will continue to retrieve the set attribute [comment]. Do insertorupdate operation together.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Manytomany completely compares and saves the intermediate table and appends the external table</li>\n</ol>\n<p>Compare and save the intermediate table completely, compare the existing data of the [many to many] intermediate table, and calculate the execution of addition, modification and deletion.</p>\n<p>Append external tables, only append without updating.</p>\n<p>-This table song\n-External table tag\n-Intermediate table Songtag</p>\n<hr>\n<p>Test 1: append and save OneToMany</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>Test 2: Full save ManyToMany</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-07-23T05:30:46.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Delete",
      "url": "https://freesql.net/en/guide/Delete-Data.html",
      "id": "https://freesql.net/en/guide/Delete-Data.html",
      "summary": "Deleting data is a very dangerous operation. FreeSql does not support deletion very powerfully. By default, it only supports single-table and conditional deletion methods. If it...",
      "content_html": "<h1> Delete</h1>\n<p>Deleting data is a very dangerous operation. FreeSql does not support deletion very powerfully. By default, it only supports single-table and conditional deletion methods.</p>\n<p>If it is executed when the <code>Where</code> condition is empty, only <code>0</code> or the <code>default</code> value is returned, and no real SQL delete operation is performed.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Dynamic Conditions</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>dywhere</code> supports:</p>\n<ul>\n<li>Primary key value</li>\n<li><code>new[] { PrimaryKey1, PrimaryKey2 }</code></li>\n<li>Topic Object</li>\n<li><code>new[] { TopicObject1, TopicObject2 }</code></li>\n<li><code>new { id = 1 }</code></li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Delete Conditions</h2>\n<blockquote>\n<p>For safety reasons, when there are no conditions, the delete action will not be executed to avoid deleting the entire table data by mistake. Delete the entire table data: <code>fsql.Delete&lt;T&gt;().Where(\"1=1\").ExecuteAffrows()</code></p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Dictionary Delete</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <code>ISelect.ToDelete</code> Advanced Delete</h2>\n<p><code>IDelete</code> does not support navigation objects, multi-table association, etc. By default, <code>ISelect.ToDelete</code> can convert the query to <code>IDelete</code> so that the navigation object can be used to delete data:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Note: This method is not to query the data to the memory and delete it cyclically. The above code generates and executes the following SQL:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>The benefits of using this method for complex deletion:</p>\n<ul>\n<li>Preview data before deleting to prevent mistaken deletion operations;</li>\n<li>Support complex deletion operations, for example: Use <code>Limit(10)</code> on <code>ISelect</code> to delete the first 10 records that meet the conditions;</li>\n</ul>\n<h2> Cascade deletion of IBaseRepository</h2>\n<p>1、Cascade deletion based on [object]</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>Cascade deletion based on [database]</li>\n</ol>\n<blockquote>\n<p>According to the set navigation properties, recursively delete the corresponding data of OneToOne/OneToMany/ManyToMany, and return the deleted data. This feature does not rely on database foreign keys</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Reference</h2>\n<ul>\n<li><a href=\"Database-Transaction\">《Database Transaction》</a></li>\n<li><a href=\"Insert-Data\">《FreeSql 101, Part 1: Insert Data》</a></li>\n<li><a href=\"Update-Data\">《FreeSql 101, Part 3: Update Data》</a></li>\n<li><a href=\"Query-Data\">《FreeSql 101, Part 4: Query Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th>Return</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Expression conditions, only support entity basic members (not including navigation objects)</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Raw SQL syntax conditions, <code>Where(\"id = @id\", new { id = 1 })</code></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>Pass in the entity or collection, and use its primary key as the condition</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>Command timeout setting (seconds)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>Set transaction object</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>Set the connection object</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>Returns the SQL statement to be executed.</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>Execute SQL and return the number of rows affected.</td>\n</tr>\n<tr>\n<td>ExecuteDeleted</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>Execute SQL and return the deleted records.</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2023-07-27T15:11:15.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Greed-Loading",
      "url": "https://freesql.net/en/guide/Greed-Loading.html",
      "id": "https://freesql.net/en/guide/Greed-Loading.html",
      "summary": "Navigation Properties - ManyToOne ManyToOne navigation properties are loaded by ToList(includeNestedMembers: false), parameter description: false: Return the navigation data of ...",
      "content_html": "<h1> Greed-Loading</h1>\n<h2> Navigation Properties - ManyToOne</h2>\n<p>ManyToOne navigation properties are loaded by <code>ToList(includeNestedMembers: false)</code>, parameter description:</p>\n<p><code>false</code>: Return the navigation data of Level 2 Join (default);</p>\n<p><code>true</code>: Return the navigation data of all levels of depth Join (unused navigation data will not be returned).</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Navigation Properties - OneToMany/ManyToMany</h2>\n<p>IncludeMany greedily loads the navigation properties of the collection. In fact, it is queried twice, and data is assembled after <code>ToList</code>.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>IncludeMany has a second parameter, which can be modified before the second query.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>In fact, in <code>Then</code>, you can continue to use <code>Include</code>/<code>IncludeMany</code>. As long as you like it, it’s okay to go down 100 levels.</p>\n<h2> Mutations</h2>\n<p>It can also be greedily loaded without configuring the navigation relationship.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Only query the first few pieces of data in each sub-collection to avoid poor IO performance caused by loading all data like EfCore (for example, there are 2000 comments under a product).</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>The sub-collection returns a part of the fields to avoid the problem of too many fields.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> IncludeMany Extensions</h2>\n<p>When the main data already exists in the memory, how to load the sub-data? So we added the List&lt;T&gt; extension method, the example is as follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Comparison of the Two Ways of IncludeMany</h2>\n<p><strong>Way 1: IncludeMany extensions</strong></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p><strong>Way 2: Directly IncludeMany + ToList</strong></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Case: Query Vod table, 10 data for each of category 1, category 2, and category 3</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Reference</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tablea\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-05-31T14:08:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Group Aggregation Query",
      "url": "https://freesql.net/en/guide/Group-Aggregation-Query.html",
      "id": "https://freesql.net/en/guide/Group-Aggregation-Query.html",
      "summary": "Group Aggregation To find the aggregate value without grouping, please use ToAggregate instead of ToList Navigation Property Grouping If Topic has the navigation property Catego...",
      "content_html": "<h1> Group Aggregation Query</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Group Aggregation</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>To find the aggregate value without grouping, please use <code>ToAggregate</code> instead of <code>ToList</code></p>\n</blockquote>\n<h2> Navigation Property Grouping</h2>\n<p>If <code>Topic</code> has the navigation property <code>Category</code>, and <code>Category</code> has the navigation property <code>Area</code>, the navigation property grouping code is as follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Note: Write as above, an error will be reported and cannot be resolved <code>a.Key.Category.Area.Name</code>. The solution is to use <code>Include</code>:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>However, you can also solve it like this:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Multi-table Grouping</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code>g.Value.Item1</code> corresponds to <code>Topic</code></li>\n<li><code>g.Value.Item2</code> corresponds to <code>Category</code></li>\n<li><code>g.Value.Item3</code> corresponds to <code>Area</code></li>\n</ul>\n<h2> Aggregate</h2>\n<ul>\n<li>distinct</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>SqlExt.DistinctCount</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>SELECT count(distinct a.\"title\") as1 FROM \"Topic\" a</p>\n</blockquote>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Return</th>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>Return the SQL statement to be executed</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>Execute SQL query and return the records of the specified field. When the record does not exist, return a list with Count of 0.</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>Execute SQL query, and return the record of the field specified by field, and receive it as a tuple or basic type (int, string, long). If the record does not exist, return a list with Count of 0.</td>\n</tr>\n<tr>\n<td>ToAggregate&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>Execute SQL query and return the aggregate result of the specified field. (Suitable for scenarios where GroupBy is not required)</td>\n</tr>\n<tr>\n<td>Sum</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to sum.</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to find the minimum.</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to find the maximum.</td>\n</tr>\n<tr>\n<td>Avg</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to average.</td>\n</tr>\n<tr>\n<td>【Grouping】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Group by the selected column, GroupBy(a =&gt; a.Name)</td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Group by raw sql statement, GroupBy(\"concat(name, @cc)\", new { cc = 1 })</td>\n</tr>\n<tr>\n<td>Having</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Filter by raw SQL statement aggregation conditions, Having(\"count(name) = @cc\", new { cc = 1 })</td>\n</tr>\n<tr>\n<td>【Members】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Key</td>\n<td></td>\n<td></td>\n<td>Returns the object selected by GroupBy</td>\n</tr>\n<tr>\n<td>Value</td>\n<td></td>\n<td></td>\n<td>Return to the main table or the field selector of From&lt;T2,T3....&gt;</td>\n</tr>\n</tbody>\n</table>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tablea\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Performance\">《Performance》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-08-09T08:03:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Insert Data",
      "url": "https://freesql.net/en/guide/Insert-Data.html",
      "id": "https://freesql.net/en/guide/Insert-Data.html",
      "summary": "FreeSql provides methods for inserting data in single and batches, and it can also return the inserted records when executed in a specific database. 1. Single Insert If the tabl...",
      "content_html": "<h1> Insert Data</h1>\n<p>FreeSql provides methods for inserting data in single and batches, and it can also return the inserted records when executed in a specific database.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 1. Single Insert</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>If the table has auto-increment columns, <code>id</code> will be returned after inserting data.</p>\n<p>Method 1: (Original)</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Method 2: (depends on FreeSql.Repository)</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>In the internal implementation, after inserting the data, the self-incremental value will be assigned to <code>blog.Id</code></p>\n</blockquote>\n<h2> 2. Batch Insert</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>The errors that are easily caused by adding SqlServer in batches have been resolved:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Principle: Split into multiple packages and execute them in transactions.</p>\n</blockquote>\n<p>When inserting large quantities of data, the internal logic is divided and executed in batches. The segmentation rules are as follows:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Quantity</th>\n<th>Size of Parameters</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql</td>\n<td>5000</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>5000</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>SqlServer</td>\n<td>1000</td>\n<td>2100</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>500</td>\n<td>999</td>\n</tr>\n<tr>\n<td>Sqlite</td>\n<td>5000</td>\n<td>999</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Quantity: It is the size of each batch of division. For example, a batch of 10,000 pieces of data will be inserted into two batches when mysql is executed.<br>\nSize of Parameters: the size of the parameter size divided into each batch. For example, when inserting 10,000 pieces of data in batches, each row needs to use 5 parameterizations, which will be divided into 3000/5 for each batch when mysql is executed.</p>\n</blockquote>\n<p>After the execution of the split, when the external transaction is not provided, the internal transaction is opened to achieve insertion integrity. You can also set appropriate values through <code>BatchOptions</code>.</p>\n<p>FreeSql adapts to the use of parameterization and non-parameterization of each data type. It is recommended to turn off the parameterization function for batch insertion and use <code>.NoneParameter()</code> to execute it.</p>\n<h2> 3. ExecuteSqlBulkCopy, ExecutePgCopy, ExecuteMySqlBulkCopy and ExecuteOracleBulkCopy</h2>\n<p>Bulk Copy operation is implemented in the form of an extension method. For SqlServer/PostgreSQL/MySql/Oracle databases, the available packages are: FreeSql.Provider.SqlServer/FreeSql.Provider.PostgreSQL/FreeSql.Provider.MySqlConnector/FreeSql.Provider.Oracle.</p>\n<h3> bulk insert test reference (52 fields)</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>18W</th>\n<th>1W</th>\n<th>5K</th>\n<th>2K</th>\n<th>1K</th>\n<th>500</th>\n<th>100</th>\n<th>50</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql 5.5 ExecuteAffrows</td>\n<td>38,481</td>\n<td>2,234</td>\n<td>1,136</td>\n<td>284</td>\n<td>239</td>\n<td>167</td>\n<td>66</td>\n<td>30</td>\n</tr>\n<tr>\n<td>MySql 5.5 ExecuteMySqlBulkCopy</td>\n<td>28,405</td>\n<td>1,142</td>\n<td>657</td>\n<td>451</td>\n<td>435</td>\n<td>592</td>\n<td>47</td>\n<td>22</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteAffrows</td>\n<td>402,355</td>\n<td>24,847</td>\n<td>11,465</td>\n<td>4,971</td>\n<td>2,437</td>\n<td>915</td>\n<td>138</td>\n<td>88</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteSqlBulkCopy</td>\n<td>21,065</td>\n<td>578</td>\n<td>326</td>\n<td>139</td>\n<td>105</td>\n<td>79</td>\n<td>60</td>\n<td>48</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecuteAffrows</td>\n<td>46,756</td>\n<td>3,294</td>\n<td>2,269</td>\n<td>1,019</td>\n<td>374</td>\n<td>209</td>\n<td>51</td>\n<td>37</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecutePgCopy</td>\n<td>10,090</td>\n<td>583</td>\n<td>337</td>\n<td>136</td>\n<td>88</td>\n<td>61</td>\n<td>30</td>\n<td>25</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Explanation of 8W: insert 180000 rows of records, and the number in the table is the execution time (unit: ms)</p>\n</blockquote>\n<h3> bulk insert test reference (10 fields)</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>18W</th>\n<th>1W</th>\n<th>5K</th>\n<th>2K</th>\n<th>1K</th>\n<th>500</th>\n<th>100</th>\n<th>50</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql 5.5 ExecuteAffrows</td>\n<td>11,171</td>\n<td>866</td>\n<td>366</td>\n<td>80</td>\n<td>83</td>\n<td>50</td>\n<td>24</td>\n<td>34</td>\n</tr>\n<tr>\n<td>MySql 5.5 ExecuteMySqlBulkCopy</td>\n<td>6,504</td>\n<td>399</td>\n<td>257</td>\n<td>116</td>\n<td>87</td>\n<td>100</td>\n<td>16</td>\n<td>16</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteAffrows</td>\n<td>47,204</td>\n<td>2,275</td>\n<td>1,108</td>\n<td>488</td>\n<td>279</td>\n<td>123</td>\n<td>35</td>\n<td>16</td>\n</tr>\n<tr>\n<td>SqlServer Express ExecuteSqlBulkCopy</td>\n<td>4,248</td>\n<td>127</td>\n<td>71</td>\n<td>30</td>\n<td>48</td>\n<td>14</td>\n<td>11</td>\n<td>10</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecuteAffrows</td>\n<td>9,786</td>\n<td>568</td>\n<td>336</td>\n<td>157</td>\n<td>102</td>\n<td>34</td>\n<td>9</td>\n<td>6</td>\n</tr>\n<tr>\n<td>PostgreSQL 10 ExecutePgCopy</td>\n<td>4,081</td>\n<td>167</td>\n<td>93</td>\n<td>39</td>\n<td>21</td>\n<td>12</td>\n<td>4</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>The test results are all based on the same operating system, and all are preheated.</p>\n</blockquote>\n<h2> 4. Insert the specified columns</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5. Ignore the specified columns</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6. Column Insertion Priority</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>Without using <code>InsertColumns/IgnoreColumns</code>, all columns of the entity will be inserted into the database;</li>\n<li>Otherwise, when using <code>InsertColumns</code> and not using <code>IgnoreColumns</code>, only the specified columns are inserted into the database;</li>\n<li>Otherwise, in the case of using <code>IgnoreColumns</code>, only unspecified columns are inserted into the database.</li>\n</ul>\n<h2> 7、Dictionary Insert</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 8. Import table data</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Note: Because <code>Clicks</code> and <code>CreateTime</code> are not selected, it'll use the value set by the target entity attribute <code>[Column(InsertValueSql = xx)]</code>, or the default value of <code>C#</code> of the target entity attribute.</p>\n<h2> 8. <code>Insert Ignore Into</code> (MySql only)</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Reference</h2>\n<ul>\n<li><a href=\"Database-Transaction\">《Database Transaction》</a></li>\n<li><a href=\"Delete-Data\">《FreeSql 101, Part 2: Delete Data》</a></li>\n<li><a href=\"Update-Data\">《FreeSql 101, Part 3: Update Data》</a></li>\n<li><a href=\"Query-Data\">《FreeSql 101, Part 4: Query Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th>Return</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AppendData</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>Append the entity to be inserted</td>\n</tr>\n<tr>\n<td>InsertIdentity</td>\n<td>&lt;this&gt;</td>\n<td>None</td>\n<td>Specify the insert auto-increment column</td>\n</tr>\n<tr>\n<td>InsertColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Specify the inserted columns</td>\n</tr>\n<tr>\n<td>IgnoreColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Specify the ignored columns</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>Command timeout setting (seconds)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>Set transaction object</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>Set the connection object</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>Return the SQL statement to be executed.</td>\n</tr>\n<tr>\n<td><a href=\"%e6%b7%bb%e5%8a%a0%e6%88%96%e4%bf%ae%e6%94%b9\">OnDuplicateKeyUpdate</a></td>\n<td>OnDuplicateKeyUpdate&lt;T1&gt;</td>\n<td>None</td>\n<td>MySql only. <code>On Duplicate Key Update</code></td>\n</tr>\n<tr>\n<td><a href=\"%e6%b7%bb%e5%8a%a0%e6%88%96%e4%bf%ae%e6%94%b9\">OnConflictDoUpdate</a></td>\n<td>OnConflictDoUpdate&lt;T1&gt;</td>\n<td>None</td>\n<td>PostgreSQL only. <code>On Conflict Do Update</code></td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>Execute SQL and return the number of rows affected.</td>\n</tr>\n<tr>\n<td>ExecuteIdentity</td>\n<td>long</td>\n<td></td>\n<td>Execute SQL and return the incremented value.</td>\n</tr>\n<tr>\n<td>ExecuteInserted</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>Execute SQL and return the inserted records.</td>\n</tr>\n<tr>\n<td>ExecuteSqlBulkCopy</td>\n<td>void</td>\n<td></td>\n<td>SqlServer only. To execute BulkCopy to import data in batches, you need to reference <code>FreeSql.Provider.SqlServer</code></td>\n</tr>\n<tr>\n<td>ExecutePgCopy</td>\n<td>void</td>\n<td></td>\n<td>PostgreSQL only. To execute BulkCopy to import data in batches, you need to reference <code>FreeSql.Provider.PostgreSQL</code></td>\n</tr>\n<tr>\n<td>ExecuteMySqlBulkCopy</td>\n<td>void</td>\n<td></td>\n<td>MySql only. To execute BulkCopy to import data in batches, you need to reference <code>FreeSql.Provider.MysqlConnector</code></td>\n</tr>\n<tr>\n<td>ExecuteOracleBulkCopy</td>\n<td>void</td>\n<td></td>\n<td>Oracle only. To execute BulkCopy to import data in batches, you need to reference <code>FreeSql.Provider.Oracle</code></td>\n</tr>\n<tr>\n<td>ExecuteDmBulkCopy</td>\n<td>void</td>\n<td></td>\n<td>Dameng database only. To execute BulkCopy to import data in batches, you need to reference <code>FreeSql.Provider.Dameng</code></td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-05-17T06:09:12.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Lazy Loading",
      "url": "https://freesql.net/en/guide/Lazy-Loading.html",
      "id": "https://freesql.net/en/guide/Lazy-Loading.html",
      "summary": "FreeSql supports lazy loading of navigation properties, that is, data is loaded (read) when we need it. It supports navigation properties of One-to-One, Many-to-One, One-to-Many...",
      "content_html": "<h1> Lazy Loading</h1>\n<p>FreeSql supports lazy loading of navigation properties, that is, data is loaded (read) when we need it. It supports navigation properties of <em>One-to-One</em>, <em>Many-to-One</em>, <em>One-to-Many</em>, and <em>Many-to-Many</em> relationships.</p>\n<p>When we want to query a certain order information and display its corresponding order detailed records, we hope to use lazy loading to achieve. This not only speeds up the reading speed, but also avoids loading unnecessary data. Lazy loading is usually used for <em>foreach loop</em> queries.</p>\n<p>When we are defining the <em>Model</em>, we need to add the <code>virtual</code> keyword in front of the properties. As follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>The Lazy Loading function is <em>turn-off</em> by default. When using this function, please turn it on at the place of declaration.</p>\n</blockquote>\n<blockquote>\n<p>Lazy loading function depends on <em>FreeSql.Extensions.LazyLoading</em> package, please go to NuGet to download.</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Console output:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>FreeSql lazy loading supports navigation properties of <em>One-to-One</em>, <em>Many-to-One</em>, <em>One-to-Many</em>, and <em>Many-to-Many</em> relationships. The first three are similar. We separately introduce the <em>Many-to-Many</em> relationship.</p>\n<h2> Many-to-Many Lazy Loading</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>As above, there are three tables: <strong>Song</strong>, <strong>Tag</strong>, and their relationship table.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Console output:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Summary</h2>\n<p>Advantages: Load data only when needed, without pre-planning, avoiding the inefficiency problems caused by various complicated outer joins, indexes, and view operations.</p>\n<p>Defect: Interacting with DB many times, performance degradation.</p>\n<p>If you want to use data in a loop, use <a href=\"Greed-Loading\">Greed Loading</a>, otherwise use <strong>Lazy Loading</strong>.</p>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tablea\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Linq to Sql",
      "url": "https://freesql.net/en/guide/Linq-to-Sql.html",
      "id": "https://freesql.net/en/guide/Linq-to-Sql.html",
      "summary": "Originally not supporting IQueryable is mainly due to the consideration of usage habits. The intelligence of writing code will always prompt a bunch of methods you don't want to...",
      "content_html": "<h1> Linq to Sql</h1>\n<p>Originally not supporting IQueryable is mainly due to the consideration of usage habits. The intelligence of writing code will always prompt a bunch of methods you don't want to use. IQueryable itself provides a bunch of methods that cannot be implemented, as well as external intrusion extension methods, which seriously affect Coding experience. As shown below:</p>\n<figure><img src=\"https://user-images.githubusercontent.com/16286519/57295126-5dd7bd00-70fc-11e9-99c0-d1c46423afa2.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<p>For FreeSql v1.4.0+ version, please use the following items to install with commands (old version does not need to be installed):</p>\n<blockquote>\n<p>dotnet add package FreeSql.Extensions.Linq</p>\n</blockquote>\n<h2> Special Note</h2>\n<ul>\n<li>\n<p>Please try not to use the following Linq methods in <code>ISelect</code> mode: <code>GroupJoin</code>, <code>Select</code>, <code>SelectMany</code>, <code>Join</code> and <code>DefaultIfEmpty</code>.</p>\n</li>\n<li>\n<p>If you must use the <code>.Select()</code> method in <code>ISelect</code>, be sure to call it before <code>.ToList()</code>.</p>\n</li>\n</ul>\n<h2> IQueryable</h2>\n<p>FreeSql provides a powerful data query object: ISelect.</p>\n<p>FreeSql.Extensions.Linq v1.4.0+ implements the common functions of IQueryable query objects for interactive use in various frameworks.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Note: The implementation of IQueryable does not currently support <code>GroupBy</code>. You can consider using the <code>RestoreSelect</code> method to switch back to <code>ISelect</code> for query.</p>\n<h2> Where</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Specify Fields: Select</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> CaseWhen</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Join</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> LeftJoin</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Multi-table Query: From</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Grouping: GroupBy</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Reference</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tablea\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n</ul>\n",
      "image": "https://user-images.githubusercontent.com/16286519/57295126-5dd7bd00-70fc-11e9-99c0-d1c46423afa2.png",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Pagination",
      "url": "https://freesql.net/en/guide/Pagination.html",
      "id": "https://freesql.net/en/guide/Pagination.html",
      "summary": "20 data per page, query page 1 Optimization For the previous versions of SqlServer 2012, use row_number for pagination; For SqlServer 2012+ version, using the latest fetch next ...",
      "content_html": "<h1> Pagination</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 20 data per page, query page 1</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Optimization</h2>\n<p>For the previous versions of <code>SqlServer 2012</code>, use <code>row_number</code> for pagination;</p>\n<p>For <code>SqlServer 2012+</code> version, using the latest <code>fetch next rows</code> pagination;</p>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th>Return</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>Return the SQL statement to be executed</td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>Execute SQL query, and return the records of all the fields of the <code>T1</code> entity. If there are navigation properties, they will be queried and returned together. If the record does not exist, a list with <code>Count</code> of <code>0</code> will be returned.</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>Execute SQL query, and return the record of the specified fields. If the record does not exist, a list with <code>Count</code> of <code>0</code> will be returned.</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>Execute SQL query, and return the record of the specified fields of the parameters, and receive it as a tuple or basic type (<code>int</code>, <code>string</code>, <code>long</code>). If the record does not exist, a list with <code>Count</code> of <code>0</code> will be returned.</td>\n</tr>\n<tr>\n<td>【Pagination】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>long</td>\n<td></td>\n<td>Number of records queried</td>\n</tr>\n<tr>\n<td>Count</td>\n<td>&lt;this&gt;</td>\n<td>out long</td>\n<td>The number of records to be queried, returned in the form of parameter with <code>out</code></td>\n</tr>\n<tr>\n<td>Skip</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>Query the number of rows shifted backward</td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>Query the number of rows shifted backward</td>\n</tr>\n<tr>\n<td>Limit</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>Number of query data</td>\n</tr>\n<tr>\n<td>Take</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>Number of query data</td>\n</tr>\n<tr>\n<td>Page</td>\n<td>&lt;this&gt;</td>\n<td>int pageIndex, int pageSize</td>\n<td>Pagination</td>\n</tr>\n</tbody>\n</table>\n<h2> 参考资料</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tables\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Performance\">《Performance》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Parent Child Relationship Query",
      "url": "https://freesql.net/en/guide/Parent-Child-Relationship-Query.html",
      "id": "https://freesql.net/en/guide/Parent-Child-Relationship-Query.html",
      "summary": "Unlimited classification (father and child) is a commonly used table design. Each design method highlights advantages but also brings defects, such as: Way 1：There is only the p...",
      "content_html": "<h1> Parent Child Relationship Query</h1>\n<p>Unlimited classification (father and child) is a commonly used table design. Each design method highlights advantages but also brings defects, such as:</p>\n<ul>\n<li>Way 1：There is only the <code>parent_id</code> field in the table design, which is <strong>troublesome</strong>: query trouble (this article can solve it).</li>\n<li>Way 2：The redundant child id in the table design is easy to query, and it is <strong>troublesome</strong>: it needs to be recalculated when insert/update/delete;</li>\n<li>Way 3：The left and right value codes are stored in the table design, <strong>troublesome</strong>: the same as above;</li>\n</ul>\n<p>Way 1: The design is the simplest. This article solves its recursive query problem and makes the use transparent.</p>\n<h2> Parent-child Navigation Properties</h2>\n<p>Among the FreeSql navigation properties, there are settings for the parent-child relationship, as follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Define the Parent property, in the expression can be like this:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Define the Childs attribute, in the expression (subquery):</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>To define the Childs property, you can also use <a href=\"Cascade-Saving\">Cascade Saving</a>, <a href=\"Greed-Loading\">Greed Loading</a> and so on.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> ToTreeList</h2>\n<p>After configuring the parent-child properties, you can use it like this:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>The query data is originally flat. The <code>ToTreeList</code> method processes the returned flat data into a tree list in memory and returns it.</p>\n<h2> Delete Recursively - AsTreeCte</h2>\n<p>Very common infinite level classification table function, when deleting a tree node, the child nodes are also processed.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>If logically delete:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Query Recursively - AsTreeCte</h2>\n<p>If you do not design an infinite level classification table with data redundancy, recursive query is essential. <code>AsTreeCte</code> is the package for solving recursive query. Method parameters description:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(Optional) pathSelector</td>\n<td>Path content selection, you can set the query to return: <code>中国 -&gt; 北京 -&gt; 东城区</code></td>\n</tr>\n<tr>\n<td>(Optional) up</td>\n<td><em>false</em> (default): recursive query from parent to child; <br><em>true</em>: recursive query from child to parent</td>\n</tr>\n<tr>\n<td>(Optional) pathSeparator</td>\n<td>Set the connector of <code>pathSelector</code>, default: <code>-&gt;</code></td>\n</tr>\n<tr>\n<td>(Optional) level</td>\n<td>Set recursion level</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Databases that have passed the test: MySql8.0, SqlServer, PostgreSQL, Oracle, Sqlite, Firebird, 达梦, 人大金仓, 神舟通用, 南大通用, 翰高, MSAccess And ClickHouse.</p>\n</blockquote>\n<p>Practice 1: AsTreeCte() + ToTreeList</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Practice 2: AsTreeCte() + ToList</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Practice 3: AsTreeCte(pathSelector) + ToList</p>\n<p>After setting the <code>pathSelector</code> parameter, how to return the hidden field?</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>More practice...please try according to the code comments.</p>\n</blockquote>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tablea\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Performance\">《Performance》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-05-04T16:21:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Query Data",
      "url": "https://freesql.net/en/guide/Query-Data.html",
      "id": "https://freesql.net/en/guide/Query-Data.html",
      "summary": "FreeSql has made great efforts in querying data, especially the functions such as chain query syntax, multi-table query, expression function, etc. 《Paging Query》 (Pagination); 《...",
      "content_html": "<h1> Query Data</h1>\n<p>FreeSql has made great efforts in querying data, especially the functions such as chain query syntax, multi-table query, expression function, etc.</p>\n<ul>\n<li><a href=\"Pagination\">《Paging Query》</a></li>\n<li><a href=\"Query-from-Single-Table\">《Query from Single Table》</a></li>\n<li><a href=\"Query-from-Multi-Table\">《Query from Multi Tables》</a></li>\n<li><a href=\"Grouped-Aggregate-Query\">《Grouped Aggregate Query》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Using-Read-Write-Separation\">《Using Read/Write Separation》</a></li>\n<li><a href=\"Performance\">《Performance》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n<h2> Special introduction to WhereDynamicFilter</h2>\n<p>The <code>ISelect.WhereDynamicFilter</code> method implements dynamic filter conditions (interacting with the front-end), supported operators:</p>\n<ul>\n<li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith: include/not include, <code>like'%xx%'</code>, or <code>like'xx%'</code>, or <code>like'%xx'</code></li>\n<li>Equal/NotEqual</li>\n<li>GreaterThan/GreaterThanOrEqual</li>\n<li>LessThan/LessThanOrEqual</li>\n<li>Range: Range query</li>\n<li>DateRange: date range, with special processing value[1] + 1</li>\n<li>Any/NotAny: Does it match any item in <code>value</code> (to put it bluntly, <code>SQL IN</code>)</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Dynamic sorting: <code>ISelect.OrderByPropertyName(\"Parent.Code\")</code></p>\n</blockquote>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th>Return</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>Return the SQL statement to be executed</td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>Execute SQL query and return the records of all fields of the <code>T1</code> entity. If there are navigation properties, they will be queried and returned together. If the record does not exist, it will return a list with <code>Count</code> being <code>0</code></td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>Execute SQL query, return the record of the specified field, if the record does not exist, return the list with <code>Count</code> as <code>0</code></td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>Execute SQL query, return the record of the field specified by field, and receive it as a tuple or basic type (int, string, long). If the record does not exist, return a list with <code>Count</code> as <code>0</code></td>\n</tr>\n<tr>\n<td>ToOne</td>\n<td>T1</td>\n<td></td>\n<td>Execute SQL query and return the first record of all fields of the <code>T1</code> entity, or <code>null</code> if the record does not exist</td>\n</tr>\n<tr>\n<td>ToAggregate&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>Lambda</td>\n<td>Execute SQL query and return the aggregated result of the specified field (suitable for scenarios where <code>GroupBy</code> is not needed)</td>\n</tr>\n<tr>\n<td>Any</td>\n<td>bool</td>\n<td></td>\n<td>Execute SQL query, if there are records, return true, otherwise return false.</td>\n</tr>\n<tr>\n<td>Sum</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column and calculate the sum.</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column and calculate the minimum value.</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column and calculate the maximum value.</td>\n</tr>\n<tr>\n<td>Avg</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column, calculate the average value.</td>\n</tr>\n<tr>\n<td>【Pagination】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>long</td>\n<td></td>\n<td>The number of queried records</td>\n</tr>\n<tr>\n<td>Count</td>\n<td>&lt;this&gt;</td>\n<td>out long</td>\n<td>The number of queried records, returned in the form of parameter <code>out</code></td>\n</tr>\n<tr>\n<td>Skip</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>Query the number of rows shifted backward</td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>&lt;this&gt;</td>\n<td>int offset</td>\n<td>Query the number of rows shifted backward</td>\n</tr>\n<tr>\n<td>Limit</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>Query a specified amount of data</td>\n</tr>\n<tr>\n<td>Take</td>\n<td>&lt;this&gt;</td>\n<td>int limit</td>\n<td>Query a specified amount of data</td>\n</tr>\n<tr>\n<td>Page</td>\n<td>&lt;this&gt;</td>\n<td>int pageIndex, int pageSize</td>\n<td>Pagination</td>\n</tr>\n<tr>\n<td>【Where】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Supports multi-table query expressions, multiple use is equivalent to <code>AND</code>.</td>\n</tr>\n<tr>\n<td>WhereIf</td>\n<td>&lt;this&gt;</td>\n<td>bool, Lambda</td>\n<td>Support multi-table query expression</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Native Sql syntax conditions, <code>Where(\"id = @id\", new {id = 1 })</code> Note that the prefix <code>@</code> will be <a href=\"ActiveX-Data-Objects#parameterization\">determined according to the specific database</a></td>\n</tr>\n<tr>\n<td>WhereIf</td>\n<td>&lt;this&gt;</td>\n<td>bool, string, parms</td>\n<td>Native Sql syntax conditions, <code>WhereIf(true, \"id = @id\", new {id = 1 })</code> Note that the prefix <code>@</code> will be <a href=\"ActiveX-Data-Objects#parameterization\">determined according to the specific database</a></td>\n</tr>\n<tr>\n<td>WhereCascade</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>When querying multiple tables, add conditions to each table.</td>\n</tr>\n<tr>\n<td>WhereDynamicFilter</td>\n<td>&lt;this&gt;</td>\n<td>DynamicFilterInfo</td>\n<td>Dynamic filter conditions (interact with the front end)</td>\n</tr>\n<tr>\n<td>【Group】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Group by selected column, <code>GroupBy(a =&gt; a.Name)</code></td>\n</tr>\n<tr>\n<td>GroupBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Group by native sql syntax <code>GroupBy(\"concat(name, @cc)\", new { cc = 1 })</code>. Note that the prefix <code>@</code> will be <a href=\"ActiveX-Data-Objects#parameterization\">determined according to the specific database</a></td>\n</tr>\n<tr>\n<td>Having</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Filter by aggregation conditions of native sql syntax <code>Having(\"count(name) = @cc\", new { cc = 1 })</code>. Note that the prefix <code>@</code> will be <a href=\"ActiveX-Data-Objects#parameterization\">determined according to the specific database</a></td>\n</tr>\n<tr>\n<td>Distinct</td>\n<td>&lt;this&gt;</td>\n<td></td>\n<td><code>.Distinct().ToList(x =&gt; x.GroupName)</code> is to perform <code>DISTINCT</code> for the specified field.</td>\n</tr>\n<tr>\n<td>【Order】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OrderBy</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Sort by column, <code>OrderBy(a =&gt; a.Time)</code>, can be used multiple times</td>\n</tr>\n<tr>\n<td>OrderByDescending</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>按列倒向排序，OrderByDescending(a =&gt; a.Time)</td>\n</tr>\n<tr>\n<td>OrderBy</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>按原生sql语法排序，OrderBy(\"count(name) + @cc\", new { cc = 1 })</td>\n</tr>\n<tr>\n<td>OrderByPropertyName</td>\n<td>string, bool</td>\n<td></td>\n<td>Sort by attribute name string (support navigation attributes)</td>\n</tr>\n<tr>\n<td>【Join】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>LeftJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Left-join query, you can use navigation properties, or specify the associated entity type</td>\n</tr>\n<tr>\n<td>InnerJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Inner-join query, you can use navigation properties, or specify the associated entity type</td>\n</tr>\n<tr>\n<td>RightJoin</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Right-join query, you can use navigation properties, or specify the associated entity type</td>\n</tr>\n<tr>\n<td>LeftJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Left-join query, using native sql syntax, <code>LeftJoin(\"type b on b.id = a.id and b.clicks&gt; @clicks\", new {clicks = 1 })</code></td>\n</tr>\n<tr>\n<td>InnerJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Inner-join query, using native sql syntax, <code>InnerJoin(\"type b on b.id = a.id and b.clicks &gt; @clicks\", new { clicks = 1 })</code></td>\n</tr>\n<tr>\n<td>RightJoin</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Right-join query, using native sql syntax, <code>RightJoin(\"type b on b.id = a.id and b.clicks &gt; @clicks\", new { clicks = 1 })</code></td>\n</tr>\n<tr>\n<td>From</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Multi-table query, more than 3 tables will be very convenient to use (currently supports up to 10 tables by design)</td>\n</tr>\n<tr>\n<td>【Other】</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>As</td>\n<td>&lt;this&gt;</td>\n<td>string alias = \"a\"</td>\n<td>Specify alias</td>\n</tr>\n<tr>\n<td>Master</td>\n<td>&lt;this&gt;</td>\n<td></td>\n<td>Specify query from the main database (default query from the slave database)</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>Command timeout setting (seconds)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>Set the transaction object</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>Set the connection object</td>\n</tr>\n<tr>\n<td>WithLock</td>\n<td>&lt;this&gt;</td>\n<td>Enum</td>\n<td>Specific settings such as SqlServer <code>NoLock</code></td>\n</tr>\n<tr>\n<td>ForUpdate</td>\n<td>&lt;this&gt;</td>\n<td>bool</td>\n<td>Exclusive update lock, adapted to different databases, see notes for details</td>\n</tr>\n<tr>\n<td>AsQueryable</td>\n<td>IQueryable</td>\n<td></td>\n<td>Convert <code>ISelect</code> to <code>IQueryable</code>. This method is mainly used for extensions, for example: Abp's <code>IRepository GetAll()</code> interface method needs to return an <code>IQueryable</code> object. Note: <code>IQueryable</code> method is more polluted, please try to avoid this conversion.</td>\n</tr>\n<tr>\n<td>InsertInto</td>\n<td>int</td>\n<td>string, Lambda</td>\n<td>Convert the query to <code>INSERT INTO tableName SELECT ... FROM t</code> and perform the insert.</td>\n</tr>\n<tr>\n<td>ToUpdate</td>\n<td>IUpdate&lt;TEntity&gt;</td>\n<td>-</td>\n<td>Convert the query to <code>IUpdate&lt;TEntity&gt;</code></td>\n</tr>\n<tr>\n<td>ToDelete</td>\n<td>IDelete&lt;TEntity&gt;</td>\n<td>-</td>\n<td>Convert the query to <code>IDelete&lt;TEntity&gt;</code></td>\n</tr>\n<tr>\n<td>ToTreeList</td>\n<td>List&lt;TEntity&gt;</td>\n<td>-</td>\n<td>Return the data of the parent-child relationship in the form of a TreeList</td>\n</tr>\n<tr>\n<td>AsTreeCte</td>\n<td>ISelect</td>\n<td>(up, pathSelector, level)</td>\n<td>Recursively query the parent-child relationship table</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Query from Multi Tables",
      "url": "https://freesql.net/en/guide/Query-from-Multi-Table.html",
      "id": "https://freesql.net/en/guide/Query-from-Multi-Table.html",
      "summary": "1. Navigation Property Table Tip: After the navigation relationship (Entity-Relationship) is configured correctly, you no longer need to manually call LeftJoin. 2. Complex multi...",
      "content_html": "<h1> Query from Multi Tables</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 1. Navigation Property Table</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Tip: After <a href=\"Entity-Relationship\">the navigation relationship</a> is configured correctly, you no longer need to manually call <code>LeftJoin</code>.</p>\n</blockquote>\n<h2> 2. Complex multi-table join</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Experience: <a href=\"https://github.com/dotnetcore/FreeSql/issues/430\" target=\"_blank\" rel=\"noopener noreferrer\">One-to-many, only the last record is taken from the associated table </a></p>\n</blockquote>\n<h2> 3. WithSql</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Tip: <code>ISelect.ToSql</code> can be used with <code>WithSql</code></p>\n</blockquote>\n<h2> 4. SQL join table</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Extended question: How to specify the fields of the SQL join table <code>b</code> in <code>ToList</code>?</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5. Subtable: Exists</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Tip: Since the entity class of the subquery is the same as the upper layer, use <code>As(\"b\")</code> to specify the alias to distinguish.</p>\n</blockquote>\n<h2> 6. Subtable: In</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7. Subtable: Join</h2>\n<p>Since version 1.8.0, <code>string.Join</code> + <code>ToList</code> can concatenate the results of multiple rows of sub-queries into one string, such as: \"1,2,3,4\":</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Tip: The subquery <code>string.Join</code> + <code>ToList</code> is adapted to sqlserver/pgsql/oracle/mysql/sqlite/firebird/Dameng/KingbaseES/翰高<a href=\"https://github.com/dotnetcore/FreeSql/issues/405\" target=\"_blank\" rel=\"noopener noreferrer\">#405</a></p>\n</blockquote>\n<h2> 8. Subtable: First/Count/Sum/Max/Min/Avg</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9. AsSelect</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>The effect is equivalent to:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Quickly convert the collection properties to <code>ISelect</code> for sub-query operations.</p>\n<h2> 10. WhereCascade</h2>\n<p>When querying multiple tables, it is troublesome to add conditions to each table like <code>ISelect</code>, and <code>WhereCascade</code> came into being. After using <code>WhereCascade</code>, when SQL is generated, all tables will be attached to this condition.</p>\n<p>Such as:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>The SQL obtained is:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>It will only take effect when the entity can attach expressions, and supports sub-table query. The more tables used in a single query, the greater the benefits.</p>\n<p>Applicable to:</p>\n<ul>\n<li>Subqueries, one-to-many, many-to-many, and custom sub-queries;</li>\n<li>Join query, navigation properties, custom Join query;</li>\n<li>Include/<a href=\"Lazy-Loading#2-Navigation-Property-OneToManyManyToMany\">IncludeMany</a> sub-collection query;</li>\n</ul>\n<blockquote>\n<p>The propagation of <strong>Lazy Property</strong> is temporarily not supported;</p>\n</blockquote>\n<blockquote>\n<p>This function is different from <strong>Filter</strong>, this function is used for the propagation of single multi-table query conditions;</p>\n</blockquote>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Performance\">《Performance》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Query from Single Table",
      "url": "https://freesql.net/en/guide/Query-from-Single-Table.html",
      "id": "https://freesql.net/en/guide/Query-from-Single-Table.html",
      "summary": "Single Table WithSql When WithSql is used multiple times, it will be converted to UNION ALL query Reference 《Query from Multi Tables》 (Query-from-Multi-Tables); 《Return Data》 (R...",
      "content_html": "<h1> Query from Single Table</h1>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Single Table</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> WithSql</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>When <code>WithSql</code> is used multiple times, it will be converted to <code>UNION ALL</code> query</p>\n</blockquote>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tables\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Performance\">《Performance》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Repository Layer",
      "url": "https://freesql.net/en/guide/Repository-Layer.html",
      "id": "https://freesql.net/en/guide/Repository-Layer.html",
      "summary": "As an extension, FreeSql.Repository realizes the functions of the common DAL. There is a certain standard definition for the repository layer. FreeSql.Repository refers to the i...",
      "content_html": "<h1> Repository Layer</h1>\n<p>As an extension, FreeSql.Repository realizes the functions of the common DAL. There is a certain standard definition for the repository layer. FreeSql.Repository refers to the interface design of Abp vNext, defines and implements the basic repository layer for CURD operations.</p>\n<h2> Features</h2>\n<ul>\n<li><code>Select/Attach</code>: Snapshot object, the corresponding <code>Update</code> only updates the changed fields.</li>\n<li><code>Insert</code>: Insert data, adapt to each database to optimize execution <code>ExecuteAffrows</code>, <code>ExecuteIdentity</code> or <code>ExecuteInserted</code>;</li>\n<li><code>InsertOrUpdate</code>: Insert or update data.</li>\n<li><code>SaveMany</code>: Quickly save navigation objects (one-to-many, many-to-many).</li>\n</ul>\n<h2> Install</h2>\n<p>Situation 1: .NET Core or .NET 5.0+</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Situation 2、.NET Framework</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> Declaring</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Usage</h2>\n<p>Method 1. The extension method of IFreeSql</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>Note: Repository objects are not safe under multiple threads, so you should not operate them on multiple threads at the same time.</p>\n</blockquote>\n<ul>\n<li>Does not support using the same repository instance in different threads at the same time</li>\n</ul>\n<p>Method 2. Inheritance</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Method 3: Dependency Injection</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Dependency injection can realize the global setting of <strong>filtering and verification</strong>, which is convenient for the design of tenant functions.</p>\n</blockquote>\n<p>For more information: <a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></p>\n<h2> State Management</h2>\n<p>Only update the changed properties:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Or further streamline:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Filtering and Verification</h2>\n<p>Suppose we have two entities: <code>User</code> and <code>Topic</code>, and two repositories are defined in the domain class:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>In practice, we always worry about the data security of <code>topicRepository</code>, that is, it is possible to query or change the topic of other users. Therefore, we have made improvements in the v0.0.7 version, adding the filter lambda expression parameter.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Attach this condition when querying/modifying/deleting, so that the data of other users will not be modified.</li>\n<li>When adding, use expressions to verify the legality of the data, if not legal, an exception will be thrown.</li>\n</ul>\n<h2> Sharding Tables and Database</h2>\n<p>FreeSql provides a basic method of sharding tables through <code>AsTable</code>. As a distributed repository, and <code>GuidRepository</code> as a distributed storage, realizes the encapsulation of sharding tables and database (cross-server sharding-database is not supported).</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>Above we got a log repository, which corresponds to the shareding-table by year and month. Using CURD operation will finally take effect in the <code>Log_201903</code> table.</p>\n<p>Notice:</p>\n<ul>\n<li>Versions after v0.11.12 can use CodeFirst to migrate sharding tables.</li>\n<li>Do not use lazy loading in the entity type of sharding tables and database.</li>\n</ul>\n<h2> Compatibility Problems</h2>\n<p>The <code>output inserted</code> feature provided by SqlServer. When the table uses auto-increment or the database defines a default value, use this feature to quickly return the inserted data. PostgreSQL also has similar functions, but not every database supports it.</p>\n<p>When a database that does not support this feature (Sqlite/MySql/Oracle/Damen/MsAccess) is used, and the entity uses auto-increment attributes, the batch insertion of the repository will be executed one by one. The following improvements can be considered:</p>\n<ul>\n<li>Use uuid as the primary key (ie Guid).</li>\n<li>Avoid using the default value function of the database.</li>\n</ul>\n<h2> Cascade Saving</h2>\n<p>Please view the documentation of <a href=\"Cascade-Saving\">Cascade Saving</a>.</p>\n<h2> APIs</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EntityType</td>\n<td>Type</td>\n<td>The entity type that the repository is operating. Note that it is not necessarily <code>TEntity</code></td>\n</tr>\n<tr>\n<td>UnitOfWork</td>\n<td>IUnitOfWork</td>\n<td>Unit of work currently in use</td>\n</tr>\n<tr>\n<td>Orm</td>\n<td>IFreeSql</td>\n<td>ORM currently in use</td>\n</tr>\n<tr>\n<td>DbContextOptions</td>\n<td>DbContextOptions</td>\n<td>DbContext settings currently in use，modifying the DbContextOptions will not affect other repository.</td>\n</tr>\n<tr>\n<td>DataFilter</td>\n<td>IDataFilter&lt;TEntity&gt;</td>\n<td>Repository Filter, valid in this object</td>\n</tr>\n<tr>\n<td>Select</td>\n<td>ISelect&lt;TEntity&gt;</td>\n<td>Prepare to query data</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Return</th>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AsType</td>\n<td>void</td>\n<td>Type</td>\n<td>Change the type of entity that the repository is operating</td>\n</tr>\n<tr>\n<td>Get</td>\n<td>TEntity</td>\n<td>TKey</td>\n<td>Query data by the primary key</td>\n</tr>\n<tr>\n<td>Find</td>\n<td>TEntity</td>\n<td>TKey</td>\n<td>Query data by the primary key</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>TKey</td>\n<td>Delete data by the primary key</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>Lambda</td>\n<td>Delete data by lambda conditions</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>TEntity</td>\n<td>Query entity</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>int</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>Delete data in bulk</td>\n</tr>\n<tr>\n<td>DeleteCascadeByDatabase</td>\n<td>List&lt;object&gt;</td>\n<td>Lambda</td>\n<td>Recursively delete data from the database according to navigation attributes</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>-</td>\n<td>TEntity</td>\n<td>Insert data, if the entity has an auto-increment column, the auto-increment after insertion will be filled into the entity</td>\n</tr>\n<tr>\n<td>Insert</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>Insert data in bulk</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>-</td>\n<td>TEntity</td>\n<td>Update entity</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>Update data in bulk</td>\n</tr>\n<tr>\n<td>InsertOrUpdate</td>\n<td>-</td>\n<td>TEntity</td>\n<td>Insert ot update data in bulk</td>\n</tr>\n<tr>\n<td>FlushState</td>\n<td>-</td>\n<td>-</td>\n<td>Clear status information</td>\n</tr>\n<tr>\n<td>Attach</td>\n<td>-</td>\n<td>TEntity</td>\n<td>Attach entities to state management, which can be used to update or delete without querying</td>\n</tr>\n<tr>\n<td>Attach</td>\n<td>-</td>\n<td>IEnumerable&lt;TEntity&gt;</td>\n<td>Batch attach entities to state management</td>\n</tr>\n<tr>\n<td>AttachOnlyPrimary</td>\n<td>-</td>\n<td>TEntity</td>\n<td>Only attach the primary key data of the entity to the state management</td>\n</tr>\n<tr>\n<td><a href=\"Cascade-Saving#many-to-many-cascade-saving\">SaveMany</a></td>\n<td>-</td>\n<td>TEntity, string</td>\n<td>Save the specified many-to-many or one-to-many navigation properties of the entity (full comparison)</td>\n</tr>\n<tr>\n<td><a href=\"Insert-or-Update#3-batch-editing-beginedit\">BeginEdit</a></td>\n<td>-</td>\n<td>List&lt;TEntity&gt;</td>\n<td>Start editing the data of a set of entities</td>\n</tr>\n<tr>\n<td>EndEdit</td>\n<td>int</td>\n<td>-</td>\n<td>After a set of data is edited, save it</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>State management can realize that <code>Update</code> only updates the changed fields (not all fields), and it is very comfortable to use <code>Attach</code> and <code>Update</code> flexibly.</p>\n</blockquote>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Insert-Data\">《FreeSql 101, Part 1: Insert Data》</a></li>\n<li><a href=\"Delete-Data\">《FreeSql 101, Part 2: Delete Data》</a></li>\n<li><a href=\"Update-Data\">《FreeSql 101, Part 3: Update Data》</a></li>\n<li><a href=\"Query-Data\">《FreeSql 101, Part 4: Query Data》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Aspect-Oriented-Programming\">《AOP》</a></li>\n<li><a href=\"Unit-of-Work\">《UnitOfWork》</a></li>\n<li><a href=\"Batabase-Context\">《DbContext》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-05-04T16:21:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Return Data",
      "url": "https://freesql.net/en/guide/Return-Data.html",
      "id": "https://freesql.net/en/guide/Return-Data.html",
      "summary": "FreeSql uses ExpressionTree to optimize the reading speed. If you know the technology, you must know that in addition to native code under .NETCore technology, the fastest are E...",
      "content_html": "<h1> Return Data</h1>\n<p>FreeSql uses ExpressionTree to optimize the reading speed. If you know the technology, you must know that in addition to native code under .NETCore technology, the fastest are Emit and ExpressionTree.</p>\n<p>At the beginning, we used Reflection + Cache. Although .NETCore optimized the reflection performance, after comparing the performance with Dapper, we found that there was still a certain gap. After we refactored to an implementation based on ExpresstionTree, our performance was comparable to Dapper.</p>\n<p>FreeSql supports many types, and the complexity of implementing ExpressionTree is relatively large. If developers are interested in this, you can browse the source code.</p>\n<h2> Return a Single Record</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>The FreeSql convention is that <code>ToOne</code>/<code>First</code> will always return null or entity object with data, and <code>ToList</code> will always return a non-null List&lt;entity type&gt;</p>\n</blockquote>\n<h2> Return List</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> Return TreeList</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>The query data will be processed into a tree type.</p>\n</blockquote>\n<p>Note: the entity needs to be configured with parent-child navigation properties</p>\n<h2> Return List with Navigation Property Data</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>At this time, the common field of <code>Topic</code> and the <code>Type</code> field of navigation property will be queried</p>\n</blockquote>\n<h2> Return the Specify Field</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>In the early constant mechanism, we left it to raw SQL. If you really need to return the string, you can write: \"'xxx'\"</p>\n</blockquote>\n<h2> Ignore the Specified Field When Returning</h2>\n<p>Reference to: https://github.com/dotnetcore/FreeSql/issues/528</p>\n<h2> ToSql</h2>\n<p>All <code>ToList</code> can use <code>ToSql</code> to return SQL string. There are two options:</p>\n<ul>\n<li>FieldAliasOptions.AsIndex, the default option, automatically generates as1, as2, as3 .... etc. field aliases, which can prevent the problem of multiple tables with the same field.</li>\n<li>FieldAliasOptions.AsProperty, use the property name as the field alias, appropriately use the two-stage structure SQL and execute it again.</li>\n</ul>\n<h2> Executing SQL</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Note: The entity attributes of <code>Ado.Query</code> are invalid, for example, <code>[Column(Name = \"xxx\")]</code> is invalid</p>\n</blockquote>\n<h2> WithSql</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>When <code>WithSql</code> is used multiple times, <code>UNION ALL</code> query will be used</p>\n</blockquote>\n<h2> ToChunk</h2>\n<p>Execute queries and return data in blocks, which can reduce memory overhead. For example, if 100,000 pieces of data are read, 100 pieces of data are returned for processing each time.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Dto Mapping</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Please handle the difference carefully.</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>All methods of GroupBy are not applicable to DTO mapping rules</p>\n</blockquote>\n<p>This kind of mapping supports single table/multi-table, mapping before querying data (not to query all fields first and then to memory mapping).</p>\n<p>Searching rules, searching for property names, will loop the internal object <code>_tables</code> (it will grow after join query), and check the main table first until the same field is found.</p>\n<p>For example:</p>\n<p>Suppose A, B, and C all have id. When the queried Dto structure is: <code>Dto {id, a1, a2, b1, b2 }</code>, <code>A.id</code> is mapped. You can also specify the <code>id = C.id</code> mapping.</p>\n<blockquote>\n<p>Reminder: You can directly map a navigation property in DTO</p>\n</blockquote>\n<h2> API</h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Return</th>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>Return the SQL statement to be executed</td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>Execute a SQL query and return the records of all the fields of the T1 entity. If there are navigation properties, they will be queried and returned together. If the record does not exist, a list with Count of 0 will be returned.</td>\n</tr>\n<tr>\n<td>ToList&lt;Dto&gt;</td>\n<td>List&lt;Dto&gt;</td>\n<td>Lambda</td>\n<td>Execute SQL query, return the record of the specified field or Dto mapping, if the record does not exist, return the list with Count as 0.</td>\n</tr>\n<tr>\n<td>ToList&lt;T&gt;</td>\n<td>List&lt;T&gt;</td>\n<td>string field</td>\n<td>Execute SQL query, return the record of the field specified by field, and receive it as a tuple or basic type (int, string, long). If the record does not exist, return a list with Count of 0.</td>\n</tr>\n<tr>\n<td>ToOne</td>\n<td>T1</td>\n<td></td>\n<td>Execute SQL query and return the first record of all fields of the T1 entity, or null if the record does not exist.</td>\n</tr>\n<tr>\n<td>ToChunk</td>\n<td>&lt;空&gt;</td>\n<td>int size, Action&lt;FetchCallbackArgs&lt;List&lt;T1&gt;&gt;&gt; done</td>\n<td>Execute SQL query and return data in blocks, which can reduce memory overhead. For example, if 100,000 pieces of data are read, 100 pieces of data are returned for processing each time.</td>\n</tr>\n<tr>\n<td>Any</td>\n<td>bool</td>\n<td></td>\n<td>Execute SQL query to determine whether there is a record</td>\n</tr>\n<tr>\n<td>Sum</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to sum.</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to find the minimum.</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to find the maximum.</td>\n</tr>\n<tr>\n<td>Avg</td>\n<td>T</td>\n<td>Lambda</td>\n<td>Specify a column to average.</td>\n</tr>\n</tbody>\n</table>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Query-from-Multi-Tablea\">《Query from Multi Tables》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Linq-to-Sql\">《LinqToSql》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Performance\">《Performance》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-05-23T02:38:02.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Unit of Work Manager",
      "url": "https://freesql.net/en/guide/Unit-of-Work-Manager.html",
      "id": "https://freesql.net/en/guide/Unit-of-Work-Manager.html",
      "summary": "Use FreeSql's repository transaction in ASP.NET Core Step 1: Configure Startup.cs Install NuGet packages: Configure Startup.cs: Update your appsettings.json: UnitOfWorkManager M...",
      "content_html": "<h1> Unit of Work Manager</h1>\n<h2> Use FreeSql's repository transaction in ASP.NET Core</h2>\n<h4> Step 1: Configure Startup.cs</h4>\n<p>Install NuGet packages:</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Configure <code>Startup.cs</code>:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Update your <code>appsettings.json</code>:</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>UnitOfWorkManager Members</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IUnitOfWork Current</td>\n<td>Return the current unit of work</td>\n</tr>\n<tr>\n<td>void Binding(repository)</td>\n<td>Hand over repository transaction to ir for management</td>\n</tr>\n<tr>\n<td>IUnitOfWork Begin(propagation, isolationLevel)</td>\n<td>Create unit of work</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>TransBlogService.cs</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>IUnitOfWork Members</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IFreeSql Orm</td>\n<td>The object Select/Delete/Insert/Update/InsertOrUpdate is consistent with the unit of work transaction and can be omitted to pass WithTransaction</td>\n</tr>\n<tr>\n<td>DbTransaction GetOrBeginTransaction()</td>\n<td>Open the transaction, or return to the opened transaction</td>\n</tr>\n<tr>\n<td>void Commit()</td>\n<td>Commit transaction</td>\n</tr>\n<tr>\n<td>void Rollback()</td>\n<td>Rollback transaction</td>\n</tr>\n<tr>\n<td>DbContext.EntityChangeReport EntityChangeReport</td>\n<td>Entity change tracking within the unit of work</td>\n</tr>\n</tbody>\n</table>\n<h4> Complete code</h4>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.Core/Domain/Blog.cs\" target=\"_blank\" rel=\"noopener noreferrer\">Blog.cs</a></li>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.Core/Domain/Tag.cs\" target=\"_blank\" rel=\"noopener noreferrer\">Tag.cs</a></li>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.FreeSql.AutoFac.DynamicProxy/Services/TransBlogService.cs\" target=\"_blank\" rel=\"noopener noreferrer\">TransBlogService.cs</a></li>\n</ul>\n<p>The above uses generic repository.</p>\n<p>If you want to rewrite a repository, how do you keep the same transaction as <code>UnitOfWorkManager</code>? You can inherit the existing <code>DefaultRepository&lt;,&gt;</code> and implement a custom repository <code>BlogRepository.cs</code>:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>The interface is <code>IBlogRepository.cs</code>:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Inject this service in <code>startup.cs</code></p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Unit of Work",
      "url": "https://freesql.net/en/guide/Unit-of-Work.html",
      "id": "https://freesql.net/en/guide/Unit-of-Work.html",
      "summary": "Unit of work can put multiple repositories into one unit for internal management and execution, and finally execute all operations through Commit. Unit of work internally uses d...",
      "content_html": "<h1> Unit of Work</h1>\n<p>Unit of work can put multiple repositories into one unit for internal management and execution, and finally execute all operations through <code>Commit</code>. Unit of work internally uses database transactions.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Usage</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Reference: <a href=\"https://github.com/dotnetcore/FreeSql/issues/289\" target=\"_blank\" rel=\"noopener noreferrer\">Use TransactionalAttribute + UnitOfWorkManager in ASP.NET Core to achieve multiple transaction propagation</a></p>\n<h2> Interface Definition</h2>\n<p>The <code>uow.GetOrBeginTransaction()</code> method can get the transaction object.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Entity Changing Event</h2>\n<p>Global Settings:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Individual Settings:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>The parameter <code>report</code> is a list collection, and the type of the collection elements is defined as follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>Type of Change</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Insert</td>\n<td>The entity object is inserted</td>\n</tr>\n<tr>\n<td>Update</td>\n<td>The entity object is updated</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>The entity object is deleted</td>\n</tr>\n<tr>\n<td>SqlRaw</td>\n<td>SQL statement executed</td>\n</tr>\n</tbody>\n</table>\n<p>SqlRaw currently has two special features:</p>\n<ul>\n<li>When the navigation properties are updated in the many-to-many cascade, delete the relevant data in the intermediate table.</li>\n<li>The common repository <code>BaseRepository</code> has a Delete method, and the parameter is an expression, not an entity.</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>DbContext.SaveChanges</code> or Repository's Insert/Update/Delete method of the entity, or <code>UnitOfWork.Commit</code> operation will trigger this event at most once.</p>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n<li><a href=\"Using-Read-Write-Separation\">《Using Read/Write Separation》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Aspect-Oriented-Programming\">《AOP》</a></li>\n<li><a href=\"Batabase-Context\">《DbContext》</a></li>\n</ul>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2021-11-21T08:13:16.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Update",
      "url": "https://freesql.net/en/guide/Update-Data.html",
      "id": "https://freesql.net/en/guide/Update-Data.html",
      "summary": "FreeSql provides a variety of database update functions. It supports single or batch updates, and can also return updated records when executed in a specific database. Dynamic C...",
      "content_html": "<h1> Update</h1>\n<p>FreeSql provides a variety of database update functions. It supports single or batch updates, and can also return updated records when executed in a specific database.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Dynamic Conditions</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>dywhere</code> supports:</p>\n<ul>\n<li>Primary key</li>\n<li><code>new[] { PrimaryKey1, PrimaryKey2 }</code></li>\n<li>Topic Object</li>\n<li><code>new[] { TopicObject1, TopicObject2 }</code></li>\n<li><code>new { id = 1 }</code></li>\n</ul>\n<h2> 1. Update the specified column</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Support multiple calls to <code>Set()</code>, which is equivalent to splicing Sql statements.</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2. Update Conditions</h2>\n<blockquote>\n<p>In addition to the <code>dywhere</code> parameter described above, it also supports the <code>Where lambda/sql</code> method</p>\n</blockquote>\n<blockquote>\n<p>For safety reasons, when there are no conditions, the update action will not be executed to avoid updating the entire table data by mistake. Update the entire table data: <code>fsql.Update&lt;T&gt;().Where(\"1=1\").Set(a =&gt; a.Xxx == xxx).ExecuteAffrows()</code></p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3. Update the Entity</h2>\n<p>Method 1: (recommended)</p>\n<blockquote>\n<p>Only update the changed properties (depend on <code>FreeSql.Repository</code> package)</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Do you think it’s verbose to query first and then update?</p>\n</blockquote>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Method 2: (Original)</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>After the specified <code>Set</code> column is updated, <code>SetSource</code> will become invalid</p>\n</blockquote>\n<h2> 4. Custom SQL</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5. Update According to the DTO</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6. The difference between Set, SetSource and SetDto</h2>\n<p>The three of them are functions of the same level, corresponding to:</p>\n<ul>\n<li>\n<p><code>Set/SetRaw</code> is used when the entity is known, corresponding to <code>update t set x = x</code></p>\n</li>\n<li>\n<p><code>SetSource</code> updates the entire entity, you can use <code>UpdateColumns</code> and/or <code>IgnoreColumns</code> to specify or ignore fields</p>\n</li>\n<li>\n<p><code>SetDto</code> is a batch operation of <code>Set</code></p>\n</li>\n</ul>\n<h2> 7、Dictionary Update</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 8. Optimistic Lock</h2>\n<p>When updating the entire entity data, it is very easy to cause the old data to update the new record in the case of concurrency.</p>\n<p>The principle of optimistic locking: use a certain field of the entity, such as <code>long version</code>. Query the data before updating, and then <code>version</code> is <code>1</code>. The SQL generated during the update will append <code>where version = 1</code>, and an exception (DbUpdateVersionException) will be thrown when the modification fails (ie, <code>Affrows == 0</code>).</p>\n<p>Each entity only supports one optimistic lock attribute, mark the attribute before the property: <code>[Column(IsVersion = true)]</code>.</p>\n<blockquote>\n<p>Applicable to SetSource update, the value of <code>version</code> will increase by <code>1</code> each time it is updated.</p>\n</blockquote>\n<h2> 9. Pessimistic Lock</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>ForUpdate</code> is a common way of writing in Oracle/PostgreSQL/MySql. We have made a special adaptation to SqlServer. The SQL statements executed are roughly as follows:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 10. Advanced Update: <code>ISelect.ToUpdate</code></h2>\n<p><code>IUpdate</code> does not support navigation objects, multi-table association, etc. by default. <code>ISelect.ToUpdate</code> can convert the query to <code>IUpdate</code> to update the data using the navigation object, as follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Note: This method is not to query the data to the memory and then update, the above code produces the following SQL execution:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>The benefits of using this program for dang complex update:</p>\n<ul>\n<li>Data can be previewed before updating to prevent wrong update operations;</li>\n<li>Support complex update operations, for example: Use <code>Limit(10)</code> on <code>ISelect</code> to update the first 10 records that meet the conditions;</li>\n</ul>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Database-Transaction\">《Database Transaction》</a></li>\n<li><a href=\"Insert-Data\">《FreeSql 101, Part 1: Insert Data》</a></li>\n<li><a href=\"Delete-Data\">《FreeSql 101, Part 2: Delete Data》</a></li>\n<li><a href=\"Query-Data\">《FreeSql 101, Part 4: Query Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Unit-of-Work\">《UnitOfWork》</a></li>\n</ul>\n<h1> API</h1>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th>Return</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SetSource</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>Update data, set updated entity</td>\n</tr>\n<tr>\n<td>IgnoreColumns</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Ignored columns</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>&lt;this&gt;</td>\n<td>Lambda, value</td>\n<td>Set the new value of the column <code>Set(a =&gt; a.Name, \"newvalue\")</code></td>\n</tr>\n<tr>\n<td>Set</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Set the new value of the column based on the original value  <code>Set(a =&gt; a.Clicks + 1)</code>, which is equivalent to <code>clicks=clicks+1</code></td>\n</tr>\n<tr>\n<td>SetDto</td>\n<td>&lt;this&gt;</td>\n<td>object</td>\n<td>Update according to DTO</td>\n</tr>\n<tr>\n<td>SetRaw</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Set value, custom SQL syntax <code>SetRaw(\"title = @title\", new {title = \"newtitle\" })</code></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>Lambda</td>\n<td>Expression conditions, only support entity members (not including navigation objects)</td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>string, parms</td>\n<td>Raw SQL syntax conditions <code>Where(\"id = @id\", new {id = 1 })</code></td>\n</tr>\n<tr>\n<td>Where</td>\n<td>&lt;this&gt;</td>\n<td>T1 | IEnumerable&lt;T1&gt;</td>\n<td>Pass in the entity or collection, and use its primary key as the condition</td>\n</tr>\n<tr>\n<td>CommandTimeout</td>\n<td>&lt;this&gt;</td>\n<td>int</td>\n<td>Command timeout setting (seconds)</td>\n</tr>\n<tr>\n<td>WithTransaction</td>\n<td>&lt;this&gt;</td>\n<td>DbTransaction</td>\n<td>Set transaction object</td>\n</tr>\n<tr>\n<td>WithConnection</td>\n<td>&lt;this&gt;</td>\n<td>DbConnection</td>\n<td>Set the connection object</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>string</td>\n<td></td>\n<td>Return the SQL statement to be executed</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>long</td>\n<td></td>\n<td>Execute SQL statement and return the number of rows affected</td>\n</tr>\n<tr>\n<td>ExecuteUpdated</td>\n<td>List&lt;T1&gt;</td>\n<td></td>\n<td>Execute SQL statement and return the updated record</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-03-29T16:53:03.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "withsql",
      "url": "https://freesql.net/en/guide/With-Sql.html",
      "id": "https://freesql.net/en/guide/With-Sql.html",
      "summary": "Define entity class: Different query results: Return to DataTable.; Return List i.e. List tuple.; Return List and support paging.; Return List and support paging.; Return to Dat...",
      "content_html": "<h1> withsql</h1>\n<h1> Use Custom SQL Statements</h1>\n<p>Define entity class:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Different query results:</p>\n<ul>\n<li>Return to <code>DataTable</code>.</li>\n<li>Return <code>List&lt;Tuplue&gt;</code> i.e. <code>List&lt;(string,string)&gt;</code> tuple.</li>\n<li>Return <code>List&lt;object&gt;</code> and support paging.</li>\n<li>Return <code>List&lt;TestClassDto&gt;</code> and support paging.</li>\n</ul>\n<h3> Return to DataTable with specified columns</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Return to DataTable with all columns</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Return List&lt;Tuple&gt; (i.e. List&lt;(string, string)&gt;)</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Return List&lt;object&gt;</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Return List&lt;object&gt; and support paging</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Return List&lt;TestClassDto&gt; and support paging</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> WithSql+ ToSQL = Union ALL</h2>\n<h3> Two-Stage ISelect Query: Use WithSql Multiple Times to Convert to UNION ALL Query</h3>\n<p>After using <code>WithSql</code> multiple times, a query statement based on <code>UNION ALL</code> will be generated. So we can use <code>ISelect.ToSql(FieldAliasOptions.AsProperty)</code> to get the generated SQL as follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Cross Sub-Table Query: Wse AsTable for the Same Entity Multiple Times to Convert to UNION ALL Query</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Use ToSql to Splice New SQL Statements, And Use IAdo to Execute</h3>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Paging Problem</h2>\n<p>After using <code>UNION ALL</code>, there will be a problem if you paginate directly. Please see the specific example:</p>\n<p>There is a problem with using WithSql + Page multiple times: There is a paging statement in each WithSql</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>After multiple Sql statements are combined with WithSql (and a <code>UNION ALL</code> statement is generated), if you directly use the <code>Page</code> method for paging, it will cause a paging statement to be generated in each sub-table.</p>\n<p><code>WithSql</code> can realize the function of sub-table with <code>AsTable</code>. When querying across sub-tables, paging will take effect in each sub-table (that is, each SQL paging in WithSql).</p>\n<h3> Solution: Call WithSql Multiple Times</h3>\n<p>Call WithSql multiple times. If you need to paging, you need to follow the two steps below.</p>\n<ul>\n<li>Step 1: combine the two Sql statements into one by <code>WithSql</code>:</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>The above code will be generated as a Sql statement using <code>UNION ALL</code>:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Step 2: on the basis of the SQL statement containing <code>UNION ALL</code>, page by calling the <code>Page</code> method:</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-11-21T08:13:16.000Z",
      "date_modified": "2022-05-31T14:08:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Getting Started",
      "url": "https://freesql.net/en/guide/getting-started.html",
      "id": "https://freesql.net/en/guide/getting-started.html",
      "summary": "FreeSql is a powerful .NET ORM that supports all .NET Standard runtime platforms like .NET Framework 4.0+, .NET Core 2.1+ and Xamarin, etc. FreeSql supports MySql, SqlServer, Po...",
      "content_html": "<h1> Getting Started</h1>\n<p>FreeSql is a powerful <strong>.NET ORM</strong> that supports all <em>.NET Standard</em> runtime platforms like <em>.NET Framework 4.0+</em>, <em>.NET Core 2.1+</em> and <em>Xamarin</em>, etc.</p>\n<p>FreeSql supports MySql, SqlServer, PostgreSQL, Oracle, Sqlite, Firebird, Dameng, Shentong Database, Kingbase ES(V008R003), Hangao Database, ClickHouse, GBase and MsAccess.</p>\n<p>QQ Groups：4336577(full)、8578575(full)、<strong>52508226(available)</strong></p>\n<h2> Models</h2>\n<p>FreeSql uses a model to perform data access. The model is represented by an entity class to represent a database table or view for querying and saving data.</p>\n<p>The entity model can be generated from an existing database, and FreeSql provides the <code>IDbFirst</code> interface to <a href=\"DbFirst-Mode\">generate the entity model</a>.</p>\n<p>Or you can create the model manually, and then create or modify the database based on the model. FreeSql provides an API for the <code>ICodeFirst</code> synchronization structure (it can even be synchronized automatically during the development phase).</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Packages</h2>\n<p>FreeSql.Provider.XXX (<a href=\"Install\">Optional Providers</a>)</p>\n\n<h2> Declaring</h2>\n<blockquote>\n<p>Note: IFreeSql should be declared as a singleton in the project, not created every time it is used.</p>\n</blockquote>\n<ul>\n<li>.NET Core Singleton</li>\n</ul>\n\n<ul>\n<li><a href=\"https://github.com/dotnetcore/FreeSql/issues/44\" target=\"_blank\" rel=\"noopener noreferrer\">.NET Core injects multiple FreeSql instances</a></li>\n<li>.NET Framework Singleton</li>\n</ul>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Then when using it, use <code>fsql</code> directly through <code>IFreeSql fsql = DB.Sqlite;</code>.</p>\n<p>IFreeSql is the top-level object of ORM, and all operations use its methods or properties:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Migration</h2>\n<p>When the program is running, <code>FreeSql</code> will check the <code>AutoSyncStructure</code> parameter, and use this condition to determine whether to compare the changes between the entity and the database structure to achieve the purpose of automatic migration. For more information, please refer to the <a href=\"CodeFirst-Mode\">CodeFirst Documentation</a>.</p>\n<blockquote>\n<p>Note: Use this feature in a production environment with <strong>caution</strong>.</p>\n</blockquote>\n<blockquote>\n<p>Note: Use this feature in a production environment with <strong>caution</strong>.</p>\n</blockquote>\n<blockquote>\n<p>Note: Use this feature in a production environment with <strong>caution</strong>.</p>\n</blockquote>\n<h2> Query Data</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Insert Data</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Update Data</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Delete Data</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> FreeSqlBuilder</h1>\n<table>\n<thead>\n<tr>\n<th>Methods</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>UseConnectionString</td>\n<td>this</td>\n<td>Connection string</td>\n</tr>\n<tr>\n<td>UseSlave</td>\n<td>this</td>\n<td>Set up the slave database, support multipleslace databases.</td>\n</tr>\n<tr>\n<td>UseConnectionFactory</td>\n<td>this</td>\n<td>Set up a custom database connection object (abandon the built-in object connection pool technology)</td>\n</tr>\n<tr>\n<td>UseAutoSyncStructure</td>\n<td>this</td>\n<td><strong>[Recommended development environment]</strong> Automatically synchronize the entity structure to the database, and check entity creation or modification table structure during program operation</td>\n</tr>\n<tr>\n<td>UseNoneCommandParameter</td>\n<td>this</td>\n<td>Do not use command parameterized execution. for <code>Insert/Update</code>, you can also temporarily use <code>IInsert/IUpdate.NoneParameter()</code></td>\n</tr>\n<tr>\n<td>UseGenerateCommandParameterWithLambda</td>\n<td>this</td>\n<td>For lambda expression analysis, generate command parameterized execution</td>\n</tr>\n<tr>\n<td>UseLazyLoading</td>\n<td>this</td>\n<td>Turn on the lazy loading function,</td>\n</tr>\n<tr>\n<td>UseMonitorCommand</td>\n<td>this</td>\n<td>Monitor before and after global SQL execution.</td>\n</tr>\n<tr>\n<td>UseMappingPriority</td>\n<td>this</td>\n<td>Specify mapping priority（default Aop &lt; FluentApi &lt; Attribute）</td>\n</tr>\n<tr>\n<td>UseNameConvert</td>\n<td>this</td>\n<td>Automatic name conversion Entity -&gt; Db</td>\n</tr>\n<tr>\n<td>UseExitAutoDisposePool</td>\n<td>this</td>\n<td>Listen to the AppDomain.CurrentDomain.ProcessExit/Console.CancelKeyPress event to automatically release the connection pool (default true)</td>\n</tr>\n<tr>\n<td>Build&lt;T&gt;</td>\n<td>IFreeSql&lt;T&gt;</td>\n<td>Create an IFreeSql object. Note: Singleton design, don’t repeat creation</td>\n</tr>\n</tbody>\n</table>\n<h1> ConnectionStrings</h1>\n<table>\n<thead>\n<tr>\n<th>DataType</th>\n<th>ConnectionString</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataType.MySql</td>\n<td>Data Source=127.0.0.1;Port=3306;User ID=root;Password=root; Initial Catalog=cccddd;Charset=utf8; SslMode=none;Min pool size=1</td>\n</tr>\n<tr>\n<td>DataType.PostgreSQL</td>\n<td>Host=192.168.164.10;Port=5432;Username=postgres;Password=123456; Database=tedb;Pooling=true;Minimum Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.SqlServer</td>\n<td>Data Source=.;User Id=sa;Password=123456;Initial Catalog=freesqlTest;TrustServerCertificate=true;Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.Oracle</td>\n<td>user id=user1;password=123456; data source=//127.0.0.1:1521/XE;Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.Sqlite</td>\n<td>Data Source=|DataDirectory|\\document.db; Attachs=xxxtb.db; Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.Firebird</td>\n<td>database=localhost:D:\\fbdata\\EXAMPLES.fdb;user=sysdba;password=123456</td>\n</tr>\n<tr>\n<td>DataType.MsAccess</td>\n<td>Provider=Microsoft.Jet.OleDb.4.0;Data Source=d:/accdb/2003.mdb</td>\n</tr>\n<tr>\n<td>DataType.Dameng(达梦)</td>\n<td>server=127.0.0.1;port=5236;user id=2user;password=123456789;database=2user;poolsize=5</td>\n</tr>\n<tr>\n<td>DataType.ShenTong(神通)</td>\n<td>HOST=192.168.164.10;PORT=2003;DATABASE=OSRDB;USERNAME=SYSDBA;PASSWORD=szoscar55;MAXPOOLSIZE=2</td>\n</tr>\n<tr>\n<td>DataType.KingbaseES(人大金仓) V008R003</td>\n<td>Server=127.0.0.1;Port=54321;UID=USER2;PWD=123456789;database=TEST;MAXPOOLSIZE=2</td>\n</tr>\n<tr>\n<td>DataType.Gbase(南大通用)</td>\n<td>Driver={GBase ODBC DRIVER (64-Bit)};Host=192.168.164.134;Service=9088;Server=gbase01;Database=testdb;Protocol=onsoctcp;Uid=gbasedbt;Pwd=GBase123;Db_locale=zh_CN.utf8;Client_locale=zh_CN.utf8</td>\n</tr>\n<tr>\n<td>DataType.OdbcMySql</td>\n<td>Driver={MySQL ODBC 8.0 Unicode Driver}; Server=127.0.0.1;Persist Security Info=False; Trusted_Connection=Yes;UID=root;PWD=root; DATABASE=cccddd_odbc;Charset=utf8; SslMode=none;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcSqlServer</td>\n<td>Driver={SQL Server};Server=.;Persist Security Info=False; Trusted_Connection=Yes;Integrated Security=True; DATABASE=freesqlTest_odbc; Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcOracle</td>\n<td>Driver={Oracle in XE};Server=//127.0.0.1:1521/XE; Persist Security Info=False; Trusted_Connection=Yes;UID=odbc1;PWD=123456; Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcPostgreSQL</td>\n<td>Driver={PostgreSQL Unicode(x64)};Server=192.168.164.10; Port=5432;UID=postgres;PWD=123456; Database=tedb_odbc;Pooling=true;Min Pool Size=1</td>\n</tr>\n<tr>\n<td>DataType.OdbcDameng (达梦)</td>\n<td>Driver={DM8 ODBC DRIVER};Server=127.0.0.1:5236; Persist Security Info=False; Trusted_Connection=Yes; UID=USER1;PWD=123456789</td>\n</tr>\n<tr>\n<td>DataType.OdbcKingbaseES (人大金仓) V008R003</td>\n<td>Driver={KingbaseES 8.2 ODBC Driver ANSI};Server=127.0.0.1;Port=54321;UID=USER2;PWD=123456789;database=TEST</td>\n</tr>\n<tr>\n<td>DataType.Odbc</td>\n<td>Driver={SQL Server};Server=.;Persist Security Info=False; Trusted_Connection=Yes;Integrated Security=True; DATABASE=freesqlTest_odbc; Pooling=true;Min pool size=1</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dotnetcore/FreeSql/tree/master/Providers/FreeSql.Provider.Custom\" target=\"_blank\" rel=\"noopener noreferrer\">DataType.Custom</a></td>\n<td>Custom connection string, access any database</td>\n</tr>\n</tbody>\n</table>\n<h2> Reference</h2>\n<ul>\n<li><a href=\"Install\">《Install FreeSql》</a></li>\n<li><a href=\"Insert-Data\">《FreeSql 101, Part 1: Insert Data》</a></li>\n<li><a href=\"Delete-Data\">《FreeSql 101, Part 2: Delete Data》</a></li>\n<li><a href=\"Update-Data\">《FreeSql 101, Part 3: Update Data》</a></li>\n<li><a href=\"Query-Data\">《FreeSql 101, Part 4: Query Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n<li><a href=\"Filters-and-Global-Filters\">《Filters and Global Filters》</a></li>\n<li><a href=\"Unit-of-Work\">《UnitOfWork》</a></li>\n</ul>\n",
      "date_published": "2021-08-21T05:59:59.000Z",
      "date_modified": "2023-05-27T07:10:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Insert Or Update",
      "url": "https://freesql.net/en/guide/insert-or-update.html",
      "id": "https://freesql.net/en/guide/insert-or-update.html",
      "summary": "1. IFreeSql.InsertOrUpdate IFreeSql defines the InsertOrUpdate method, which uses the characteristics and functions of the database to implement the added or modified functions....",
      "content_html": "<h1> Insert Or Update</h1>\n<h2> 1. IFreeSql.InsertOrUpdate</h2>\n<p><code>IFreeSql</code> defines the <code>InsertOrUpdate</code> method, which uses the characteristics and functions of the database to implement the added or modified functions. (since 1.5.0)</p>\n<table>\n<thead>\n<tr>\n<th>Database</th>\n<th>Features</th>\n<th></th>\n<th>Database</th>\n<th>Features</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySql</td>\n<td>on duplicate key update</td>\n<td></td>\n<td>Dameng</td>\n<td>merge into</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>on conflict do update</td>\n<td></td>\n<td>Kingbase ES</td>\n<td>on conflict do update</td>\n</tr>\n<tr>\n<td>SqlServer</td>\n<td>merge into</td>\n<td></td>\n<td>Shentong Database</td>\n<td>merge into</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>merge into</td>\n<td></td>\n<td>MsAccess</td>\n<td>not support</td>\n</tr>\n<tr>\n<td>Sqlite</td>\n<td>replace into</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Firebird</td>\n<td>merge into</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>When the entity class has auto-increment properties, batch <code>InsertOrUpdate</code> can be split into two executions at most. Internally, FreeSql will calculate the data without self-increment and with self-increment, and execute the two commands of <code>insert into</code> and <code>merge into</code> mentioned above (using transaction execution).</p>\n<p>Note: the common repository in <code>FreeSql.Repository</code> also has <code>InsertOrUpdate</code> method, but their mechanism is different.</p>\n<hr>\n<h2> 2. IFreeSql.InsertOrUpdateDict</h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3. InsertOrUpdate in <code>FreeSql.Repository</code></h2>\n<p>To use this method, you need to reference the <code>FreeSql.Repository</code> or <code>FreeSql.DbContext</code> extensions package.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>If there is data in the internal state management, then update it.</p>\n<p>If there is no data in the internal state management, query the database to determine whether it exists.</p>\n<blockquote>\n<p>Update if it exists, insert if it doesn't exist</p>\n</blockquote>\n<p>Disadvantages: does not support batch operations</p>\n<hr>\n<h2> 4. Batch Editing: <code>BeginEdit</code></h2>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>When the above code <code>EndEdit</code> method is executed, 3 SQL statements are generated, as follows:</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Use case: In winform, after loading the table data, perform some operations such as adding, modifying, and deleting, and then click [Save]</p>\n<p>Note: This operation is only valid for the variable <code>cts</code>, not for comparison and update of the entire table.</p>\n<h2> 4. <code>On Duplicate Key Update</code> (MySql only)</h2>\n<p><code>FreeSql.Provider.MySql</code> and <code>FreeSql.Provider.MySqlConnector</code> support MySql's unique function <code>On Duplicate Key Update</code>.</p>\n<p>This function can also insert or update data, and supports batch operations.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Methods that can be called after <code>OnDuplicateKeyUpdate()</code>:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IgnoreColumns</td>\n<td>Ignore updated columns, the mechanism is the same as <code>IUpdate.IgnoreColumns</code></td>\n</tr>\n<tr>\n<td>UpdateColumns</td>\n<td>Specify updated columns, the mechanism is the same as <code>IUpdate.UpdateColumns</code></td>\n</tr>\n<tr>\n<td>Set</td>\n<td>Manually specify the updated column, the same function as <code>IUpdate.Set</code></td>\n</tr>\n<tr>\n<td>SetRaw</td>\n<td>As a supplement to the <code>Set</code> method, SQL strings can be passed in.</td>\n</tr>\n<tr>\n<td>ToSql</td>\n<td>Return the SQL statement to be executed</td>\n</tr>\n<tr>\n<td>ExecuteAffrows</td>\n<td>Execute and return the number of rows affected</td>\n</tr>\n</tbody>\n</table>\n<p>Both <code>IInsert</code> and <code>OnDuplicateKeyUpdate</code> have <code>IgnoreColumns</code> and <code>UpdateColumns</code> methods.</p>\n<p>When inserting an entity or a set of entities, the <code>time</code> column is ignored, the code is as follows:</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>We found that the <code>UPDATE time</code> part became a constant instead of <strong>VALUES(`time`)</strong>. The mechanism is as follows:</p>\n<p>When there are columns in the <code>insert</code> part, they will be set in the form of VALUES(`field`) in the <code>update</code>;</p>\n<p>When a column that does not exist in the <code>insert</code> part, it will be set as a constant in the <code>update</code>. When manipulating the entity array, this constant is executed for <code>case when ... end</code> (same as <code>IUpdate</code>);</p>\n<hr>\n<h2> 5. <code>On Conflict Do Update</code> (PostgreSQL only)</h2>\n<p><code>FreeSql.Provider.PostgreSQL</code> supports PostgreSQL 9.5+ unique function <code>On Conflict(id) Do Update</code>.</p>\n<p>The usage method is roughly the same as that of MySql's <code>OnDuplicateKeyUpdate</code>.</p>\n<div class=\"language-csharp line-numbers-mode\" data-ext=\"cs\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2021-08-21T05:59:59.000Z",
      "date_modified": "2022-03-29T16:53:03.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Install",
      "url": "https://freesql.net/en/guide/install.html",
      "id": "https://freesql.net/en/guide/install.html",
      "summary": "FreeSql is a .NET Standard 2.0 library, which only supports applications of .NET Framework 4.0, .NET Core or higher. Packages Package Name Version Description NuGet ------------...",
      "content_html": "<h1> Install</h1>\n<p>FreeSql is a <code>.NET Standard 2.0</code> library, which only supports applications of <code>.NET Framework 4.0</code>, <code>.NET Core</code> or higher.</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Packages</h2>\n<table>\n<thead>\n<tr>\n<th>Package Name</th>\n<th>Version</th>\n<th>Description</th>\n<th>NuGet</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"Repository\">FreeSql.Repository</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Common Repository + UoW</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Repository\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Repository\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"DbContext\">FreeSql.DbContext</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>EfCore Style Implementation</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.DbContext\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.DbContext\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MySql</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Based on MySql.Data (Oracle official)</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.MySql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.MySql\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MySqlConnector</td>\n<td>NETStandard2.0、net45</td>\n<td>Based on MySqlConnector</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.MySqlConnector\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.MySqlConnector\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.PostgreSQL</td>\n<td>NETStandard2.0、net45</td>\n<td>Based on PostgreSQL 9.5+</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.PostgreSQL\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.PostgreSQL\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.SqlServer</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Support SqlServer 2005+, based on Microsoft.Data.SqlClient</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.SqlServer\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.SqlServer\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.SqlServerForSystem</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Support SqlServer 2005+, based on Microsoft.Data.SqlClient</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.SqlServerForSystem\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.SqlServerForSystem\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Sqlite</td>\n<td>NETStandard2.0、net45、net40</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Sqlite\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Sqlite\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Oracle</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Oracle.ManagedDataAccess.Core</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Oracle\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Oracle\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Firebird</td>\n<td>NETStandard2.0、net452</td>\n<td>FirebirdSql.Data.FirebirdClient</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Firebird\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Firebird\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.MsAccess</td>\n<td>NETStandard2.0、net45、net40</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.MsAccess\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.MsAccess\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.Dameng</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Based on Dameng Database</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Dameng\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Dameng\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.ShenTong</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Based on ShenTong Database</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.ShenTong\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.ShenTong\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Provider.KingbaseES</td>\n<td>NETStandard2.0、net461</td>\n<td>Based on KingbaseEs</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.KingbaseES\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.KingbaseES\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dotnetcore/FreeSql/tree/master/Providers/FreeSql.Provider.Odbc\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql.Provider.Odbc</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Based on ODBC</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Odbc\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Odbc\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/dotnetcore/FreeSql/tree/master/Providers/FreeSql.Provider.Custom\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql.Provider.Custom</a></td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Custom database provider</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Provider.Custom\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Provider.Custom\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Extensions.LazyLoading</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Lazy loading extensions</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.LazyLoading\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.LazyLoading\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Extensions.JsonMap</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>Json serialization extensions</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.JsonMap\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.JsonMap\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Extensions.Linq</td>\n<td>NETStandard2.0、net45、net40</td>\n<td>LinqToSql IQueryable extensions</td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.Linq\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.Linq\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Extensions.BaseEntity</td>\n<td>NETStandard2.0</td>\n<td></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Extensions.BaseEntity\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Extensions.BaseEntity\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n<tr>\n<td>FreeSql.Generator</td>\n<td>NETCoreapp3.1</td>\n<td>Generate entity classes from the database. <a href=\"https://www.cnblogs.com/igeekfan/p/freesql-generator.html\" target=\"_blank\" rel=\"noopener noreferrer\">How does it work?</a></td>\n<td><strong><a href=\"https://www.nuget.org/packages/FreeSql.Generator\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://buildstats.info/nuget/FreeSql.Generator\" alt=\"NuGet\" loading=\"lazy\"></a></strong></td>\n</tr>\n</tbody>\n</table>\n<h2> Guide</h2>\n<p>FreeSql supports basic CURD. In addition, it also supports creating models based on existing databases (<a href=\"DbFirst-Mode\">DbFirst</a>), and supports creating databases based on models (<a href=\"CodeFirst-Mode\">CodeFirst</a>).</p>\n<h4> Getting Started</h4>\n<ul>\n<li><a href=\"Insert-Data\">《FreeSql 101, Part 1: Insert Data》</a></li>\n<li><a href=\"Delete-Data\">《FreeSql 101, Part 2: Delete Data》</a></li>\n<li><a href=\"Update-Data\">《FreeSql 101, Part 3: Update Data》</a></li>\n<li><a href=\"Query-Data\">《FreeSql 101, Part 4: Query Data》</a></li>\n<li><a href=\"Repository-Layer\">《Repository Layer》</a></li>\n</ul>\n<h4> Deep Learning</h4>\n<ul>\n<li><a href=\"CodeFirst-Mode\">《Introduction to Codefirst Mode》</a>\n<ul>\n<li><a href=\"Entity-Attributes\">《CodeFirst Mode, Part 1: Entity Attributes》</a></li>\n<li><a href=\"FluentApi-Mode\">《CodeFirst Mode, Part 2: FluentApi》</a></li>\n<li><a href=\"Custom-Attributes\">《CodeFirst Mode, Part 3: Custom Attributes》</a></li>\n<li><a href=\"Type-Mapping\">《CodeFirst Mode, Part 4: Type Mapping》</a></li>\n<li><a href=\"Migration-Structure\">《CodeFirst Mode, Part 5: Migration Structure》</a></li>\n</ul>\n</li>\n<li><a href=\"DbFirst-Mode\">《Introduction to DbFirst Mode》</a></li>\n</ul>\n<h4> Advanced</h4>\n<ul>\n<li><a href=\"Database-Transaction\">《Database Transaction》</a></li>\n<li><a href=\"Using-Read-Write-Separation\">《Using Read/Write Separation》</a></li>\n<li><a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li><a href=\"Tenant\">《Tenant》</a></li>\n<li><a href=\"Return-Data\">《Return Data》</a></li>\n<li><a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li><a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li><a href=\"Expression-Function\">《Expression Function》</a></li>\n<li><a href=\"Aspect-Oriented-Programming\">《AOP》</a></li>\n</ul>\n",
      "image": "https://buildstats.info/nuget/FreeSql.Repository",
      "date_published": "2021-08-21T05:59:59.000Z",
      "date_modified": "2022-07-09T09:12:32.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Guide",
      "url": "https://freesql.net/en/guide/",
      "id": "https://freesql.net/en/guide/",
      "summary": "FreeSql ![Member project of .NET Core Community (https://img.shields.io/badge/member%20project%20of-NCC-9e20c9.svg)](https://github.com/dotnetcore) ![nuget (https://img.shields....",
      "content_html": "<h1> Guide</h1>\n<h2> FreeSql</h2>\n<p><a href=\"https://github.com/dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/member project of-NCC-9e20c9.svg\" alt=\"Member project of .NET Core Community\" loading=\"lazy\"></a>\n<a href=\"https://www.nuget.org/packages/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/FreeSql.svg?style=flat-square\" alt=\"nuget\" loading=\"lazy\"></a>\n<a href=\"https://www.nuget.org/stats/packages/FreeSql?groupby=Version\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/dt/FreeSql.svg?style=flat-square\" alt=\"stats\" loading=\"lazy\"></a>\n<a href=\"https://github.com/dotnetcore/FreeSql/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License\" loading=\"lazy\"></a></p>\n<figure><a href=\"https://starchart.cc/dotnetcore/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://starchart.cc/dotnetcore/FreeSql.svg\" alt=\"Stargazers over time\" tabindex=\"0\" loading=\"lazy\"></a><figcaption>Stargazers over time</figcaption></figure>\n<p>FreeSql is a powerful <strong>.NET ORM</strong> that supports all <em>.NET Standard</em> runtime platforms like <em>.NET Framework 4.0+</em>, <em>.NET Core 2.1+</em> and <em>Xamarin</em>, etc.</p>\n<p>QQ Groups：4336577(full)、8578575(full)、<strong>52508226(available)</strong></p>\n<h2> Features</h2>\n<ul>\n<li>🛠 Support CodeFirst data migration.</li>\n<li>💻 Support DbFirst import entity class from database, or use <a href=\"https://github.com/dotnetcore/FreeSql/wiki/DbFirst\" target=\"_blank\" rel=\"noopener noreferrer\">Generation Tool</a>.</li>\n<li>⛳ Support advanced type mapping, such as PostgreSQL array type, etc.</li>\n<li>🌲 Support expression functions, and customizable analysis.</li>\n<li>🏁 Support one-to-many and many-to-many navigation properties, include and lazy loading.</li>\n<li>📃 Support Read/Write separation, Splitting Table/Database, Global filters, Optimistic and pessimistic locker.</li>\n<li>🌳 Support MySql/SqlServer/PostgreSQL/Oracle/Sqlite/Firebird/达梦/人大金仓/神舟通用/翰高/ClickHouse, GBase/Access, etc.</li>\n</ul>\n<h2> Guide</h2>\n<p>FreeSql supports basic CURD. In addition, it also supports creating models based on existing databases (<a href=\"DbFirst-Mode\">DbFirst</a>), and supports creating databases based on models (<a href=\"CodeFirst-Mode\">CodeFirst</a>).</p>\n<h4> Getting Started</h4>\n<ul>\n<li><a href=\"Insert-Data\">《FreeSql 101, Part 1: Insert Data》</a></li>\n<li><a href=\"Delete-Data\">《FreeSql 101, Part 2: Delete Data》</a></li>\n<li><a href=\"Update-Data\">《FreeSql 101, Part 3: Update Data》</a></li>\n<li><a href=\"Query-Data\">《FreeSql 101, Part 4: Query Data》</a></li>\n<li>🚧 <a href=\"Repository-Layer\">《Repository Layer》</a></li>\n</ul>\n<h4> Deep Learning</h4>\n<ul>\n<li>🚧 <a href=\"CodeFirst-Mode\">《Introduction to Codefirst Mode》</a>\n<ul>\n<li>🚧 <a href=\"Entity-Attributes\">《CodeFirst Mode, Part 1: Entity Attributes》</a></li>\n<li>🚧 <a href=\"FluentApi-Mode\">《CodeFirst Mode, Part 2: FluentApi》</a></li>\n<li>🚧 <a href=\"Custom-Attributes\">《CodeFirst Mode, Part 3: Custom Attributes》</a></li>\n<li>🚧 <a href=\"Type-Mapping\">《CodeFirst Mode, Part 4: Type Mapping》</a></li>\n<li>🚧 <a href=\"Migration-Structure\">《CodeFirst Mode, Part 5: Migration Structure》</a></li>\n</ul>\n</li>\n<li>🚧 <a href=\"DbFirst-Mode\">《Introduction to DbFirst Mode》</a></li>\n</ul>\n<h4> Advanced</h4>\n<ul>\n<li>🚧 <a href=\"Database-Transaction\">《Database Transaction》</a></li>\n<li>🚧 <a href=\"Using-Read-Write-Separation\">《Using Read/Write Separation》</a></li>\n<li>🚧 <a href=\"Sharding-Tables-and-Database\">《Sharding Tables and Database》</a></li>\n<li>🚧 <a href=\"Tenant\">《Tenant》</a></li>\n<li>🚧 <a href=\"Return-Data\">《Return Data》</a></li>\n<li>🚧 <a href=\"Lazy-Loading\">《FreeSql Optimization: Lazy Loading》</a></li>\n<li>🚧 <a href=\"Greed-Loading\">《FreeSql Optimization: Greed Loading》</a></li>\n<li>🚧 <a href=\"Expression-Function\">《Expression Function》</a></li>\n<li>🚧 <a href=\"ActiveX-Data-Objects\">《ADO》</a></li>\n<li>🚧 <a href=\"Aspect-Oriented-Programming\">《AOP》</a></li>\n</ul>\n<h4> WeChat</h4>\n<p>Welcome to follow on Wechat <strong>dotNET搬砖队</strong>, we will share information about .NET Core and FreeSql.</p>\n<figure><img src=\"https://pic.downk.cc/item/5f80867d1cd1bbb86bc67041.jpg\" alt=\"分享.NET Core+FreeSql相关技术\" tabindex=\"0\" loading=\"lazy\"><figcaption>分享.NET Core+FreeSql相关技术</figcaption></figure>\n",
      "image": "https://img.shields.io/badge/member%20project%20of-NCC-9e20c9.svg",
      "date_published": "2021-02-04T16:03:18.000Z",
      "date_modified": "2022-07-09T09:12:32.000Z",
      "authors": [],
      "tags": []
    }
  ]
}